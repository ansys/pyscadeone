name: GitHub CI
on:
  pull_request:
    types: [opened, reopened, synchronize, edited, closed]
  push:
    tags:
      - "*"
    branches:
      - main
      - sync/*
  workflow_dispatch:
permissions:
  contents: read
  pull-requests: read

env:
  MAIN_PYTHON_VERSION: '3.10'
  PYTHON_VERSION: '3.10'
  LIBRARY_NAME: 'ansys-scadeone-core'
  DOCUMENTATION_CNAME: 'scadeone.docs.pyansys.com'
  PACKAGE_NAMESPACE: 'ansys.scadeone.core'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  update-changelog:
    name: "Update CHANGELOG (on release)"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@v10
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  pr-name:
    if: github.event_name == 'pull_request'
    name: Check the name of the PR
    runs-on: ubuntu-latest
    steps:
      - name: Check commit name
        uses: ansys/actions/check-pr-title@v10
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  code-style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-uv: true

  doc-style:
    name: Doc style
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-style@v10
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: Doc building
    if: github.event.action != 'closed'
    needs: [doc-style]
    runs-on: [windows-latest]
    steps:
      - uses: ansys/actions/doc-build@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          sphinxopts: -j auto -W
          add-pdf-html-docs-as-assets: false
          use-uv: true

  smoke-test:
    name: Smoke test
    needs: code-style
    runs-on: [ubuntu-latest]
    steps:
      - uses: ansys/actions/tests-pytest@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          pytest-postargs: 'tests/test_smoke.py'
          use-uv: true
 
  build-library:
    name: Build
    if: ${{ !contains(github.event.pull_request.title, '[skip tests]') }}
    needs: [smoke-test, doc-build]
    runs-on: [ubuntu-latest]

    steps:
      - uses: ansys/actions/build-library@v10
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-uv: true
           
  doc-deploy-dev:
    name: "Deploy development documentation"
    # Deploy development only when merging or pushing to the 'main' branch
    runs-on: ubuntu-latest
    needs: [build-library]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: ansys/actions/doc-deploy-dev@v10
        with:
          doc-artifact-name: 'documentation-html'
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  doc-deploy-pr:
    name: "Deploy PR documentation"
    # Deploy documentation for PRs, deletes at closure
    runs-on: ubuntu-latest
    needs: doc-build
    if: always() && (needs.doc-build.result == 'success' || needs.doc-build.result == 'skipped')
    steps:
      - uses: ansys/actions/doc-deploy-pr@v10
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
          maximum-pr-doc-deployments: 10

  release:
    name: "Release project"
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
    needs: build-library
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: write
    steps:
    
      # Not working yet since PyScadeOne does not have PDF documentation
      # - name: "Release to GitHub"
      #   uses: ansys/actions/release-github@v10
      #   with:
      #     library-name: ${{ env.LIBRARY_NAME }}
      #     additional-artifacts: 'examples'

      - name: "Download the library artifacts from build-library step"
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        with:
          name: ${{ env.LIBRARY_NAME }}-artifacts
          path: ${{ env.LIBRARY_NAME }}-artifacts

      - name: "Upload release to PyPI using trusted publisher"
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          repository-url: "https://upload.pypi.org/legacy/"
          print-hash: true
          packages-dir: ${{ env.LIBRARY_NAME }}-artifacts
          skip-existing: false

  doc-deploy-stable:
    name: "Deploy stable documentation"
    # Deploy release documentation when creating a new tag
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-stable@v10
        with:
          doc-artifact-name: 'documentation-html'
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  check-actions-security:
    name: "Audit workflow security"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: ansys/actions/check-actions-security@v10
