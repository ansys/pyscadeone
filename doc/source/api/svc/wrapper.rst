.. _ref_python_wrapper:

.. currentmodule:: ansys.scadeone.core.svc.wrapper

Python wrapper
==============

The Python wrapper is a PyScadeOne service to execute the Scade One application in Python.

The principle is to generate a Python proxy from a given Scade One operator. This generation can be performed using
:ref:`the PythonWrapper class <ref_python_wrapper_class_use>` or
:ref:`the Python wrapper command line <ref_python_wrapper_command_line>`. An example of use is given in
the :ref:`ref_python_wrapper_example` section.

This operator has to be a root operator of a code generation job,
and this job must be executed before using the Python wrapper service.

.. _ref_python_proxy:

Python proxy
------------

The Python proxy is a Python module containing a class that represents the root operator selected in the code
generation job.

This class has the following properties:

- inputs: the list of input variables
- outputs: the list of output variables

and the following methods:

- cycle: call the cycle function
- reset: call the reset function

The Python wrapper service supports only:

- one root operator
- scalar types for inputs and outputs

Once the module is generated, it can be used in a Python script to execute the selected root operator,
providing the input values and getting the output ones:

.. code:: python

    # Import the generated Python proxy module
    import <proxy_name>

    # Create an instance of the root operator
    root_operator = proxy_name.<root_operator_name>()

    # Set the input variables
    root_operator.inputs.<input_variable_name> = <input_value>

    # Execute the cycle function
    root_operator.cycle()

    # It could be executed multiple times
    root_operator.cycle(5) # the cycle function will be executed 5 times

    # Get the output variables
    output = root_operator.outputs.<output_variable_name>

    # Print the output value
    print(output)

    # Reset the operator
    root_operator.reset()

.. _ref_python_wrapper_class_use:

The :py:class:`PythonWrapper` class use
---------------------------------------

.. currentmodule:: ansys.scadeone.core.svc.wrapper.python_wrapper

The Python proxy can be generated using the :py:class:`PythonWrapper` class as follows:

.. code:: python

    from ansys.scadeone.core.svc.wrapper.python_wrapper import PythonWrapper

    # Before using `PythonWrapper`, code generation job must be executed
    # and select the root operator to be used for the Python proxy

    project_path = <scade_one_project_path>
    job_name = <codegen_job_name>
    proxy_name = <proxy_name>
    root_operator_name = <root_operator_path_name>

    app = ScadeOne(install_dir=<s_one_install>)
    project = app.load_project(project_path)

    # Parse the mapping file generated by the code generation job.
    # `PythonWrapper` uses this file to generate the Python proxy
    code_gen = GeneratedCode(project, job_name)

    # Create a PythonWrapper instance
    wrapper = PythonWrapper(project, code_gen, root_operator_name, proxy_name)
    wrapper.generate()

    # The Python proxy is generated in the same location of the generated code.

.. _ref_python_wrapper_command_line:

Python wrapper command line
---------------------------

The Python wrapper can be also generated using the PyScadeOne command line, by selecting the `wrapper` command.
All expected arguments can be passed through this command. A complete list of arguments is given by `\-\-help`.

.. code:: sh

    pyscadeone wrapper --help

.. code::

    usage: pyscadeone wrapper [-h] [-n OUT_NAME] [-inst INSTALL_DIR] 
                          project job_name operator_name

    positional arguments:
      project               Scade One project
      job_name              Generated Code job name
      operator_name         Root Operator name

    optional arguments:
      -h, --help            Show this help message and exit
      -inst INSTALL_DIR, --install_dir INSTALL_DIR
                            Scade One installation directory
      -n OUT_NAME, --out_name OUT_NAME
                            Name of the output python module (by default,
                            'opt_wrapper')

.. _ref_python_wrapper_doc:

Python wrapper documentation
----------------------------

This section gives the API for the Python wrapper.

.. currentmodule:: ansys.scadeone.core.svc.wrapper.python_wrapper

.. autoclass:: PythonWrapper
    :members: generate build
    :member-order: bysource
