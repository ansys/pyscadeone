{% if TOOL_WRAPPER %}
# generated by {{TOOL_WRAPPER}}
{% endif %}

from pathlib import Path
import ctypes


# load the SCADE executable code
_lib = ctypes.cdll.LoadLibrary(str(Path(__file__).with_suffix('')))
{% if ELABORATION %}
elaboration_fct = _lib.{{ELABORATION}}
elaboration_fct.argtypes = []
elaboration_fct.restype = ctypes.c_void_p
elaboration_fct()
{% endif %}
{% if SENSORS %}
# TODO reserved for sensors
{% endif %}
{% if STRUCTURE_TYPES %}
# TODO C structure types
{% endif %}


class {{OPERATOR_IN["name"]}}:
    def __init__(self):
{% if OPERATOR_IN["parameters"] %}
{% for opt in OPERATOR_IN["parameters"] %}
        self._{{ opt[0] }}: {{ opt[1] }} = {{ opt[2] }}
{% endfor %}

{% for opt in OPERATOR_IN["parameters"] %}
    @property
    def {{ opt[0] }}(self) -> {{ opt[1] }}:
        {% if opt[1] == "bool" %}
        return self._{{ opt[0] }} == 1
        {% else %}
        return self._{{ opt[0] }}
        {% endif %}

    @{{ opt[0] }}.setter
    def {{ opt[0] }}(self, value: {{ opt[1] }}) -> None:
    {% if opt[1] == "bool" %}
        self._{{ opt[0] }} = 1 if value else 0
    {% else %}
        self._{{ opt[0] }} = value
    {% endif %} 
{% endfor %}
{% else %}
        pass
{% endif %}

class {{OPERATOR_OUT["name"]}}:
{% if OPERATOR_OUT["parameters"] %}
{% if IOS_CONTEXT %}
    def __init__(self, context, offsets):
{% for parameter in IOS_CONTEXT %}
        {{parameter}}
{% endfor %}
{% else %}
    def __init__(self):
{% for parameter in OPERATOR_OUT["parameters"] %}
        self._{{parameter[0]}} = {{parameter[3]}}({{parameter[2]}})
{% endfor %}
{% endif %}

{% for opt in OPERATOR_OUT["parameters"] %}
    @property
    def {{ opt[0] }}(self) -> {{ opt[1] }}:
        {% if opt[1] == "bool" %}
        return self._{{ opt[0] }} == 1
        {% elif OP_CYCLE["return"] %}
        return self._{{ opt[0] }}
        {% else %}
        return self._{{ opt[0] }}.value
        {% endif %}

    @{{ opt[0] }}.setter
    def {{ opt[0] }}(self, value: {{ opt[1] }}) -> None:
    {% if opt[1] == "bool" %}
        self._{{ opt[0] }} = 1 if value else 0
    {% else %}
        self._{{ opt[0] }} = value
    {% endif %} 
{% endfor %}
{% else %}
        pass
{% endif %}

class {{OPERATOR_NAME}}:
    def __init__(self):
{% if OP_CONTEXT %}
        alloc_fct = _lib.py_alloc_{{OP_CONTEXT["c_name"]}}
        alloc_fct.argtypes = []
        alloc_fct.restype = ctypes.c_void_p
        context = alloc_fct()
        self.{{OP_CONTEXT["py_name"]}} = ctypes.c_void_p.from_address(context)
    {% if OP_CONTEXT["len_context"] != 0 %}
        offsets = (ctypes.c_int64 * {{OP_CONTEXT["len_context"]}}).in_dll(_lib, "py_offsets_{{OP_CONTEXT['c_name']}}")
    {% endif %}
{% endif %}
{% if OP_RESET %}
        self.reset_fct = _lib.{{OP_RESET["c_name"]}}
    {% if OP_CYCLE["return"] %}
        self.reset_fct.restype = {{OP_CYCLE["return"][3]}}
    {% else %}
        self.reset_fct.restype = ctypes.c_void_p
    {% endif %}
{% endif %}
        self.cycle_fct = _lib.{{OP_CYCLE["c_name"]}}
        self.cycle_fct.argtypes = [
        {% for opt in OP_CYCLE["parameter"] %}
            {{ opt }},
        {% endfor %}
        ]
    {% if OP_CYCLE["return"] %}
        self.cycle_fct.restype = {{OP_CYCLE["return"][3]}}
    {% else %}
        self.cycle_fct.restype = ctypes.c_void_p
    {% endif %}
        self.inputs = Inputs()
{% if IOS_CONTEXT %}
        self.outputs = Outputs(context, offsets)
{% else %}
        self.outputs = Outputs()
{% endif %}

{% if OP_CONTEXT %}
    def __del__(self):
        free_fct = _lib.py_free_{{OP_CONTEXT["c_name"]}}
        free_fct.argtypes = [ctypes.c_void_p]
        free_fct.restype = None
        free_fct(ctypes.byref(self.{{OP_CONTEXT["py_name"]}}))

{% endif %}
    def reset(self) -> None:
{% if OP_RESET %}
        {% if OP_RESET["parameters"] %}
        self.reset_fct(ctypes.byref(self.{{OP_CONTEXT["py_name"]}}))
        {% else %}
            self.reset_fct()
        {% endif %}
{% else %}
        # no reset function
        pass
{% endif %}

    def cycle(self, cycles: int = 1) -> None:
        for i in range(cycles):
        {% if OP_CYCLE["return"] %}
            self.outputs._{{OP_CYCLE["return"][0]}} = self.cycle_fct(
        {% else %}
            self.cycle_fct(
        {% endif %}
        {% if IOS_CONTEXT %}
            {% for opt in OP_CYCLE["parameters_name"] %}
                {% if "out_c" in opt %}
                self._out_c,
                {% else %}
                self.inputs.{{ opt }},
                {% endif %}
            {% endfor %}
        {% else %}
            {% for opt in OP_CYCLE["parameters_name"] %}
                self.inputs.{{ opt }},
            {% endfor %}
            {% if not OP_CYCLE["return"] %}
                {% for parameter in OPERATOR_OUT["parameters"] %}
                self.outputs._{{parameter[0]}},
                {% endfor %}
            {% endif %}
        {% endif %}
            )
# end of file
