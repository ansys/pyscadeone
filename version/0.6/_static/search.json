[
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#sequential",
        "title": "Sequential",
        "section": "Sequential",
        "text": "Operator\nClass\n-> (Initial value)\nSee BinaryExpr\npre (Unit delay)\nSee UnaryExpr\npre (Initialized unit delay)\nSee BinaryExpr\nwindow (Temporal window)\nSee Window\nBases: Expression\nTemporal window: expr ::= window <<expr>> ( group ) ( group ).\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nWindow initial values.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nWindow parameters.\nWindow size.\nSequential\nSequential Operations\nBinaryExpr\nUnaryExpr\nBinaryExpr\nWindow\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#ansys.scadeone.core.swan.Window",
        "title": "Sequential > Sequential > Window",
        "section": "Sequential > Window",
        "text": "class ansys.scadeone.core.swan.Window(size: Expression, init: Group, params: Group)\n\nBases: Expression\n\nTemporal window: expr ::= window <<expr>> ( group ) ( group ).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty init: Group\n\nWindow initial values.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty params: Group\n\nWindow parameters.\n\n!! processed by numpydoc !!\n\n\n\nproperty size: Expression\n\nWindow size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#ansys.scadeone.core.swan.Window.get_full_path",
        "title": "Sequential > Sequential > get_full_path",
        "section": "Sequential > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#ansys.scadeone.core.swan.Window.set_owner",
        "title": "Sequential > Sequential > set_owner",
        "section": "Sequential > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#ansys.scadeone.core.swan.Window.init",
        "title": "Sequential > Sequential > init",
        "section": "Sequential > init",
        "text": "property init: Group\n\nWindow initial values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#ansys.scadeone.core.swan.Window.is_protected",
        "title": "Sequential > Sequential > is_protected",
        "section": "Sequential > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#ansys.scadeone.core.swan.Window.model",
        "title": "Sequential > Sequential > model",
        "section": "Sequential > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#ansys.scadeone.core.swan.Window.module",
        "title": "Sequential > Sequential > module",
        "section": "Sequential > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#ansys.scadeone.core.swan.Window.owner",
        "title": "Sequential > Sequential > owner",
        "section": "Sequential > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#ansys.scadeone.core.swan.Window.params",
        "title": "Sequential > Sequential > params",
        "section": "Sequential > params",
        "text": "property params: Group\n\nWindow parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/sequential",
        "href": "api/language/expressions/sequential.html#ansys.scadeone.core.swan.Window.size",
        "title": "Sequential > Sequential > size",
        "section": "Sequential > size",
        "text": "property size: Expression\n\nWindow size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/index",
        "href": "api/svc/index.html#services",
        "title": "Services",
        "section": "Services",
        "text": "This section describes services provided by the API. A service is an additional feature\nbuilt up on the low-level data structures representing a Swan model, a project, etc.\nServices"
    },
    {
        "objectID": "api/language/operator/index",
        "href": "api/language/operator/index.html#operators",
        "title": "Operators",
        "section": "Operators",
        "text": "This section describes operators and signatures related classes.\nSignature and operator declarations are detailed in operator.\nThe body of an operator consists of sections, detailed as follows:\nVariable declaration in section var\nEquation declaration in section equation\nActivations and state machines, which are parts of equation concepts are\ndescribed in separate sections: activation and automaton\nFormal property sections for assume and guarantee are grouped in the\nsection other_sections, with the emission scope section\nDiagrams are detailed in section diagram\nOperators"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#functional-update",
        "title": "Functional update",
        "section": "Functional update",
        "text": "Functional update is the modification of an array or a structure with\nthe creation of a new value.\nOperation\nKind\n_ with [_]\nArray\n_ with .l\nStructure\nSee also LabelOrIndex.\nBases: SwanItem\nModifier expression: {{ label_or_index }}+ = expr.\nLabel of index can be syntactically incorrect. In which case, _modifier_ is\na string, and is_protected property is True.\nSee FunctionalUpdate.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nModifier expression.\nModifier has a syntax error and is protected.\nReturn model containing the Swan item.\nModifier as label or index.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Expression\nCopy with modification: ( expr  with modifier {{ ; modifier }} [[ ; ]] ).\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nExpression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nCopy modifiers.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nFunctional update\nFunctional update\nLabelOrIndex\nSwanItem\nFunctionalUpdate\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.Modifier",
        "title": "Functional update > Functional update > Modifier",
        "section": "Functional update > Modifier",
        "text": "class ansys.scadeone.core.swan.Modifier(modifier: List[LabelOrIndex] | str, expr: Expression)\n\nBases: SwanItem\n\nModifier expression: {{ label_or_index }}+ = expr.\n\nLabel of index can be syntactically incorrect. In which case, _modifier_ is\na string, and is_protected property is True.\n\nSee FunctionalUpdate.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nModifier expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nModifier has a syntax error and is protected.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty modifier: List[LabelOrIndex] | str\n\nModifier as label or index.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.Modifier.get_full_path",
        "title": "Functional update > Functional update > get_full_path",
        "section": "Functional update > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.Modifier.set_owner",
        "title": "Functional update > Functional update > set_owner",
        "section": "Functional update > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.Modifier.expr",
        "title": "Functional update > Functional update > expr",
        "section": "Functional update > expr",
        "text": "property expr: Expression\n\nModifier expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.Modifier.is_protected",
        "title": "Functional update > Functional update > is_protected",
        "section": "Functional update > is_protected",
        "text": "property is_protected\n\nModifier has a syntax error and is protected.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.Modifier.model",
        "title": "Functional update > Functional update > model",
        "section": "Functional update > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.Modifier.modifier",
        "title": "Functional update > Functional update > modifier",
        "section": "Functional update > modifier",
        "text": "property modifier: List[LabelOrIndex] | str\n\nModifier as label or index.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.Modifier.module",
        "title": "Functional update > Functional update > module",
        "section": "Functional update > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.Modifier.owner",
        "title": "Functional update > Functional update > owner",
        "section": "Functional update > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.FunctionalUpdate",
        "title": "Functional update > Functional update > FunctionalUpdate",
        "section": "Functional update > FunctionalUpdate",
        "text": "class ansys.scadeone.core.swan.FunctionalUpdate(expr: Expression, modifiers: List[Modifier])\n\nBases: Expression\n\nCopy with modification: ( expr  with modifier {{ ; modifier }} [[ ; ]] ).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty modifiers: List[Modifier]\n\nCopy modifiers.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.FunctionalUpdate.get_full_path",
        "title": "Functional update > Functional update > get_full_path",
        "section": "Functional update > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.FunctionalUpdate.set_owner",
        "title": "Functional update > Functional update > set_owner",
        "section": "Functional update > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.FunctionalUpdate.expr",
        "title": "Functional update > Functional update > expr",
        "section": "Functional update > expr",
        "text": "property expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.FunctionalUpdate.is_protected",
        "title": "Functional update > Functional update > is_protected",
        "section": "Functional update > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.FunctionalUpdate.model",
        "title": "Functional update > Functional update > model",
        "section": "Functional update > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.FunctionalUpdate.modifiers",
        "title": "Functional update > Functional update > modifiers",
        "section": "Functional update > modifiers",
        "text": "property modifiers: List[Modifier]\n\nCopy modifiers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.FunctionalUpdate.module",
        "title": "Functional update > Functional update > module",
        "section": "Functional update > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/update",
        "href": "api/language/expressions/update.html#ansys.scadeone.core.swan.FunctionalUpdate.owner",
        "title": "Functional update > Functional update > owner",
        "section": "Functional update > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "index",
        "href": "index.html#pyscadeone-documentation--06",
        "title": "PyScadeOne documentation  0.6",
        "section": "PyScadeOne documentation  0.6",
        "text": "PyScadeOne is a Python library for the\nAnsys Scade OneTM\nmodel-based development environment.\nThis library allows:\ndata access\nreading projects and navigating in models\nreading and editing simulation data files\nreading test results\nreading information about the generated code\necosystem integration\nimporting SCADE Test tests procedures\nexporting FMI 2.0 components\nLearn how to install and run PyScadeOne.\nCheck for supported versions.\nUnderstand key PyScadeOne concepts for projects and models.\nUnderstand PyScadeOne library, its capabilities,\nand how to use it programmatically.\nExplore examples that show how to use PyScadeOne.\nLearn how to contribute to the PyScadeOne codebase\nor documentation.\nPyScadeOne documentation  0.6"
    },
    {
        "objectID": "api/scadeone",
        "href": "api/scadeone.html#scadeone-app",
        "title": "ScadeOne app",
        "section": "ScadeOne app",
        "text": "The ScadeOne “app” is the Python class that allows you to interact with Scade One projects.\nThe ansys.scadeone.core module must be referenced by scripts using PyScadeOne. It exposes the ScadeOne class representing a Scade One instance.\nAn instance of the ScadeOne class gives access to project loading and model-related activities as shown in the next figure:\nBases: IScadeOne\nScade One application API.\nClose application, releasing any connection.\nLoad a Scade One project.\nStorage containing project data.\nProject object, or None if file does not exist.\nSubstitute $(SCADE_ONE_LIBRARIES_DIR) in path.\nif ScadeOne.install_dir is None, no change is made.\nInstallation directory as given when creating the ScadeOne instance.\nReturn the loaded projects.\nLoaded projects.\nAPI version.\nScadeOne app\nScadeOne\nansys.scadeone.core\nScadeOne\nScadeOne\nIScadeOne\nUnion\nProjectAsset\nPath\npython:str\nScadeOne.install_dir\nList\nProject"
    },
    {
        "objectID": "api/scadeone",
        "href": "api/scadeone.html#ansys.scadeone.core.ScadeOne",
        "title": "ScadeOne app > ScadeOne app > ScadeOne",
        "section": "ScadeOne app > ScadeOne",
        "text": "class ansys.scadeone.core.ScadeOne(install_dir: str | Path | None = None)\n\nBases: IScadeOne\n\nScade One application API.\n\n!! processed by numpydoc !!\n\n\n\nclose()\n\nClose application, releasing any connection.\n\n!! processed by numpydoc !!\n\n\n\nload_project(storage: ProjectStorage | str | Path) -> Project | None\n\nLoad a Scade One project.\n\nParameters\n\nstorage\n\nUnion[ProjectAsset, Path, python:str]\n\nStorage containing project data.\n\nReturns\n\nProject|None\n\nProject object, or None if file does not exist.\n\n!! processed by numpydoc !!\n\n\n\nsubst_in_path(path: str) -> str\n\nSubstitute $(SCADE_ONE_LIBRARIES_DIR) in path.\n\nif ScadeOne.install_dir is None, no change is made.\n\n!! processed by numpydoc !!\n\n\n\nproperty install_dir: Path | None\n\nInstallation directory as given when creating the ScadeOne instance.\n\n!! processed by numpydoc !!\n\n\n\nproperty projects: List[Project]\n\nReturn the loaded projects.\n\nReturns\n\nList[Project]\n\nLoaded projects.\n\n!! processed by numpydoc !!\n\n\n\nproperty version: str\n\nAPI version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/scadeone",
        "href": "api/scadeone.html#ansys.scadeone.core.ScadeOne.close",
        "title": "ScadeOne app > ScadeOne app > close",
        "section": "ScadeOne app > close",
        "text": "close()\n\nClose application, releasing any connection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/scadeone",
        "href": "api/scadeone.html#ansys.scadeone.core.ScadeOne.load_project",
        "title": "ScadeOne app > ScadeOne app > load_project",
        "section": "ScadeOne app > load_project",
        "text": "load_project(storage: ProjectStorage | str | Path) -> Project | None\n\nLoad a Scade One project.\n\nParameters\n\nstorage\n\nUnion[ProjectAsset, Path, python:str]\n\nStorage containing project data.\n\nReturns\n\nProject|None\n\nProject object, or None if file does not exist.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/scadeone",
        "href": "api/scadeone.html#ansys.scadeone.core.ScadeOne.subst_in_path",
        "title": "ScadeOne app > ScadeOne app > subst_in_path",
        "section": "ScadeOne app > subst_in_path",
        "text": "subst_in_path(path: str) -> str\n\nSubstitute $(SCADE_ONE_LIBRARIES_DIR) in path.\n\nif ScadeOne.install_dir is None, no change is made.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/scadeone",
        "href": "api/scadeone.html#ansys.scadeone.core.ScadeOne.install_dir",
        "title": "ScadeOne app > ScadeOne app > install_dir",
        "section": "ScadeOne app > install_dir",
        "text": "property install_dir: Path | None\n\nInstallation directory as given when creating the ScadeOne instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/scadeone",
        "href": "api/scadeone.html#ansys.scadeone.core.ScadeOne.projects",
        "title": "ScadeOne app > ScadeOne app > projects",
        "section": "ScadeOne app > projects",
        "text": "property projects: List[Project]\n\nReturn the loaded projects.\n\nReturns\n\nList[Project]\n\nLoaded projects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/scadeone",
        "href": "api/scadeone.html#ansys.scadeone.core.ScadeOne.version",
        "title": "ScadeOne app > ScadeOne app > version",
        "section": "ScadeOne app > version",
        "text": "property version: str\n\nAPI version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/fmu_export",
        "href": "api/svc/fmu_export.html#fmu-export",
        "title": "FMU export",
        "section": "FMU export",
        "text": "This section contains the classes related to Scade One FMU Export.\nThe FMU Export supports the FMI 2.0 version for Model-Exchange and Co-Simulation.\nThe principle is to build a FMU package from a given Scade One operator.\nThis operator has to be a root operator of a code generation job,\nand this job must have been executed before FMU export.\nFor more information about the FMI standard, consult FMU/FMI.\nImported Types\nThe FMU export is not possible if imported types are used for any of the inputs or outputs\nof the selected operator, or sensors in the scope of the export.\nSupported Platforms\nThis version only supports gcc compiler on 64 bits Windows platform.\nFMU export\nLimitations"
    },
    {
        "objectID": "api/svc/fmu_export",
        "href": "api/svc/fmu_export.html#fmu-export-command-line",
        "title": "FMU export > FMU export command line",
        "section": "FMU export command line",
        "text": "The FMU Export can also be performed using the pyscadeone command line, by selecting the fmu command.\nThe command performs the complete export, by running FMU_2_Export.generate()\nand FMU_2_Export.build() methods of the FMU_2_Export class.\nAll expected arguments can be passed through this command. Complete list is given by –help.\nFMU export command line\nFMU_2_Export.generate()\nFMU_2_Export.build()\nFMU_2_Export"
    },
    {
        "objectID": "api/svc/fmu_export",
        "href": "api/svc/fmu_export.html#fmu-export-documentation",
        "title": "FMU export > FMU export documentation",
        "section": "FMU export documentation",
        "text": "This section gives the API for the FMU Export.\nNote that the FMU export relies on the ref_generated_code API.\nBases: FMU_Export\nFMU 2.0 export main class.\nproject: Project object.\njob_name: name of the code generation job for the operator to be exported as an FMU.\noper_name: optional operator name (by default it is the root operator of the job,     if provided it has to be a root operator for the job).\nmax_variables: maximum number on FMI variables (flattened sensors, inputs and outputs)      supported by the export (1000 by default).\nGenerate the FMI 2.0 XML and C file according to SCADE generated code.\nkind: FMI kind (‘ME’ for Model Exchange, ‘CS’ for Co-Simulation).\noutdir: directory where the files are generated.\nperiod: execution period in seconds.\nBuild the FMU package from generated files.\nThe .FMU is built in the outdir directory provided\nwhen code was generated (see method generate),\nand its name is the name of the selected operator.\nwith_sources: True to keep the sources in the FMU package\nargs: build arguments, provided as a dictionary:\ncc: compiler name (only gcc supported)\narch: compiler architecture (only win64 supported)\ngcc_path: path on the bin directory where gcc is located\nuser_sources: list of user source files or directories (code, includes)\ncc_opts: list of extra compiler options\nlink_opts: list of extra link (DLL creation) options\nswan_config_begin: data to insert at the beginning of swan_config.h\nswan_config_end: data to insert at the end of swan_config.h\nIf the Scade One installation directory is provided when ScadeOne class is\ninstantiated, and gcc is not already in the PATH, the gcc from the Scade One\ninstallation is used.\nAssociated GeneratedCode object.\nFMU export documentation\nFMU_Export\ngenerate\nswan_config.h\nswan_config.h\nGeneratedCode"
    },
    {
        "objectID": "api/svc/fmu_export",
        "href": "api/svc/fmu_export.html#ansys.scadeone.core.svc.fmu.FMU_2_Export",
        "title": "FMU export > FMU export documentation > FMU_2_Export",
        "section": "FMU export documentation > FMU_2_Export",
        "text": "class ansys.scadeone.core.svc.fmu.FMU_2_Export(prj: Project, job_name: str, oper_name: str = '', max_variables: int = 1000)\n\nBases: FMU_Export\n\nFMU 2.0 export main class.\n\nproject: Project object.\n\njob_name: name of the code generation job for the operator to be exported as an FMU.\n\noper_name: optional operator name (by default it is the root operator of the job,     if provided it has to be a root operator for the job).\n\nmax_variables: maximum number on FMI variables (flattened sensors, inputs and outputs)      supported by the export (1000 by default).\n\n!! processed by numpydoc !!\n\n\n\ngenerate(kind: str, outdir: str | PathLike, period: float = 0.02) -> None\n\nGenerate the FMI 2.0 XML and C file according to SCADE generated code.\n\nkind: FMI kind (‘ME’ for Model Exchange, ‘CS’ for Co-Simulation).\n\noutdir: directory where the files are generated.\n\nperiod: execution period in seconds.\n\n!! processed by numpydoc !!\n\n\n\nbuild(with_sources: bool = False, args: dict | None = None) -> None\n\nBuild the FMU package from generated files.\n\nThe .FMU is built in the outdir directory provided\nwhen code was generated (see method generate),\nand its name is the name of the selected operator.\n\nwith_sources: True to keep the sources in the FMU package\n\nargs: build arguments, provided as a dictionary:\n\ncc: compiler name (only gcc supported)\n\narch: compiler architecture (only win64 supported)\n\ngcc_path: path on the bin directory where gcc is located\n\nuser_sources: list of user source files or directories (code, includes)\n\ncc_opts: list of extra compiler options\n\nlink_opts: list of extra link (DLL creation) options\n\nswan_config_begin: data to insert at the beginning of swan_config.h\n\nswan_config_end: data to insert at the end of swan_config.h\n\nNote for gcc compiler:\n\nIf the Scade One installation directory is provided when ScadeOne class is\ninstantiated, and gcc is not already in the PATH, the gcc from the Scade One\ninstallation is used.\n\n!! processed by numpydoc !!\n\n\n\ncodegen\n\nAssociated GeneratedCode object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/fmu_export",
        "href": "api/svc/fmu_export.html#ansys.scadeone.core.svc.fmu.FMU_2_Export.generate",
        "title": "FMU export > FMU export documentation > generate",
        "section": "FMU export documentation > generate",
        "text": "generate(kind: str, outdir: str | PathLike, period: float = 0.02) -> None\n\nGenerate the FMI 2.0 XML and C file according to SCADE generated code.\n\nkind: FMI kind (‘ME’ for Model Exchange, ‘CS’ for Co-Simulation).\n\noutdir: directory where the files are generated.\n\nperiod: execution period in seconds.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/fmu_export",
        "href": "api/svc/fmu_export.html#ansys.scadeone.core.svc.fmu.FMU_2_Export.build",
        "title": "FMU export > FMU export documentation > build",
        "section": "FMU export documentation > build",
        "text": "build(with_sources: bool = False, args: dict | None = None) -> None\n\nBuild the FMU package from generated files.\n\nThe .FMU is built in the outdir directory provided\nwhen code was generated (see method generate),\nand its name is the name of the selected operator.\n\nwith_sources: True to keep the sources in the FMU package\n\nargs: build arguments, provided as a dictionary:\n\ncc: compiler name (only gcc supported)\n\narch: compiler architecture (only win64 supported)\n\ngcc_path: path on the bin directory where gcc is located\n\nuser_sources: list of user source files or directories (code, includes)\n\ncc_opts: list of extra compiler options\n\nlink_opts: list of extra link (DLL creation) options\n\nswan_config_begin: data to insert at the beginning of swan_config.h\n\nswan_config_end: data to insert at the end of swan_config.h\n\nNote for gcc compiler:\n\nIf the Scade One installation directory is provided when ScadeOne class is\ninstantiated, and gcc is not already in the PATH, the gcc from the Scade One\ninstallation is used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/fmu_export",
        "href": "api/svc/fmu_export.html#ansys.scadeone.core.svc.fmu.FMU_2_Export.codegen",
        "title": "FMU export > FMU export documentation > codegen",
        "section": "FMU export documentation > codegen",
        "text": "codegen\n\nAssociated GeneratedCode object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#generated-code",
        "title": "Generated code",
        "section": "Generated code",
        "text": "This section contains the classes related to Scade One Generated Code.\nIt relies on the JSON mapping file generated by Scade One CG via a code generation job defined in a Scade One project.\nFrom the GeneratedCode object, methods are provided to navigate in the model as it is defined in the mapping file\nin order to get the corresponding generated code artifacts.\nThe next sections describe:\nthe main class for generated code GeneratedCode,\nthe classes related to model elements,\nthe classes related to generated code.\nGenerated code\nGeneratedCode\nGeneratedCode"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#main-class",
        "title": "Generated code > Main class",
        "section": "Main class",
        "text": "This section describes the main class for generated code.\nBases: object\nGenerated code main class.\nCurrent project.\nCode generation name.\nReturns (as a dictionary) the C type name, category (array, struct, enum, union, typedef,\npredefined_type) and sub elements of a given type element.\nThe sub elements depends on the category:\nFor an array, it is a dictionary with base_type giving the type data of the element\n(same format as this method) and size giving the size of the array.\nFor a struct, it is a list of dictionaries, with name giving the field name,\ntype giving the field type data (same format as this method), pointer indicating if field\nis a pointer type and size giving optional list of integer or constant names.\nFor an enum, it is a dictionary with tag_name giving internal tag name for the enum,\nand values giving the list of names corresponding to the enum values.\nFor a union, it is a list of dictionaries, with name giving the variant field name,\ntype giving the variant field type data (same format as this method)\nand enum_value giving optional integer value.\nFor a typedef (imported type), it is the function names used to manipulate\nthe imported type.\nFor a predefined_type, it is None.\nReturns (as a dictionary) the code data corresponding to given code identifier.\ncode_index: position of the element in the code section list\nparent_category: category (declarations, function, struct, enum, union) of the parent\ncode element\nparent_name: name of the parent code element\nparent_id: code identifier of the parent code element\ncategory: category (declarations, function, struct, enum, union) of the code element\ncontent: data content (the element itself)\nindex: position of the element in the declaration\nReturns the code identifier associated to a given model identifier for a given role.\nIf silent is set to True, the functions returns -1 in case no code is found. Otherwise,\nexception is raised.\nReturns the list of code identifiers associated to a given model identifier\n(as a Generator of code, role tuples).\nReturns the list of model elements defined in the mapping file\n(as a Generator of MapElem objects).\nIf filter is set, returns only the elements of the given category\n(elaboration, predefined_type, array, struct, enum, variant, named_type, sensor,\noperator, mono).\nReturns the ModelMonomorphicInstance object corresponding\nto given operator path name.\nReturns the list of ModelMonomorphicInstance objects for the mapping file.\nReturns the ModelOperator object corresponding to given operator path name.\nReturns the list of ModelOperator objects for the mapping file.\nReturns the ModelSensor object corresponding to given sensor path name.\nReturns the list of ModelSensor objects for the mapping file.\nReturns the ‘code’ data section.\nReturns the generated code directory path name.\nReturns True if the code is generated for the job.\nReturns the mapping file as a dictionary.\nReturns the list of root operators names.\nMain class\nobject"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode",
        "title": "Generated code > Main class > GeneratedCode",
        "section": "Main class > GeneratedCode",
        "text": "class ansys.scadeone.core.svc.generated_code.GeneratedCode(project: Project, job_name: str)\n\nBases: object\n\nGenerated code main class.\n\nParameters\n\nproject: Project\n\nCurrent project.\n\njob_name: str\n\nCode generation name.\n\n!! processed by numpydoc !!\n\n\n\ndecompose_code_type(ctype: dict) -> dict\n\nReturns (as a dictionary) the C type name, category (array, struct, enum, union, typedef,\npredefined_type) and sub elements of a given type element.\n\nThe sub elements depends on the category:\n\nFor an array, it is a dictionary with base_type giving the type data of the element\n(same format as this method) and size giving the size of the array.\n\nFor a struct, it is a list of dictionaries, with name giving the field name,\ntype giving the field type data (same format as this method), pointer indicating if field\nis a pointer type and size giving optional list of integer or constant names.\n\nFor an enum, it is a dictionary with tag_name giving internal tag name for the enum,\nand values giving the list of names corresponding to the enum values.\n\nFor a union, it is a list of dictionaries, with name giving the variant field name,\ntype giving the variant field type data (same format as this method)\nand enum_value giving optional integer value.\n\nFor a typedef (imported type), it is the function names used to manipulate\nthe imported type.\n\nFor a predefined_type, it is None.\n\n!! processed by numpydoc !!\n\n\n\nget_code_elem(code_id: int) -> dict\n\nReturns (as a dictionary) the code data corresponding to given code identifier.\n\ncode_index: position of the element in the code section list\n\nparent_category: category (declarations, function, struct, enum, union) of the parent\ncode element\n\nparent_name: name of the parent code element\n\nparent_id: code identifier of the parent code element\n\ncategory: category (declarations, function, struct, enum, union) of the code element\n\ncontent: data content (the element itself)\n\nindex: position of the element in the declaration\n\n!! processed by numpydoc !!\n\n\n\nget_code_id(model_id: int, role: str = '', silent: bool = False) -> int\n\nReturns the code identifier associated to a given model identifier for a given role.\n\nIf silent is set to True, the functions returns -1 in case no code is found. Otherwise,\nexception is raised.\n\n!! processed by numpydoc !!\n\n\n\nget_code_ids(model_id: int) -> Generator[Tuple[int, str], None, None]\n\nReturns the list of code identifiers associated to a given model identifier\n(as a Generator of code, role tuples).\n\n!! processed by numpydoc !!\n\n\n\nget_model_elements(filter: str = '') -> Generator[List[str | dict], None, None]\n\nReturns the list of model elements defined in the mapping file\n(as a Generator of MapElem objects).\n\nIf filter is set, returns only the elements of the given category\n(elaboration, predefined_type, array, struct, enum, variant, named_type, sensor,\noperator, mono).\n\n!! processed by numpydoc !!\n\n\n\nget_model_monomorphic_instance(name: str) -> ModelMonomorphicInstance\n\nReturns the ModelMonomorphicInstance object corresponding\nto given operator path name.\n\n!! processed by numpydoc !!\n\n\n\nget_model_monomorphic_instances() -> List[ModelMonomorphicInstance]\n\nReturns the list of ModelMonomorphicInstance objects for the mapping file.\n\n!! processed by numpydoc !!\n\n\n\nget_model_operator(name: str) -> ModelOperator\n\nReturns the ModelOperator object corresponding to given operator path name.\n\n!! processed by numpydoc !!\n\n\n\nget_model_operators() -> List[ModelOperator]\n\nReturns the list of ModelOperator objects for the mapping file.\n\n!! processed by numpydoc !!\n\n\n\nget_model_sensor(name: str) -> ModelSensor\n\nReturns the ModelSensor object corresponding to given sensor path name.\n\n!! processed by numpydoc !!\n\n\n\nget_model_sensors() -> List[ModelSensor]\n\nReturns the list of ModelSensor objects for the mapping file.\n\n!! processed by numpydoc !!\n\n\n\nproperty code: List[dict]\n\nReturns the ‘code’ data section.\n\n!! processed by numpydoc !!\n\n\n\nproperty generated_code_dir: str\n\nReturns the generated code directory path name.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_code_generated: bool\n\nReturns True if the code is generated for the job.\n\n!! processed by numpydoc !!\n\n\n\nproperty mapping: dict\n\nReturns the mapping file as a dictionary.\n\n!! processed by numpydoc !!\n\n\n\nproperty root_operators: List[str]\n\nReturns the list of root operators names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.decompose_code_type",
        "title": "Generated code > Main class > decompose_code_type",
        "section": "Main class > decompose_code_type",
        "text": "decompose_code_type(ctype: dict) -> dict\n\nReturns (as a dictionary) the C type name, category (array, struct, enum, union, typedef,\npredefined_type) and sub elements of a given type element.\n\nThe sub elements depends on the category:\n\nFor an array, it is a dictionary with base_type giving the type data of the element\n(same format as this method) and size giving the size of the array.\n\nFor a struct, it is a list of dictionaries, with name giving the field name,\ntype giving the field type data (same format as this method), pointer indicating if field\nis a pointer type and size giving optional list of integer or constant names.\n\nFor an enum, it is a dictionary with tag_name giving internal tag name for the enum,\nand values giving the list of names corresponding to the enum values.\n\nFor a union, it is a list of dictionaries, with name giving the variant field name,\ntype giving the variant field type data (same format as this method)\nand enum_value giving optional integer value.\n\nFor a typedef (imported type), it is the function names used to manipulate\nthe imported type.\n\nFor a predefined_type, it is None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.get_code_elem",
        "title": "Generated code > Main class > get_code_elem",
        "section": "Main class > get_code_elem",
        "text": "get_code_elem(code_id: int) -> dict\n\nReturns (as a dictionary) the code data corresponding to given code identifier.\n\ncode_index: position of the element in the code section list\n\nparent_category: category (declarations, function, struct, enum, union) of the parent\ncode element\n\nparent_name: name of the parent code element\n\nparent_id: code identifier of the parent code element\n\ncategory: category (declarations, function, struct, enum, union) of the code element\n\ncontent: data content (the element itself)\n\nindex: position of the element in the declaration\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.get_code_id",
        "title": "Generated code > Main class > get_code_id",
        "section": "Main class > get_code_id",
        "text": "get_code_id(model_id: int, role: str = '', silent: bool = False) -> int\n\nReturns the code identifier associated to a given model identifier for a given role.\n\nIf silent is set to True, the functions returns -1 in case no code is found. Otherwise,\nexception is raised.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.get_code_ids",
        "title": "Generated code > Main class > get_code_ids",
        "section": "Main class > get_code_ids",
        "text": "get_code_ids(model_id: int) -> Generator[Tuple[int, str], None, None]\n\nReturns the list of code identifiers associated to a given model identifier\n(as a Generator of code, role tuples).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.get_model_elements",
        "title": "Generated code > Main class > get_model_elements",
        "section": "Main class > get_model_elements",
        "text": "get_model_elements(filter: str = '') -> Generator[List[str | dict], None, None]\n\nReturns the list of model elements defined in the mapping file\n(as a Generator of MapElem objects).\n\nIf filter is set, returns only the elements of the given category\n(elaboration, predefined_type, array, struct, enum, variant, named_type, sensor,\noperator, mono).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.get_model_monomorphic_instance",
        "title": "Generated code > Main class > get_model_monomorphic_instance",
        "section": "Main class > get_model_monomorphic_instance",
        "text": "get_model_monomorphic_instance(name: str) -> ModelMonomorphicInstance\n\nReturns the ModelMonomorphicInstance object corresponding\nto given operator path name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.get_model_monomorphic_instances",
        "title": "Generated code > Main class > get_model_monomorphic_instances",
        "section": "Main class > get_model_monomorphic_instances",
        "text": "get_model_monomorphic_instances() -> List[ModelMonomorphicInstance]\n\nReturns the list of ModelMonomorphicInstance objects for the mapping file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.get_model_operator",
        "title": "Generated code > Main class > get_model_operator",
        "section": "Main class > get_model_operator",
        "text": "get_model_operator(name: str) -> ModelOperator\n\nReturns the ModelOperator object corresponding to given operator path name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.get_model_operators",
        "title": "Generated code > Main class > get_model_operators",
        "section": "Main class > get_model_operators",
        "text": "get_model_operators() -> List[ModelOperator]\n\nReturns the list of ModelOperator objects for the mapping file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.get_model_sensor",
        "title": "Generated code > Main class > get_model_sensor",
        "section": "Main class > get_model_sensor",
        "text": "get_model_sensor(name: str) -> ModelSensor\n\nReturns the ModelSensor object corresponding to given sensor path name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.get_model_sensors",
        "title": "Generated code > Main class > get_model_sensors",
        "section": "Main class > get_model_sensors",
        "text": "get_model_sensors() -> List[ModelSensor]\n\nReturns the list of ModelSensor objects for the mapping file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.code",
        "title": "Generated code > Main class > code",
        "section": "Main class > code",
        "text": "property code: List[dict]\n\nReturns the ‘code’ data section.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.generated_code_dir",
        "title": "Generated code > Main class > generated_code_dir",
        "section": "Main class > generated_code_dir",
        "text": "property generated_code_dir: str\n\nReturns the generated code directory path name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.is_code_generated",
        "title": "Generated code > Main class > is_code_generated",
        "section": "Main class > is_code_generated",
        "text": "property is_code_generated: bool\n\nReturns True if the code is generated for the job.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.mapping",
        "title": "Generated code > Main class > mapping",
        "section": "Main class > mapping",
        "text": "property mapping: dict\n\nReturns the mapping file as a dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.GeneratedCode.root_operators",
        "title": "Generated code > Main class > root_operators",
        "section": "Main class > root_operators",
        "text": "property root_operators: List[str]\n\nReturns the list of root operators names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#model-classes",
        "title": "Generated code > Model classes",
        "section": "Model classes",
        "text": "Model classes are used to represent the model elements:\nModelOperator represents a model operator\nModelMonomorphicInstance represents a monomorphic instance (after generic type resolution)\nModelVariable represents a model variable (input or output)\nModelVariableMonomorphic represents a monomorphic variable (after generic type resolution)\nModelSensor represents a model sensor\nBases: ModelOperatorBase\nClass for model operator.\ngen_code: GeneratedCode object\noper_elem: mapping file element\nReturns the data associated to the model element, if any.\nReturns the cycle method C function for the operator (as a CFunction object), if any.\nReturns True if the operator is expanded (inlined)\nReturns True if the operator is an imported operator\nReturns the init method C function for the operator (as a CFunction object), if any.\nReturns the list of inputs for the operator (as ModelVariable objects).\nReturns the list of instances for the operator (as raw data, to be completed).\nReturns the list of outputs for the operator (as ModelVariable objects).\nReturns the Scade One operator path\nReturns the reset method C function for the operator (as a CFunction object), if any.\nReturns True if the operator is a root operator\nReturns True if the operator is specialized\nReturns the list of watches for the operator (as raw data, to be completed).\nBases: ModelOperatorBase\nClass for monomorphic instance of polymorphic model operator.\ngen_code: GeneratedCode object\noper_elem: mapping file element\nReturns the data associated to the model element, if any.\nReturns the cycle method C function for the operator (as a CFunction object), if any.\nReturns the init method C function for the operator (as a CFunction object), if any.\nReturns the list of inputs for the operator (as ModelVariableMonomorphic objects).\nReturns the list of instances for the operator (as raw data, to be completed).\nReturns the list of outputs for the operator (as ModelVariableMonomorphic objects).\nReturns the Scade One operator path\nReturns the reset method C function for the operator (as a CFunction object), if any.\nReturns ModelOperator object source of the monomorphic instance.\nReturns the list of watches for the operator (as raw data, to be completed).\nBases: ModelVariableBase\nClass for model variables (inputs or outputs) of operator.\ngen_code: GeneratedCode object\nvar_elem: mapping file element\nparent: ModelOperator object of the parent operator\nReturns variable name taking into account group item(s) to suffix the name when applicable\n(main separator between the operator variable name and group item(s) name can be changed,\ndefault is ‘_’)\nReturns the data associated to the model element, if any.\nReturns the name of the variable as defined in the generated C function.\nReturns the generated C code data corresponding to the variable type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\nReturns the group item(s) associated with variable (only applicable for group type).\nReturns the variable name\nReturns the model operator object owning the variable\nBases: ModelVariableBase\nClass for model variables (inputs or outputs) of monomorphic instance of operator.\ngen_code: GeneratedCode object\nvar_elem: mapping file element\nparent: ModelMonomorphicInstance object of the parent monomorphic instance\nReturns the data associated to the model element, if any.\nReturns the name of the variable as defined in the generated C function.\nReturns the generated C code data corresponding to the variable type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\nReturns the model operator object owning the variable\nReturns ModelVariable object source of the monomorphic instance variable.\nBases: ModelObject\nClass for model sensors.\ngen_code: GeneratedCode object\nvar_elem: mapping file element\nReturns the data associated to the model element, if any.\nReturns the name of the variable as defined in the generated C function.\nReturns the generated C code data corresponding to the sensor type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\nReturns the sensor C type name\nReturns the Scade One sensor path\nModel classes\nModelOperator\nModelMonomorphicInstance\nModelVariable\nModelVariableMonomorphic\nModelSensor\nModelOperatorBase\nModelOperatorBase\nModelVariableBase\nModelVariableBase\nModelObject"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator",
        "title": "Generated code > Model classes > ModelOperator",
        "section": "Model classes > ModelOperator",
        "text": "class ansys.scadeone.core.svc.generated_code.ModelOperator(gen_code: GeneratedCode, oper_elem: dict)\n\nBases: ModelOperatorBase\n\nClass for model operator.\n\ngen_code: GeneratedCode object\n\noper_elem: mapping file element\n\n!! processed by numpydoc !!\n\n\n\nget_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty cycle_method: CFunction | None\n\nReturns the cycle method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty expanded: bool\n\nReturns True if the operator is expanded (inlined)\n\n!! processed by numpydoc !!\n\n\n\nproperty imported: bool\n\nReturns True if the operator is an imported operator\n\n!! processed by numpydoc !!\n\n\n\nproperty init_method: CFunction | None\n\nReturns the init method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty inputs: List[ModelVariable]\n\nReturns the list of inputs for the operator (as ModelVariable objects).\n\n!! processed by numpydoc !!\n\n\n\nproperty instances: List[dict]\n\nReturns the list of instances for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!\n\n\n\nproperty outputs: List[ModelVariable]\n\nReturns the list of outputs for the operator (as ModelVariable objects).\n\n!! processed by numpydoc !!\n\n\n\nproperty path: str\n\nReturns the Scade One operator path\n\n!! processed by numpydoc !!\n\n\n\nproperty reset_method: CFunction | None\n\nReturns the reset method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty root: bool\n\nReturns True if the operator is a root operator\n\n!! processed by numpydoc !!\n\n\n\nproperty specialize: bool\n\nReturns True if the operator is specialized\n\n!! processed by numpydoc !!\n\n\n\nproperty watches: List[dict]\n\nReturns the list of watches for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.get_code_elem",
        "title": "Generated code > Model classes > get_code_elem",
        "section": "Model classes > get_code_elem",
        "text": "get_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.cycle_method",
        "title": "Generated code > Model classes > cycle_method",
        "section": "Model classes > cycle_method",
        "text": "property cycle_method: CFunction | None\n\nReturns the cycle method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.expanded",
        "title": "Generated code > Model classes > expanded",
        "section": "Model classes > expanded",
        "text": "property expanded: bool\n\nReturns True if the operator is expanded (inlined)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.imported",
        "title": "Generated code > Model classes > imported",
        "section": "Model classes > imported",
        "text": "property imported: bool\n\nReturns True if the operator is an imported operator\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.init_method",
        "title": "Generated code > Model classes > init_method",
        "section": "Model classes > init_method",
        "text": "property init_method: CFunction | None\n\nReturns the init method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.inputs",
        "title": "Generated code > Model classes > inputs",
        "section": "Model classes > inputs",
        "text": "property inputs: List[ModelVariable]\n\nReturns the list of inputs for the operator (as ModelVariable objects).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.instances",
        "title": "Generated code > Model classes > instances",
        "section": "Model classes > instances",
        "text": "property instances: List[dict]\n\nReturns the list of instances for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.outputs",
        "title": "Generated code > Model classes > outputs",
        "section": "Model classes > outputs",
        "text": "property outputs: List[ModelVariable]\n\nReturns the list of outputs for the operator (as ModelVariable objects).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.path",
        "title": "Generated code > Model classes > path",
        "section": "Model classes > path",
        "text": "property path: str\n\nReturns the Scade One operator path\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.reset_method",
        "title": "Generated code > Model classes > reset_method",
        "section": "Model classes > reset_method",
        "text": "property reset_method: CFunction | None\n\nReturns the reset method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.root",
        "title": "Generated code > Model classes > root",
        "section": "Model classes > root",
        "text": "property root: bool\n\nReturns True if the operator is a root operator\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.specialize",
        "title": "Generated code > Model classes > specialize",
        "section": "Model classes > specialize",
        "text": "property specialize: bool\n\nReturns True if the operator is specialized\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperator.watches",
        "title": "Generated code > Model classes > watches",
        "section": "Model classes > watches",
        "text": "property watches: List[dict]\n\nReturns the list of watches for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance",
        "title": "Generated code > Model classes > ModelMonomorphicInstance",
        "section": "Model classes > ModelMonomorphicInstance",
        "text": "class ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance(gen_code: GeneratedCode, oper_elem: dict)\n\nBases: ModelOperatorBase\n\nClass for monomorphic instance of polymorphic model operator.\n\ngen_code: GeneratedCode object\n\noper_elem: mapping file element\n\n!! processed by numpydoc !!\n\n\n\nget_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty cycle_method: CFunction | None\n\nReturns the cycle method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty init_method: CFunction | None\n\nReturns the init method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty inputs: List[ModelVariableMonomorphic]\n\nReturns the list of inputs for the operator (as ModelVariableMonomorphic objects).\n\n!! processed by numpydoc !!\n\n\n\nproperty instances: List[dict]\n\nReturns the list of instances for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!\n\n\n\nproperty outputs: List[ModelVariableMonomorphic]\n\nReturns the list of outputs for the operator (as ModelVariableMonomorphic objects).\n\n!! processed by numpydoc !!\n\n\n\nproperty path: str\n\nReturns the Scade One operator path\n\n!! processed by numpydoc !!\n\n\n\nproperty reset_method: CFunction | None\n\nReturns the reset method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty source: ModelOperator\n\nReturns ModelOperator object source of the monomorphic instance.\n\n!! processed by numpydoc !!\n\n\n\nproperty watches: List[dict]\n\nReturns the list of watches for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance.get_code_elem",
        "title": "Generated code > Model classes > get_code_elem",
        "section": "Model classes > get_code_elem",
        "text": "get_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance.cycle_method",
        "title": "Generated code > Model classes > cycle_method",
        "section": "Model classes > cycle_method",
        "text": "property cycle_method: CFunction | None\n\nReturns the cycle method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance.init_method",
        "title": "Generated code > Model classes > init_method",
        "section": "Model classes > init_method",
        "text": "property init_method: CFunction | None\n\nReturns the init method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance.inputs",
        "title": "Generated code > Model classes > inputs",
        "section": "Model classes > inputs",
        "text": "property inputs: List[ModelVariableMonomorphic]\n\nReturns the list of inputs for the operator (as ModelVariableMonomorphic objects).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance.instances",
        "title": "Generated code > Model classes > instances",
        "section": "Model classes > instances",
        "text": "property instances: List[dict]\n\nReturns the list of instances for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance.outputs",
        "title": "Generated code > Model classes > outputs",
        "section": "Model classes > outputs",
        "text": "property outputs: List[ModelVariableMonomorphic]\n\nReturns the list of outputs for the operator (as ModelVariableMonomorphic objects).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance.path",
        "title": "Generated code > Model classes > path",
        "section": "Model classes > path",
        "text": "property path: str\n\nReturns the Scade One operator path\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance.reset_method",
        "title": "Generated code > Model classes > reset_method",
        "section": "Model classes > reset_method",
        "text": "property reset_method: CFunction | None\n\nReturns the reset method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance.source",
        "title": "Generated code > Model classes > source",
        "section": "Model classes > source",
        "text": "property source: ModelOperator\n\nReturns ModelOperator object source of the monomorphic instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelMonomorphicInstance.watches",
        "title": "Generated code > Model classes > watches",
        "section": "Model classes > watches",
        "text": "property watches: List[dict]\n\nReturns the list of watches for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariable",
        "title": "Generated code > Model classes > ModelVariable",
        "section": "Model classes > ModelVariable",
        "text": "class ansys.scadeone.core.svc.generated_code.ModelVariable(gen_code: GeneratedCode, var_elem: dict, parent: ModelOperator)\n\nBases: ModelVariableBase\n\nClass for model variables (inputs or outputs) of operator.\n\ngen_code: GeneratedCode object\n\nvar_elem: mapping file element\n\nparent: ModelOperator object of the parent operator\n\n!! processed by numpydoc !!\n\n\n\nfull_name(separator: str = '_') -> str\n\nReturns variable name taking into account group item(s) to suffix the name when applicable\n(main separator between the operator variable name and group item(s) name can be changed,\ndefault is ‘_’)\n\n!! processed by numpydoc !!\n\n\n\nget_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty code_name: str\n\nReturns the name of the variable as defined in the generated C function.\n\n!! processed by numpydoc !!\n\n\n\nproperty code_type: dict\n\nReturns the generated C code data corresponding to the variable type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\n\n!! processed by numpydoc !!\n\n\n\nproperty group_items: List[str | int]\n\nReturns the group item(s) associated with variable (only applicable for group type).\n\n!! processed by numpydoc !!\n\n\n\nproperty name: str\n\nReturns the variable name\n\n!! processed by numpydoc !!\n\n\n\nproperty parent: ModelOperator\n\nReturns the model operator object owning the variable\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariable.full_name",
        "title": "Generated code > Model classes > full_name",
        "section": "Model classes > full_name",
        "text": "full_name(separator: str = '_') -> str\n\nReturns variable name taking into account group item(s) to suffix the name when applicable\n(main separator between the operator variable name and group item(s) name can be changed,\ndefault is ‘_’)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariable.get_code_elem",
        "title": "Generated code > Model classes > get_code_elem",
        "section": "Model classes > get_code_elem",
        "text": "get_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariable.code_name",
        "title": "Generated code > Model classes > code_name",
        "section": "Model classes > code_name",
        "text": "property code_name: str\n\nReturns the name of the variable as defined in the generated C function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariable.code_type",
        "title": "Generated code > Model classes > code_type",
        "section": "Model classes > code_type",
        "text": "property code_type: dict\n\nReturns the generated C code data corresponding to the variable type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariable.group_items",
        "title": "Generated code > Model classes > group_items",
        "section": "Model classes > group_items",
        "text": "property group_items: List[str | int]\n\nReturns the group item(s) associated with variable (only applicable for group type).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariable.name",
        "title": "Generated code > Model classes > name",
        "section": "Model classes > name",
        "text": "property name: str\n\nReturns the variable name\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariable.parent",
        "title": "Generated code > Model classes > parent",
        "section": "Model classes > parent",
        "text": "property parent: ModelOperator\n\nReturns the model operator object owning the variable\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableMonomorphic",
        "title": "Generated code > Model classes > ModelVariableMonomorphic",
        "section": "Model classes > ModelVariableMonomorphic",
        "text": "class ansys.scadeone.core.svc.generated_code.ModelVariableMonomorphic(gen_code: GeneratedCode, var_elem: dict, parent: ModelMonomorphicInstance)\n\nBases: ModelVariableBase\n\nClass for model variables (inputs or outputs) of monomorphic instance of operator.\n\ngen_code: GeneratedCode object\n\nvar_elem: mapping file element\n\nparent: ModelMonomorphicInstance object of the parent monomorphic instance\n\n!! processed by numpydoc !!\n\n\n\nget_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty code_name: str\n\nReturns the name of the variable as defined in the generated C function.\n\n!! processed by numpydoc !!\n\n\n\nproperty code_type: dict\n\nReturns the generated C code data corresponding to the variable type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\n\n!! processed by numpydoc !!\n\n\n\nproperty parent: ModelMonomorphicInstance\n\nReturns the model operator object owning the variable\n\n!! processed by numpydoc !!\n\n\n\nproperty source: ModelVariable\n\nReturns ModelVariable object source of the monomorphic instance variable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableMonomorphic.get_code_elem",
        "title": "Generated code > Model classes > get_code_elem",
        "section": "Model classes > get_code_elem",
        "text": "get_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableMonomorphic.code_name",
        "title": "Generated code > Model classes > code_name",
        "section": "Model classes > code_name",
        "text": "property code_name: str\n\nReturns the name of the variable as defined in the generated C function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableMonomorphic.code_type",
        "title": "Generated code > Model classes > code_type",
        "section": "Model classes > code_type",
        "text": "property code_type: dict\n\nReturns the generated C code data corresponding to the variable type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableMonomorphic.parent",
        "title": "Generated code > Model classes > parent",
        "section": "Model classes > parent",
        "text": "property parent: ModelMonomorphicInstance\n\nReturns the model operator object owning the variable\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableMonomorphic.source",
        "title": "Generated code > Model classes > source",
        "section": "Model classes > source",
        "text": "property source: ModelVariable\n\nReturns ModelVariable object source of the monomorphic instance variable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelSensor",
        "title": "Generated code > Model classes > ModelSensor",
        "section": "Model classes > ModelSensor",
        "text": "class ansys.scadeone.core.svc.generated_code.ModelSensor(gen_code: GeneratedCode, sensor_elem: dict)\n\nBases: ModelObject\n\nClass for model sensors.\n\ngen_code: GeneratedCode object\n\nvar_elem: mapping file element\n\n!! processed by numpydoc !!\n\n\n\nget_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty code_name: str\n\nReturns the name of the variable as defined in the generated C function.\n\n!! processed by numpydoc !!\n\n\n\nproperty code_type: dict\n\nReturns the generated C code data corresponding to the sensor type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\n\n!! processed by numpydoc !!\n\n\n\nproperty code_type_name: str\n\nReturns the sensor C type name\n\n!! processed by numpydoc !!\n\n\n\nproperty path: str\n\nReturns the Scade One sensor path\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelSensor.get_code_elem",
        "title": "Generated code > Model classes > get_code_elem",
        "section": "Model classes > get_code_elem",
        "text": "get_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelSensor.code_name",
        "title": "Generated code > Model classes > code_name",
        "section": "Model classes > code_name",
        "text": "property code_name: str\n\nReturns the name of the variable as defined in the generated C function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelSensor.code_type",
        "title": "Generated code > Model classes > code_type",
        "section": "Model classes > code_type",
        "text": "property code_type: dict\n\nReturns the generated C code data corresponding to the sensor type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelSensor.code_type_name",
        "title": "Generated code > Model classes > code_type_name",
        "section": "Model classes > code_type_name",
        "text": "property code_type_name: str\n\nReturns the sensor C type name\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelSensor.path",
        "title": "Generated code > Model classes > path",
        "section": "Model classes > path",
        "text": "property path: str\n\nReturns the Scade One sensor path\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#code-classes",
        "title": "Generated code > Code classes",
        "section": "Code classes",
        "text": "Generated code classes are used to represent the generated code elements:\nCFunction represents a C function\nCParameter represents a C parameter\nBases: CDeclaration\nClass for a generated C function.\ngen_code: GeneratedCode object\nfunction_elem: mapping file element\ncode_container_index: position in the list of code container elements\nReturns the name of the enclosed implementation C file.\nReturns the name of the enclosed interface C header file.\nReturns the function name\nReturns the function parameters as a list of CParameter objects.\nReturns the function return type as raw mapping file dictionary data, if any.\nBases: MappingObject\nClass for a parameter of a generated C function.\ngen_code: GeneratedCode object\nparam_elem: mapping file element\nIndicates if the parameter is a const type\nReturns the parameter name\nReturns the type id of the parameter\nIndicates if the parameter is a pointer\nReturns the parameter type signature (taking into account pointer and const).\nReturns the parameter type name\nCode classes\nCFunction\nCParameter\nCDeclaration\nMappingObject"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CFunction",
        "title": "Generated code > Code classes > CFunction",
        "section": "Code classes > CFunction",
        "text": "class ansys.scadeone.core.svc.generated_code.CFunction(gen_code: GeneratedCode, function_elem: dict, code_container_index: int)\n\nBases: CDeclaration\n\nClass for a generated C function.\n\ngen_code: GeneratedCode object\n\nfunction_elem: mapping file element\n\ncode_container_index: position in the list of code container elements\n\n!! processed by numpydoc !!\n\n\n\nget_implementation_file() -> str\n\nReturns the name of the enclosed implementation C file.\n\n!! processed by numpydoc !!\n\n\n\nget_interface_file() -> str\n\nReturns the name of the enclosed interface C header file.\n\n!! processed by numpydoc !!\n\n\n\nproperty name: str\n\nReturns the function name\n\n!! processed by numpydoc !!\n\n\n\nproperty parameters: List[CParameter]\n\nReturns the function parameters as a list of CParameter objects.\n\n!! processed by numpydoc !!\n\n\n\nproperty return_type: dict | None\n\nReturns the function return type as raw mapping file dictionary data, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CFunction.get_implementation_file",
        "title": "Generated code > Code classes > get_implementation_file",
        "section": "Code classes > get_implementation_file",
        "text": "get_implementation_file() -> str\n\nReturns the name of the enclosed implementation C file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CFunction.get_interface_file",
        "title": "Generated code > Code classes > get_interface_file",
        "section": "Code classes > get_interface_file",
        "text": "get_interface_file() -> str\n\nReturns the name of the enclosed interface C header file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CFunction.name",
        "title": "Generated code > Code classes > name",
        "section": "Code classes > name",
        "text": "property name: str\n\nReturns the function name\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CFunction.parameters",
        "title": "Generated code > Code classes > parameters",
        "section": "Code classes > parameters",
        "text": "property parameters: List[CParameter]\n\nReturns the function parameters as a list of CParameter objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CFunction.return_type",
        "title": "Generated code > Code classes > return_type",
        "section": "Code classes > return_type",
        "text": "property return_type: dict | None\n\nReturns the function return type as raw mapping file dictionary data, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CParameter",
        "title": "Generated code > Code classes > CParameter",
        "section": "Code classes > CParameter",
        "text": "class ansys.scadeone.core.svc.generated_code.CParameter(gen_code: GeneratedCode, param_elem: dict)\n\nBases: MappingObject\n\nClass for a parameter of a generated C function.\n\ngen_code: GeneratedCode object\n\nparam_elem: mapping file element\n\n!! processed by numpydoc !!\n\n\n\nproperty const: bool\n\nIndicates if the parameter is a const type\n\n!! processed by numpydoc !!\n\n\n\nproperty name: str\n\nReturns the parameter name\n\n!! processed by numpydoc !!\n\n\n\nproperty param_type_id: int\n\nReturns the type id of the parameter\n\n!! processed by numpydoc !!\n\n\n\nproperty pointer: bool\n\nIndicates if the parameter is a pointer\n\n!! processed by numpydoc !!\n\n\n\nproperty signature: str\n\nReturns the parameter type signature (taking into account pointer and const).\n\n!! processed by numpydoc !!\n\n\n\nproperty type_name: str\n\nReturns the parameter type name\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CParameter.const",
        "title": "Generated code > Code classes > const",
        "section": "Code classes > const",
        "text": "property const: bool\n\nIndicates if the parameter is a const type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CParameter.name",
        "title": "Generated code > Code classes > name",
        "section": "Code classes > name",
        "text": "property name: str\n\nReturns the parameter name\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CParameter.param_type_id",
        "title": "Generated code > Code classes > param_type_id",
        "section": "Code classes > param_type_id",
        "text": "property param_type_id: int\n\nReturns the type id of the parameter\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CParameter.pointer",
        "title": "Generated code > Code classes > pointer",
        "section": "Code classes > pointer",
        "text": "property pointer: bool\n\nIndicates if the parameter is a pointer\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CParameter.signature",
        "title": "Generated code > Code classes > signature",
        "section": "Code classes > signature",
        "text": "property signature: str\n\nReturns the parameter type signature (taking into account pointer and const).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CParameter.type_name",
        "title": "Generated code > Code classes > type_name",
        "section": "Code classes > type_name",
        "text": "property type_name: str\n\nReturns the parameter type name\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#base-classes",
        "title": "Generated code > Base classes",
        "section": "Base classes",
        "text": "Bases: ModelObject\nBase class for model operator or monomorphic instance of an operator.\ngen_code: GeneratedCode object\noper_elem: mapping file element\nReturns the data associated to the model element, if any.\nReturns the cycle method C function for the operator (as a CFunction object), if any.\nReturns the init method C function for the operator (as a CFunction object), if any.\nReturns the list of instances for the operator (as raw data, to be completed).\nReturns the Scade One operator path\nReturns the reset method C function for the operator (as a CFunction object), if any.\nReturns the list of watches for the operator (as raw data, to be completed).\nBases: ModelObject\nBase class for model variables (operators inputs or outputs).\ngen_code: GeneratedCode object\nvar_elem: mapping file element\nReturns the data associated to the model element, if any.\nReturns the name of the variable as defined in the generated C function.\nReturns the generated C code data corresponding to the variable type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\nReturns the model operator object owning the variable\nBases: MappingObject\nBase Class for mapping file model elements.\ngen_code: GeneratedCode object\nmodel_elem: mapping file element\nReturns the data associated to the model element, if any.\nBases: MappingObject\nBase class for C declaration\n(function, global, macro, predefined_type, struct, array, enum, union, typedef, imported_type).\ngen_code: GeneratedCode object\ndecl_elem: mapping file element\ncode_container_index: position in the list of code container elements\nReturns the name of the enclosed implementation C file.\nReturns the name of the enclosed interface C header file.\nBases: ABC\nBase class for all mapping file elements.\ngen_code: GeneratedCode object\nmapping_elem: mapping file element\nBase classes\nModelObject\nModelObject\nMappingObject\nMappingObject\nABC"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperatorBase",
        "title": "Generated code > Base classes > ModelOperatorBase",
        "section": "Base classes > ModelOperatorBase",
        "text": "class ansys.scadeone.core.svc.generated_code.ModelOperatorBase(gen_code: GeneratedCode, oper_elem: dict)\n\nBases: ModelObject\n\nBase class for model operator or monomorphic instance of an operator.\n\ngen_code: GeneratedCode object\n\noper_elem: mapping file element\n\n!! processed by numpydoc !!\n\n\n\nget_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty cycle_method: CFunction | None\n\nReturns the cycle method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty init_method: CFunction | None\n\nReturns the init method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty instances: List[dict]\n\nReturns the list of instances for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!\n\n\n\nproperty path: str\n\nReturns the Scade One operator path\n\n!! processed by numpydoc !!\n\n\n\nproperty reset_method: CFunction | None\n\nReturns the reset method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty watches: List[dict]\n\nReturns the list of watches for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperatorBase.get_code_elem",
        "title": "Generated code > Base classes > get_code_elem",
        "section": "Base classes > get_code_elem",
        "text": "get_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperatorBase.cycle_method",
        "title": "Generated code > Base classes > cycle_method",
        "section": "Base classes > cycle_method",
        "text": "property cycle_method: CFunction | None\n\nReturns the cycle method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperatorBase.init_method",
        "title": "Generated code > Base classes > init_method",
        "section": "Base classes > init_method",
        "text": "property init_method: CFunction | None\n\nReturns the init method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperatorBase.instances",
        "title": "Generated code > Base classes > instances",
        "section": "Base classes > instances",
        "text": "property instances: List[dict]\n\nReturns the list of instances for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperatorBase.path",
        "title": "Generated code > Base classes > path",
        "section": "Base classes > path",
        "text": "property path: str\n\nReturns the Scade One operator path\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperatorBase.reset_method",
        "title": "Generated code > Base classes > reset_method",
        "section": "Base classes > reset_method",
        "text": "property reset_method: CFunction | None\n\nReturns the reset method C function for the operator (as a CFunction object), if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelOperatorBase.watches",
        "title": "Generated code > Base classes > watches",
        "section": "Base classes > watches",
        "text": "property watches: List[dict]\n\nReturns the list of watches for the operator (as raw data, to be completed).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableBase",
        "title": "Generated code > Base classes > ModelVariableBase",
        "section": "Base classes > ModelVariableBase",
        "text": "class ansys.scadeone.core.svc.generated_code.ModelVariableBase(gen_code: GeneratedCode, var_elem: dict)\n\nBases: ModelObject\n\nBase class for model variables (operators inputs or outputs).\n\ngen_code: GeneratedCode object\n\nvar_elem: mapping file element\n\n!! processed by numpydoc !!\n\n\n\nget_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty code_name: str\n\nReturns the name of the variable as defined in the generated C function.\n\n!! processed by numpydoc !!\n\n\n\nproperty code_type: dict\n\nReturns the generated C code data corresponding to the variable type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\n\n!! processed by numpydoc !!\n\n\n\nabstract property parent: ModelOperatorBase\n\nReturns the model operator object owning the variable\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableBase.get_code_elem",
        "title": "Generated code > Base classes > get_code_elem",
        "section": "Base classes > get_code_elem",
        "text": "get_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableBase.code_name",
        "title": "Generated code > Base classes > code_name",
        "section": "Base classes > code_name",
        "text": "property code_name: str\n\nReturns the name of the variable as defined in the generated C function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableBase.code_type",
        "title": "Generated code > Base classes > code_type",
        "section": "Base classes > code_type",
        "text": "property code_type: dict\n\nReturns the generated C code data corresponding to the variable type.\n(‘name’: C type name, ‘category’: type category and ‘elements’: sub elements of the type)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelVariableBase.parent",
        "title": "Generated code > Base classes > parent",
        "section": "Base classes > parent",
        "text": "abstract property parent: ModelOperatorBase\n\nReturns the model operator object owning the variable\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelObject",
        "title": "Generated code > Base classes > ModelObject",
        "section": "Base classes > ModelObject",
        "text": "class ansys.scadeone.core.svc.generated_code.ModelObject(gen_code: GeneratedCode, model_elem: dict)\n\nBases: MappingObject\n\nBase Class for mapping file model elements.\n\ngen_code: GeneratedCode object\n\nmodel_elem: mapping file element\n\n!! processed by numpydoc !!\n\n\n\nget_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.ModelObject.get_code_elem",
        "title": "Generated code > Base classes > get_code_elem",
        "section": "Base classes > get_code_elem",
        "text": "get_code_elem(role: str = '', silent: bool = False) -> dict | None\n\nReturns the data associated to the model element, if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CDeclaration",
        "title": "Generated code > Base classes > CDeclaration",
        "section": "Base classes > CDeclaration",
        "text": "class ansys.scadeone.core.svc.generated_code.CDeclaration(gen_code: GeneratedCode, decl_elem: dict, code_container_index: int)\n\nBases: MappingObject\n\nBase class for C declaration\n(function, global, macro, predefined_type, struct, array, enum, union, typedef, imported_type).\n\ngen_code: GeneratedCode object\n\ndecl_elem: mapping file element\n\ncode_container_index: position in the list of code container elements\n\n!! processed by numpydoc !!\n\n\n\nget_implementation_file() -> str\n\nReturns the name of the enclosed implementation C file.\n\n!! processed by numpydoc !!\n\n\n\nget_interface_file() -> str\n\nReturns the name of the enclosed interface C header file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CDeclaration.get_implementation_file",
        "title": "Generated code > Base classes > get_implementation_file",
        "section": "Base classes > get_implementation_file",
        "text": "get_implementation_file() -> str\n\nReturns the name of the enclosed implementation C file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.CDeclaration.get_interface_file",
        "title": "Generated code > Base classes > get_interface_file",
        "section": "Base classes > get_interface_file",
        "text": "get_interface_file() -> str\n\nReturns the name of the enclosed interface C header file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/generated_code",
        "href": "api/svc/generated_code.html#ansys.scadeone.core.svc.generated_code.MappingObject",
        "title": "Generated code > Base classes > MappingObject",
        "section": "Base classes > MappingObject",
        "text": "class ansys.scadeone.core.svc.generated_code.MappingObject(gen_code: GeneratedCode, mapping_elem: dict)\n\nBases: ABC\n\nBase class for all mapping file elements.\n\ngen_code: GeneratedCode object\n\nmapping_elem: mapping file element\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/variant",
        "href": "api/language/expressions/variant.html#variant",
        "title": "Variant",
        "section": "Variant",
        "text": "Bases: Expression\nVariant expression: path_id { group }.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nGroup value.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nVariant tag.\nVariant\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/variant",
        "href": "api/language/expressions/variant.html#ansys.scadeone.core.swan.VariantValue",
        "title": "Variant > Variant > VariantValue",
        "section": "Variant > VariantValue",
        "text": "class ansys.scadeone.core.swan.VariantValue(tag: PathIdentifier, group: Group)\n\nBases: Expression\n\nVariant expression: path_id { group }.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty group: Group\n\nGroup value.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty tag: PathIdentifier\n\nVariant tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/variant",
        "href": "api/language/expressions/variant.html#ansys.scadeone.core.swan.VariantValue.get_full_path",
        "title": "Variant > Variant > get_full_path",
        "section": "Variant > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/variant",
        "href": "api/language/expressions/variant.html#ansys.scadeone.core.swan.VariantValue.set_owner",
        "title": "Variant > Variant > set_owner",
        "section": "Variant > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/variant",
        "href": "api/language/expressions/variant.html#ansys.scadeone.core.swan.VariantValue.group",
        "title": "Variant > Variant > group",
        "section": "Variant > group",
        "text": "property group: Group\n\nGroup value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/variant",
        "href": "api/language/expressions/variant.html#ansys.scadeone.core.swan.VariantValue.is_protected",
        "title": "Variant > Variant > is_protected",
        "section": "Variant > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/variant",
        "href": "api/language/expressions/variant.html#ansys.scadeone.core.swan.VariantValue.model",
        "title": "Variant > Variant > model",
        "section": "Variant > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/variant",
        "href": "api/language/expressions/variant.html#ansys.scadeone.core.swan.VariantValue.module",
        "title": "Variant > Variant > module",
        "section": "Variant > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/variant",
        "href": "api/language/expressions/variant.html#ansys.scadeone.core.swan.VariantValue.owner",
        "title": "Variant > Variant > owner",
        "section": "Variant > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/variant",
        "href": "api/language/expressions/variant.html#ansys.scadeone.core.swan.VariantValue.tag",
        "title": "Variant > Variant > tag",
        "section": "Variant > tag",
        "text": "property tag: PathIdentifier\n\nVariant tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#test-results",
        "title": "Test results",
        "section": "Test results",
        "text": "The PyScadeOne services allow to load the test results file in Python objects. TestResultsParser allows\nto use the load() method to load the test results file and return a TestResults object.\nTest results\nTestResultsParser\nload()\nTestResults"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#test-results-parsing",
        "title": "Test results > Test results parsing",
        "section": "Test results parsing",
        "text": "This section describes the main class for parsing the test results files.\nBases: BaseTestResults\nParse the Test results file.\nRead a test results file (.JSON), create and fill a TestResults object.\nTest results file path.\nTest results object.\nError when file is not found\nParse error\nTest results parsing\nBaseTestResults\nTestResults\nScadeOneException"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestResultsParser",
        "title": "Test results > Test results parsing > TestResultsParser",
        "section": "Test results parsing > TestResultsParser",
        "text": "class ansys.scadeone.core.svc.test.test_results.TestResultsParser\n\nBases: BaseTestResults\n\nParse the Test results file.\n\n!! processed by numpydoc !!\n\n\n\nstatic load(file: str | Path) -> TestResults | None\n\nRead a test results file (.JSON), create and fill a TestResults object.\n\nParameters\n\nfile\n\nTest results file path.\n\nReturns\n\nTestResults\n\nTest results object.\n\nRaises\n\nScadeOneException\n\nError when file is not found\n\nParse error\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestResultsParser.load",
        "title": "Test results > Test results parsing > load",
        "section": "Test results parsing > load",
        "text": "static load(file: str | Path) -> TestResults | None\n\nRead a test results file (.JSON), create and fill a TestResults object.\n\nParameters\n\nfile\n\nTest results file path.\n\nReturns\n\nTestResults\n\nTest results object.\n\nRaises\n\nScadeOneException\n\nError when file is not found\n\nParse error\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#handling-test-results",
        "title": "Test results > Handling test results",
        "section": "Handling test results",
        "text": "TestResults represents the test results.\nBases: BaseTestResults\nTest results object.\nCheck the version of the test results.\nIf the version is not supported\nReturns the list of test cases.\nReturns the test results version.\nHandling test results\nTestResults\nBaseTestResults\nScadeOneException"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestResults",
        "title": "Test results > Handling test results > TestResults",
        "section": "Handling test results > TestResults",
        "text": "class ansys.scadeone.core.svc.test.test_results.TestResults\n\nBases: BaseTestResults\n\nTest results object.\n\n!! processed by numpydoc !!\n\n\n\ncheck_version()\n\nCheck the version of the test results.\n\nRaises\n\nScadeOneException\n\nIf the version is not supported\n\n!! processed by numpydoc !!\n\n\n\nproperty test_cases: List[TestCase]\n\nReturns the list of test cases.\n\n!! processed by numpydoc !!\n\n\n\nproperty version: str\n\nReturns the test results version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestResults.check_version",
        "title": "Test results > Handling test results > check_version",
        "section": "Handling test results > check_version",
        "text": "check_version()\n\nCheck the version of the test results.\n\nRaises\n\nScadeOneException\n\nIf the version is not supported\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestResults.test_cases",
        "title": "Test results > Handling test results > test_cases",
        "section": "Handling test results > test_cases",
        "text": "property test_cases: List[TestCase]\n\nReturns the list of test cases.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestResults.version",
        "title": "Test results > Handling test results > version",
        "section": "Handling test results > version",
        "text": "property version: str\n\nReturns the test results version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#handling-test-cases",
        "title": "Test results > Handling test cases",
        "section": "Handling test cases",
        "text": "TestCase represents the test cases of the test results.\nBases: BaseTestResults\nTest case object.\nReturns the test case cycles count.\nReturns the test case end time.\nReturns the test harness namespace.\nReturns the test case start time.\nReturns the test case status.\nReturns the list of test items.\nHandling test cases\nTestCase\nBaseTestResults"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestCase",
        "title": "Test results > Handling test cases > TestCase",
        "section": "Handling test cases > TestCase",
        "text": "class ansys.scadeone.core.svc.test.test_results.TestCase\n\nBases: BaseTestResults\n\nTest case object.\n\n!! processed by numpydoc !!\n\n\n\nproperty cycles_count: int\n\nReturns the test case cycles count.\n\n!! processed by numpydoc !!\n\n\n\nproperty end: str\n\nReturns the test case end time.\n\n!! processed by numpydoc !!\n\n\n\nproperty harness: str\n\nReturns the test harness namespace.\n\n!! processed by numpydoc !!\n\n\n\nproperty start: str\n\nReturns the test case start time.\n\n!! processed by numpydoc !!\n\n\n\nproperty status: TestStatus\n\nReturns the test case status.\n\n!! processed by numpydoc !!\n\n\n\nproperty test_items: List[TestItem]\n\nReturns the list of test items.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestCase.cycles_count",
        "title": "Test results > Handling test cases > cycles_count",
        "section": "Handling test cases > cycles_count",
        "text": "property cycles_count: int\n\nReturns the test case cycles count.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestCase.end",
        "title": "Test results > Handling test cases > end",
        "section": "Handling test cases > end",
        "text": "property end: str\n\nReturns the test case end time.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestCase.harness",
        "title": "Test results > Handling test cases > harness",
        "section": "Handling test cases > harness",
        "text": "property harness: str\n\nReturns the test harness namespace.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestCase.start",
        "title": "Test results > Handling test cases > start",
        "section": "Handling test cases > start",
        "text": "property start: str\n\nReturns the test case start time.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestCase.status",
        "title": "Test results > Handling test cases > status",
        "section": "Handling test cases > status",
        "text": "property status: TestStatus\n\nReturns the test case status.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestCase.test_items",
        "title": "Test results > Handling test cases > test_items",
        "section": "Handling test cases > test_items",
        "text": "property test_items: List[TestItem]\n\nReturns the list of test items.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#handling-test-items",
        "title": "Test results > Handling test items",
        "section": "Handling test items",
        "text": "TestItem represents the test items of the test results.\nBases: BaseTestResults\nTest item object.\nReturns the list of failures.\nReturns the test item kind.\nReturns the test item model path.\nReturns the test item passed count.\nHandling test items\nTestItem\nBaseTestResults"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestItem",
        "title": "Test results > Handling test items > TestItem",
        "section": "Handling test items > TestItem",
        "text": "class ansys.scadeone.core.svc.test.test_results.TestItem\n\nBases: BaseTestResults\n\nTest item object.\n\n!! processed by numpydoc !!\n\n\n\nproperty failures: List[Failure]\n\nReturns the list of failures.\n\n!! processed by numpydoc !!\n\n\n\nproperty kind: TestItemKind\n\nReturns the test item kind.\n\n!! processed by numpydoc !!\n\n\n\nproperty model_path: str\n\nReturns the test item model path.\n\n!! processed by numpydoc !!\n\n\n\nproperty passed_count: int\n\nReturns the test item passed count.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestItem.failures",
        "title": "Test results > Handling test items > failures",
        "section": "Handling test items > failures",
        "text": "property failures: List[Failure]\n\nReturns the list of failures.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestItem.kind",
        "title": "Test results > Handling test items > kind",
        "section": "Handling test items > kind",
        "text": "property kind: TestItemKind\n\nReturns the test item kind.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestItem.model_path",
        "title": "Test results > Handling test items > model_path",
        "section": "Handling test items > model_path",
        "text": "property model_path: str\n\nReturns the test item model path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestItem.passed_count",
        "title": "Test results > Handling test items > passed_count",
        "section": "Handling test items > passed_count",
        "text": "property passed_count: int\n\nReturns the test item passed count.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#failure-class",
        "title": "Test results > Failure class",
        "section": "Failure class",
        "text": "Failure represents the failures of the test items.\nBases: object\nFailure object.\nReturns the failure actual value.\nReturns the failure cycle.\nReturns the failure expected value.\nReturns the absolute tolerance applied in float32 comparisons.\nReturns the relative tolerance applied in float32 comparisons.\nReturns the absolute tolerance applied in float64 comparisons.\nReturns the relative tolerance applied in float64 comparisons.\nReturns the list of parts error paths.\nFailure class\nFailure\nobject"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.Failure",
        "title": "Test results > Failure class > Failure",
        "section": "Failure class > Failure",
        "text": "class ansys.scadeone.core.svc.test.test_results.Failure\n\nBases: object\n\nFailure object.\n\n!! processed by numpydoc !!\n\n\n\nproperty actual: str\n\nReturns the failure actual value.\n\n!! processed by numpydoc !!\n\n\n\nproperty cycle: int\n\nReturns the failure cycle.\n\n!! processed by numpydoc !!\n\n\n\nproperty expected: str\n\nReturns the failure expected value.\n\n!! processed by numpydoc !!\n\n\n\nproperty float32_atol: int | float\n\nReturns the absolute tolerance applied in float32 comparisons.\n\n!! processed by numpydoc !!\n\n\n\nproperty float32_rtol: int | float\n\nReturns the relative tolerance applied in float32 comparisons.\n\n!! processed by numpydoc !!\n\n\n\nproperty float64_atol: int | float\n\nReturns the absolute tolerance applied in float64 comparisons.\n\n!! processed by numpydoc !!\n\n\n\nproperty float64_rtol: int | float\n\nReturns the relative tolerance applied in float64 comparisons.\n\n!! processed by numpydoc !!\n\n\n\nproperty parts_error_paths: List[str]\n\nReturns the list of parts error paths.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.Failure.actual",
        "title": "Test results > Failure class > actual",
        "section": "Failure class > actual",
        "text": "property actual: str\n\nReturns the failure actual value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.Failure.cycle",
        "title": "Test results > Failure class > cycle",
        "section": "Failure class > cycle",
        "text": "property cycle: int\n\nReturns the failure cycle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.Failure.expected",
        "title": "Test results > Failure class > expected",
        "section": "Failure class > expected",
        "text": "property expected: str\n\nReturns the failure expected value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.Failure.float32_atol",
        "title": "Test results > Failure class > float32_atol",
        "section": "Failure class > float32_atol",
        "text": "property float32_atol: int | float\n\nReturns the absolute tolerance applied in float32 comparisons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.Failure.float32_rtol",
        "title": "Test results > Failure class > float32_rtol",
        "section": "Failure class > float32_rtol",
        "text": "property float32_rtol: int | float\n\nReturns the relative tolerance applied in float32 comparisons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.Failure.float64_atol",
        "title": "Test results > Failure class > float64_atol",
        "section": "Failure class > float64_atol",
        "text": "property float64_atol: int | float\n\nReturns the absolute tolerance applied in float64 comparisons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.Failure.float64_rtol",
        "title": "Test results > Failure class > float64_rtol",
        "section": "Failure class > float64_rtol",
        "text": "property float64_rtol: int | float\n\nReturns the relative tolerance applied in float64 comparisons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.Failure.parts_error_paths",
        "title": "Test results > Failure class > parts_error_paths",
        "section": "Failure class > parts_error_paths",
        "text": "property parts_error_paths: List[str]\n\nReturns the list of parts error paths.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#test-status-enum",
        "title": "Test results > Test status enum",
        "section": "Test status enum",
        "text": "TestStatus represents the status of the test items.\nBases: BaseTestResults, Enum\nTest status.\nTest error.\nTest failed.\nTest passed.\nTest status enum\nTestStatus\nBaseTestResults\nEnum"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestStatus",
        "title": "Test results > Test status enum > TestStatus",
        "section": "Test status enum > TestStatus",
        "text": "class ansys.scadeone.core.svc.test.test_results.TestStatus(value)\n\nBases: BaseTestResults, Enum\n\nTest status.\n\n!! processed by numpydoc !!\n\n\n\nError = 3\n\nTest error.\n\n!! processed by numpydoc !!\n\n\n\nFailed = 2\n\nTest failed.\n\n!! processed by numpydoc !!\n\n\n\nPassed = 1\n\nTest passed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestStatus.Error",
        "title": "Test results > Test status enum > Error",
        "section": "Test status enum > Error",
        "text": "Error = 3\n\nTest error.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestStatus.Failed",
        "title": "Test results > Test status enum > Failed",
        "section": "Test status enum > Failed",
        "text": "Failed = 2\n\nTest failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestStatus.Passed",
        "title": "Test results > Test status enum > Passed",
        "section": "Test status enum > Passed",
        "text": "Passed = 1\n\nTest passed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#test-item-kind-enum",
        "title": "Test results > Test item kind enum",
        "section": "Test item kind enum",
        "text": "TestItemKind represents the kind of the test items.\nBases: BaseTestResults, Enum\nTest item kind.\nAssert test item.\nOracle test item.\nTest item kind enum\nTestItemKind\nBaseTestResults\nEnum"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestItemKind",
        "title": "Test results > Test item kind enum > TestItemKind",
        "section": "Test item kind enum > TestItemKind",
        "text": "class ansys.scadeone.core.svc.test.test_results.TestItemKind(value)\n\nBases: BaseTestResults, Enum\n\nTest item kind.\n\n!! processed by numpydoc !!\n\n\n\nAssert = 1\n\nAssert test item.\n\n!! processed by numpydoc !!\n\n\n\nOracle = 2\n\nOracle test item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestItemKind.Assert",
        "title": "Test results > Test item kind enum > Assert",
        "section": "Test item kind enum > Assert",
        "text": "Assert = 1\n\nAssert test item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/test_results",
        "href": "api/svc/test_results.html#ansys.scadeone.core.svc.test.test_results.TestItemKind.Oracle",
        "title": "Test results > Test item kind enum > Oracle",
        "section": "Test item kind enum > Oracle",
        "text": "Oracle = 2\n\nOracle test item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#identifiers-and-atoms",
        "title": "Identifiers and atoms",
        "section": "Identifiers and atoms",
        "text": "This section details the atoms of expressions: identifiers, literals, etc.\nIdentifiers and atoms"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#identifiers",
        "title": "Identifiers and atoms > Identifiers",
        "section": "Identifiers",
        "text": "Bases: Expression\nansys.scadeone.core.swan.PathIdentifier expression.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nThe identifier expression.\nBases: Expression\nPort information.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Expression\nStores an index as:\na label ansys.scadeone.swan.Identifier or,\nan expression ansys.scadeone.swan.Expression.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nReturn the index (expression or label).\nBases: Expression\nLast expression.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nIdentifier.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nIdentifiers\nExpression\nansys.scadeone.core.swan.PathIdentifier\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nansys.scadeone.swan.Identifier\nansys.scadeone.swan.Expression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdExpr",
        "title": "Identifiers and atoms > Identifiers > PathIdExpr",
        "section": "Identifiers > PathIdExpr",
        "text": "class ansys.scadeone.core.swan.PathIdExpr(path_id: PathIdentifier)\n\nBases: Expression\n\nansys.scadeone.core.swan.PathIdentifier expression.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty path_id: PathIdentifier\n\nThe identifier expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdExpr.get_full_path",
        "title": "Identifiers and atoms > Identifiers > get_full_path",
        "section": "Identifiers > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdExpr.set_owner",
        "title": "Identifiers and atoms > Identifiers > set_owner",
        "section": "Identifiers > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdExpr.is_protected",
        "title": "Identifiers and atoms > Identifiers > is_protected",
        "section": "Identifiers > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdExpr.model",
        "title": "Identifiers and atoms > Identifiers > model",
        "section": "Identifiers > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdExpr.module",
        "title": "Identifiers and atoms > Identifiers > module",
        "section": "Identifiers > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdExpr.owner",
        "title": "Identifiers and atoms > Identifiers > owner",
        "section": "Identifiers > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdExpr.path_id",
        "title": "Identifiers and atoms > Identifiers > path_id",
        "section": "Identifiers > path_id",
        "text": "property path_id: PathIdentifier\n\nThe identifier expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PortExpr",
        "title": "Identifiers and atoms > Identifiers > PortExpr",
        "section": "Identifiers > PortExpr",
        "text": "class ansys.scadeone.core.swan.PortExpr(lunum: Luid | None = None, luid: Luid | None = None, is_self: bool | None = False)\n\nBases: Expression\n\nPort information.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PortExpr.get_full_path",
        "title": "Identifiers and atoms > Identifiers > get_full_path",
        "section": "Identifiers > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PortExpr.set_owner",
        "title": "Identifiers and atoms > Identifiers > set_owner",
        "section": "Identifiers > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PortExpr.is_protected",
        "title": "Identifiers and atoms > Identifiers > is_protected",
        "section": "Identifiers > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PortExpr.model",
        "title": "Identifiers and atoms > Identifiers > model",
        "section": "Identifiers > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PortExpr.module",
        "title": "Identifiers and atoms > Identifiers > module",
        "section": "Identifiers > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PortExpr.owner",
        "title": "Identifiers and atoms > Identifiers > owner",
        "section": "Identifiers > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LabelOrIndex",
        "title": "Identifiers and atoms > Identifiers > LabelOrIndex",
        "section": "Identifiers > LabelOrIndex",
        "text": "class ansys.scadeone.core.swan.LabelOrIndex(value: Identifier | Expression)\n\nBases: Expression\n\nStores an index as:\n\na label ansys.scadeone.swan.Identifier or,\n\nan expression ansys.scadeone.swan.Expression.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty value: Identifier | Expression\n\nReturn the index (expression or label).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LabelOrIndex.get_full_path",
        "title": "Identifiers and atoms > Identifiers > get_full_path",
        "section": "Identifiers > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LabelOrIndex.set_owner",
        "title": "Identifiers and atoms > Identifiers > set_owner",
        "section": "Identifiers > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LabelOrIndex.is_protected",
        "title": "Identifiers and atoms > Identifiers > is_protected",
        "section": "Identifiers > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LabelOrIndex.model",
        "title": "Identifiers and atoms > Identifiers > model",
        "section": "Identifiers > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LabelOrIndex.module",
        "title": "Identifiers and atoms > Identifiers > module",
        "section": "Identifiers > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LabelOrIndex.owner",
        "title": "Identifiers and atoms > Identifiers > owner",
        "section": "Identifiers > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LabelOrIndex.value",
        "title": "Identifiers and atoms > Identifiers > value",
        "section": "Identifiers > value",
        "text": "property value: Identifier | Expression\n\nReturn the index (expression or label).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LastExpr",
        "title": "Identifiers and atoms > Identifiers > LastExpr",
        "section": "Identifiers > LastExpr",
        "text": "class ansys.scadeone.core.swan.LastExpr(id: Identifier)\n\nBases: Expression\n\nLast expression.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nIdentifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LastExpr.get_full_path",
        "title": "Identifiers and atoms > Identifiers > get_full_path",
        "section": "Identifiers > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LastExpr.set_owner",
        "title": "Identifiers and atoms > Identifiers > set_owner",
        "section": "Identifiers > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LastExpr.id",
        "title": "Identifiers and atoms > Identifiers > id",
        "section": "Identifiers > id",
        "text": "property id: Identifier\n\nIdentifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LastExpr.is_protected",
        "title": "Identifiers and atoms > Identifiers > is_protected",
        "section": "Identifiers > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LastExpr.model",
        "title": "Identifiers and atoms > Identifiers > model",
        "section": "Identifiers > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LastExpr.module",
        "title": "Identifiers and atoms > Identifiers > module",
        "section": "Identifiers > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LastExpr.owner",
        "title": "Identifiers and atoms > Identifiers > owner",
        "section": "Identifiers > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#literal",
        "title": "Identifiers and atoms > Literal",
        "section": "Literal",
        "text": "Bases: Expression\nClass for char, numeric, and Boolean expression.\nBoolean value is stored as ‘true’ or ‘false’.\nChar value is a ascii char with its value between simple quotes (ex: ‘a’)\nor an hexadecimal value.\nNumeric value is INTEGER, TYPED_INTEGER, FLOAT, TYPED_FLOAT\n(see language grammar definition and SwanRE class).\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturn true when LiteralExpr is a Boolean.\nReturn true when LiteralExpr is a char.\nReturn true when LiteralExpr is a float.\nReturn true when LiteralExpr is an integer.\nReturn true when LiteralExpr is a numeric.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn true when LiteralExpr is true.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nLiteral expression.\nBases: Enum\nLiteral kind enumeration.\nBoolean literal\nChar literal\nErroneous literal\nNumeric literal (integer or float, with/without size)\nLiteral\nExpression\nSwanRE\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nEnum"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal",
        "title": "Identifiers and atoms > Literal > Literal",
        "section": "Literal > Literal",
        "text": "class ansys.scadeone.core.swan.Literal(value: str)\n\nBases: Expression\n\nClass for char, numeric, and Boolean expression.\n\nBoolean value is stored as ‘true’ or ‘false’.\n\nChar value is a ascii char with its value between simple quotes (ex: ‘a’)\nor an hexadecimal value.\n\nNumeric value is INTEGER, TYPED_INTEGER, FLOAT, TYPED_FLOAT\n(see language grammar definition and SwanRE class).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_bool: bool\n\nReturn true when LiteralExpr is a Boolean.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_char: bool\n\nReturn true when LiteralExpr is a char.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_float\n\nReturn true when LiteralExpr is a float.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_integer\n\nReturn true when LiteralExpr is an integer.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_numeric: bool\n\nReturn true when LiteralExpr is a numeric.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_true: bool\n\nReturn true when LiteralExpr is true.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty value: str\n\nLiteral expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.get_full_path",
        "title": "Identifiers and atoms > Literal > get_full_path",
        "section": "Literal > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.set_owner",
        "title": "Identifiers and atoms > Literal > set_owner",
        "section": "Literal > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.is_bool",
        "title": "Identifiers and atoms > Literal > is_bool",
        "section": "Literal > is_bool",
        "text": "property is_bool: bool\n\nReturn true when LiteralExpr is a Boolean.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.is_char",
        "title": "Identifiers and atoms > Literal > is_char",
        "section": "Literal > is_char",
        "text": "property is_char: bool\n\nReturn true when LiteralExpr is a char.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.is_float",
        "title": "Identifiers and atoms > Literal > is_float",
        "section": "Literal > is_float",
        "text": "property is_float\n\nReturn true when LiteralExpr is a float.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.is_integer",
        "title": "Identifiers and atoms > Literal > is_integer",
        "section": "Literal > is_integer",
        "text": "property is_integer\n\nReturn true when LiteralExpr is an integer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.is_numeric",
        "title": "Identifiers and atoms > Literal > is_numeric",
        "section": "Literal > is_numeric",
        "text": "property is_numeric: bool\n\nReturn true when LiteralExpr is a numeric.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.is_protected",
        "title": "Identifiers and atoms > Literal > is_protected",
        "section": "Literal > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.is_true",
        "title": "Identifiers and atoms > Literal > is_true",
        "section": "Literal > is_true",
        "text": "property is_true: bool\n\nReturn true when LiteralExpr is true.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.model",
        "title": "Identifiers and atoms > Literal > model",
        "section": "Literal > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.module",
        "title": "Identifiers and atoms > Literal > module",
        "section": "Literal > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.owner",
        "title": "Identifiers and atoms > Literal > owner",
        "section": "Literal > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Literal.value",
        "title": "Identifiers and atoms > Literal > value",
        "section": "Literal > value",
        "text": "property value: str\n\nLiteral expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LiteralKind",
        "title": "Identifiers and atoms > Literal > LiteralKind",
        "section": "Literal > LiteralKind",
        "text": "class ansys.scadeone.core.swan.LiteralKind(value)\n\nBases: Enum\n\nLiteral kind enumeration.\n\n!! processed by numpydoc !!\n\n\n\nBool = 1\n\nBoolean literal\n\n!! processed by numpydoc !!\n\n\n\nChar = 2\n\nChar literal\n\n!! processed by numpydoc !!\n\n\n\nError = 4\n\nErroneous literal\n\n!! processed by numpydoc !!\n\n\n\nNumeric = 3\n\nNumeric literal (integer or float, with/without size)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LiteralKind.Bool",
        "title": "Identifiers and atoms > Literal > Bool",
        "section": "Literal > Bool",
        "text": "Bool = 1\n\nBoolean literal\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LiteralKind.Char",
        "title": "Identifiers and atoms > Literal > Char",
        "section": "Literal > Char",
        "text": "Char = 2\n\nChar literal\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LiteralKind.Error",
        "title": "Identifiers and atoms > Literal > Error",
        "section": "Literal > Error",
        "text": "Error = 4\n\nErroneous literal\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.LiteralKind.Numeric",
        "title": "Identifiers and atoms > Literal > Numeric",
        "section": "Literal > Numeric",
        "text": "Numeric = 3\n\nNumeric literal (integer or float, with/without size)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#patterns",
        "title": "Identifiers and atoms > Patterns",
        "section": "Patterns",
        "text": "Patterns are used by CaseExpr and ActivateWhen classes\nfor the case pattern of and activate when constructs.\nBases: SwanItem\nBase class for patterns.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Pattern\nSimple pattern: pattern ::= path_id.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nThe path_id of pattern.\nBases: Pattern\nVariant pattern:\npattern ::=\npath_id _: has_underscore is True\npath_id { } has_underscore is False, has_capture is False\npath_id { Id } : has_capture is True\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nThe variant pattern captured tag.\nThe variant pattern as an empty {} capture.\nThe variant pattern has a captured tag.\nVariant part is ‘_’.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nThe path_id of variant pattern.\nUnderscore as bool or None.\nBases: Pattern\nPattern: pattern ::= CHAR.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Pattern\nPattern: pattern ::= true | false.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn True when pattern is true, else False.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nReturn value as a bool value\nBases: Pattern\nPattern: pattern ::= [-] INTEGER | [-] TYPED_INTEGER.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturn value as an integer.\nReturn True when has sign minus.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nReturn value as a string, without sign.\nBases: Pattern\nPattern: pattern ::= _.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Pattern\nPattern: pattern ::= default.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Pattern, ProtectedItem\nProtected pattern expression, i.e., saved as string if\nsyntactically incorrect.\nFull path of Swan construct.\nCheck if protected data has the specified markup.\nString markup.\nTrue when instance markup is same as parameter.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nProtected data between markups.\nProtected data.\nTell if item is syntactically protected and provided as a string.\nProtection markup.\nMarkup string.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nPatterns\nCaseExpr\nActivateWhen\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nPattern\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nPattern\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nPattern\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nPattern\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nPattern\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nPattern\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nPattern\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nPattern\nProtectedItem\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\npython:str\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Pattern",
        "title": "Identifiers and atoms > Patterns > Pattern",
        "section": "Patterns > Pattern",
        "text": "class ansys.scadeone.core.swan.Pattern\n\nBases: SwanItem\n\nBase class for patterns.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Pattern.get_full_path",
        "title": "Identifiers and atoms > Patterns > get_full_path",
        "section": "Patterns > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Pattern.set_owner",
        "title": "Identifiers and atoms > Patterns > set_owner",
        "section": "Patterns > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Pattern.is_protected",
        "title": "Identifiers and atoms > Patterns > is_protected",
        "section": "Patterns > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Pattern.model",
        "title": "Identifiers and atoms > Patterns > model",
        "section": "Patterns > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Pattern.module",
        "title": "Identifiers and atoms > Patterns > module",
        "section": "Patterns > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.Pattern.owner",
        "title": "Identifiers and atoms > Patterns > owner",
        "section": "Patterns > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdPattern",
        "title": "Identifiers and atoms > Patterns > PathIdPattern",
        "section": "Patterns > PathIdPattern",
        "text": "class ansys.scadeone.core.swan.PathIdPattern(path_id: PathIdentifier)\n\nBases: Pattern\n\nSimple pattern: pattern ::= path_id.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty path_id: PathIdentifier\n\nThe path_id of pattern.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdPattern.get_full_path",
        "title": "Identifiers and atoms > Patterns > get_full_path",
        "section": "Patterns > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdPattern.set_owner",
        "title": "Identifiers and atoms > Patterns > set_owner",
        "section": "Patterns > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdPattern.is_protected",
        "title": "Identifiers and atoms > Patterns > is_protected",
        "section": "Patterns > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdPattern.model",
        "title": "Identifiers and atoms > Patterns > model",
        "section": "Patterns > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdPattern.module",
        "title": "Identifiers and atoms > Patterns > module",
        "section": "Patterns > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdPattern.owner",
        "title": "Identifiers and atoms > Patterns > owner",
        "section": "Patterns > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.PathIdPattern.path_id",
        "title": "Identifiers and atoms > Patterns > path_id",
        "section": "Patterns > path_id",
        "text": "property path_id: PathIdentifier\n\nThe path_id of pattern.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern",
        "title": "Identifiers and atoms > Patterns > VariantPattern",
        "section": "Patterns > VariantPattern",
        "text": "class ansys.scadeone.core.swan.VariantPattern(path_id: PathIdentifier, captured: Identifier | None = None, underscore: bool | None = False)\n\nBases: Pattern\n\nVariant pattern:\n\npattern ::=\n\npath_id _: has_underscore is True\n\npath_id { } has_underscore is False, has_capture is False\n\npath_id { Id } : has_capture is True\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty captured: Identifier | None\n\nThe variant pattern captured tag.\n\n!! processed by numpydoc !!\n\n\n\nproperty empty_capture: bool\n\nThe variant pattern as an empty {} capture.\n\n!! processed by numpydoc !!\n\n\n\nproperty has_capture: bool\n\nThe variant pattern has a captured tag.\n\n!! processed by numpydoc !!\n\n\n\nproperty has_underscore: bool\n\nVariant part is ‘_’.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty path_id: PathIdentifier\n\nThe path_id of variant pattern.\n\n!! processed by numpydoc !!\n\n\n\nproperty underscore: bool | None\n\nUnderscore as bool or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.get_full_path",
        "title": "Identifiers and atoms > Patterns > get_full_path",
        "section": "Patterns > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.set_owner",
        "title": "Identifiers and atoms > Patterns > set_owner",
        "section": "Patterns > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.captured",
        "title": "Identifiers and atoms > Patterns > captured",
        "section": "Patterns > captured",
        "text": "property captured: Identifier | None\n\nThe variant pattern captured tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.empty_capture",
        "title": "Identifiers and atoms > Patterns > empty_capture",
        "section": "Patterns > empty_capture",
        "text": "property empty_capture: bool\n\nThe variant pattern as an empty {} capture.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.has_capture",
        "title": "Identifiers and atoms > Patterns > has_capture",
        "section": "Patterns > has_capture",
        "text": "property has_capture: bool\n\nThe variant pattern has a captured tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.has_underscore",
        "title": "Identifiers and atoms > Patterns > has_underscore",
        "section": "Patterns > has_underscore",
        "text": "property has_underscore: bool\n\nVariant part is ‘_’.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.is_protected",
        "title": "Identifiers and atoms > Patterns > is_protected",
        "section": "Patterns > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.model",
        "title": "Identifiers and atoms > Patterns > model",
        "section": "Patterns > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.module",
        "title": "Identifiers and atoms > Patterns > module",
        "section": "Patterns > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.owner",
        "title": "Identifiers and atoms > Patterns > owner",
        "section": "Patterns > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.path_id",
        "title": "Identifiers and atoms > Patterns > path_id",
        "section": "Patterns > path_id",
        "text": "property path_id: PathIdentifier\n\nThe path_id of variant pattern.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.VariantPattern.underscore",
        "title": "Identifiers and atoms > Patterns > underscore",
        "section": "Patterns > underscore",
        "text": "property underscore: bool | None\n\nUnderscore as bool or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.CharPattern",
        "title": "Identifiers and atoms > Patterns > CharPattern",
        "section": "Patterns > CharPattern",
        "text": "class ansys.scadeone.core.swan.CharPattern(value: str)\n\nBases: Pattern\n\nPattern: pattern ::= CHAR.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.CharPattern.get_full_path",
        "title": "Identifiers and atoms > Patterns > get_full_path",
        "section": "Patterns > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.CharPattern.set_owner",
        "title": "Identifiers and atoms > Patterns > set_owner",
        "section": "Patterns > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.CharPattern.is_protected",
        "title": "Identifiers and atoms > Patterns > is_protected",
        "section": "Patterns > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.CharPattern.model",
        "title": "Identifiers and atoms > Patterns > model",
        "section": "Patterns > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.CharPattern.module",
        "title": "Identifiers and atoms > Patterns > module",
        "section": "Patterns > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.CharPattern.owner",
        "title": "Identifiers and atoms > Patterns > owner",
        "section": "Patterns > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.BoolPattern",
        "title": "Identifiers and atoms > Patterns > BoolPattern",
        "section": "Patterns > BoolPattern",
        "text": "class ansys.scadeone.core.swan.BoolPattern(value: bool)\n\nBases: Pattern\n\nPattern: pattern ::= true | false.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_true: bool\n\nReturn True when pattern is true, else False.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty value: bool\n\nReturn value as a bool value\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.BoolPattern.get_full_path",
        "title": "Identifiers and atoms > Patterns > get_full_path",
        "section": "Patterns > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.BoolPattern.set_owner",
        "title": "Identifiers and atoms > Patterns > set_owner",
        "section": "Patterns > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.BoolPattern.is_protected",
        "title": "Identifiers and atoms > Patterns > is_protected",
        "section": "Patterns > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.BoolPattern.is_true",
        "title": "Identifiers and atoms > Patterns > is_true",
        "section": "Patterns > is_true",
        "text": "property is_true: bool\n\nReturn True when pattern is true, else False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.BoolPattern.model",
        "title": "Identifiers and atoms > Patterns > model",
        "section": "Patterns > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.BoolPattern.module",
        "title": "Identifiers and atoms > Patterns > module",
        "section": "Patterns > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.BoolPattern.owner",
        "title": "Identifiers and atoms > Patterns > owner",
        "section": "Patterns > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.BoolPattern.value",
        "title": "Identifiers and atoms > Patterns > value",
        "section": "Patterns > value",
        "text": "property value: bool\n\nReturn value as a bool value\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.IntPattern",
        "title": "Identifiers and atoms > Patterns > IntPattern",
        "section": "Patterns > IntPattern",
        "text": "class ansys.scadeone.core.swan.IntPattern(value: str, is_minus: bool | None = False)\n\nBases: Pattern\n\nPattern: pattern ::= [-] INTEGER | [-] TYPED_INTEGER.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty as_int: int\n\nReturn value as an integer.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_minus: bool\n\nReturn True when has sign minus.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty value: str\n\nReturn value as a string, without sign.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.IntPattern.get_full_path",
        "title": "Identifiers and atoms > Patterns > get_full_path",
        "section": "Patterns > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.IntPattern.set_owner",
        "title": "Identifiers and atoms > Patterns > set_owner",
        "section": "Patterns > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.IntPattern.as_int",
        "title": "Identifiers and atoms > Patterns > as_int",
        "section": "Patterns > as_int",
        "text": "property as_int: int\n\nReturn value as an integer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.IntPattern.is_minus",
        "title": "Identifiers and atoms > Patterns > is_minus",
        "section": "Patterns > is_minus",
        "text": "property is_minus: bool\n\nReturn True when has sign minus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.IntPattern.is_protected",
        "title": "Identifiers and atoms > Patterns > is_protected",
        "section": "Patterns > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.IntPattern.model",
        "title": "Identifiers and atoms > Patterns > model",
        "section": "Patterns > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.IntPattern.module",
        "title": "Identifiers and atoms > Patterns > module",
        "section": "Patterns > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.IntPattern.owner",
        "title": "Identifiers and atoms > Patterns > owner",
        "section": "Patterns > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.IntPattern.value",
        "title": "Identifiers and atoms > Patterns > value",
        "section": "Patterns > value",
        "text": "property value: str\n\nReturn value as a string, without sign.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.UnderscorePattern",
        "title": "Identifiers and atoms > Patterns > UnderscorePattern",
        "section": "Patterns > UnderscorePattern",
        "text": "class ansys.scadeone.core.swan.UnderscorePattern\n\nBases: Pattern\n\nPattern: pattern ::= _.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.UnderscorePattern.get_full_path",
        "title": "Identifiers and atoms > Patterns > get_full_path",
        "section": "Patterns > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.UnderscorePattern.set_owner",
        "title": "Identifiers and atoms > Patterns > set_owner",
        "section": "Patterns > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.UnderscorePattern.is_protected",
        "title": "Identifiers and atoms > Patterns > is_protected",
        "section": "Patterns > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.UnderscorePattern.model",
        "title": "Identifiers and atoms > Patterns > model",
        "section": "Patterns > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.UnderscorePattern.module",
        "title": "Identifiers and atoms > Patterns > module",
        "section": "Patterns > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.UnderscorePattern.owner",
        "title": "Identifiers and atoms > Patterns > owner",
        "section": "Patterns > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.DefaultPattern",
        "title": "Identifiers and atoms > Patterns > DefaultPattern",
        "section": "Patterns > DefaultPattern",
        "text": "class ansys.scadeone.core.swan.DefaultPattern\n\nBases: Pattern\n\nPattern: pattern ::= default.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.DefaultPattern.get_full_path",
        "title": "Identifiers and atoms > Patterns > get_full_path",
        "section": "Patterns > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.DefaultPattern.set_owner",
        "title": "Identifiers and atoms > Patterns > set_owner",
        "section": "Patterns > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.DefaultPattern.is_protected",
        "title": "Identifiers and atoms > Patterns > is_protected",
        "section": "Patterns > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.DefaultPattern.model",
        "title": "Identifiers and atoms > Patterns > model",
        "section": "Patterns > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.DefaultPattern.module",
        "title": "Identifiers and atoms > Patterns > module",
        "section": "Patterns > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.DefaultPattern.owner",
        "title": "Identifiers and atoms > Patterns > owner",
        "section": "Patterns > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.ProtectedPattern",
        "title": "Identifiers and atoms > Patterns > ProtectedPattern",
        "section": "Patterns > ProtectedPattern",
        "text": "class ansys.scadeone.core.swan.ProtectedPattern(data: str)\n\nBases: Pattern, ProtectedItem\n\nProtected pattern expression, i.e., saved as string if\nsyntactically incorrect.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nhas_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.ProtectedPattern.get_full_path",
        "title": "Identifiers and atoms > Patterns > get_full_path",
        "section": "Patterns > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.ProtectedPattern.has_markup",
        "title": "Identifiers and atoms > Patterns > has_markup",
        "section": "Patterns > has_markup",
        "text": "has_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.ProtectedPattern.set_owner",
        "title": "Identifiers and atoms > Patterns > set_owner",
        "section": "Patterns > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.ProtectedPattern.data",
        "title": "Identifiers and atoms > Patterns > data",
        "section": "Patterns > data",
        "text": "property data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.ProtectedPattern.is_protected",
        "title": "Identifiers and atoms > Patterns > is_protected",
        "section": "Patterns > is_protected",
        "text": "property is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.ProtectedPattern.markup",
        "title": "Identifiers and atoms > Patterns > markup",
        "section": "Patterns > markup",
        "text": "property markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.ProtectedPattern.model",
        "title": "Identifiers and atoms > Patterns > model",
        "section": "Patterns > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.ProtectedPattern.module",
        "title": "Identifiers and atoms > Patterns > module",
        "section": "Patterns > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/atom",
        "href": "api/language/expressions/atom.html#ansys.scadeone.core.swan.ProtectedPattern.owner",
        "title": "Identifiers and atoms > Patterns > owner",
        "section": "Patterns > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/namespace/index",
        "href": "examples/namespace/index.html#navigation-using-names",
        "title": "Navigation using names",
        "section": "Navigation using names",
        "text": "This section present how to search a declaration from a module or from a scope using its namespace.\nThe search starts on the module or scope moving up to the declarations of scope sections, operators,\nmodule bodies and interfaces.\nThe QuadFlightControl example is used. To setup the example see\nref_QuadFlightControl_python_setup.\nThe proper module is retrieved:\nNavigation using names\nQuadFlightControl"
    },
    {
        "objectID": "examples/namespace/index",
        "href": "examples/namespace/index.html#getting-an--operator-from-the-module",
        "title": "Navigation using names > Getting an  operator from the module",
        "section": "Getting an  operator from the module",
        "text": "Operator declarations can be found from a module (ModuleBody or ModuleInterface).\nThis code shows how to get the operator from a module using the ModuleBody.get_declaration() method:\nGetting an  operator from the module\nModuleBody\nModuleInterface\nModuleBody.get_declaration()"
    },
    {
        "objectID": "examples/namespace/index",
        "href": "examples/namespace/index.html#get-global-declarations-from-operator-scope",
        "title": "Navigation using names > Get global declarations from operator scope",
        "section": "Get global declarations from operator scope",
        "text": "Global declarations like groups, constants, types, or other operators from the operator scope are found using the\nScope.get_declaration() method:\nWith the same method can be used to access to the inputs or outputs of the operator:\nGet global declarations from operator scope\nScope.get_declaration()"
    },
    {
        "objectID": "examples/namespace/index",
        "href": "examples/namespace/index.html#get-local-declarations-from-any-scope",
        "title": "Navigation using names > Get local declarations from any scope",
        "section": "Get local declarations from any scope",
        "text": "In addition to global declarations, local declarations like variables, inputs, or outputs from any scope\ncan be found using the Scope.get_declaration() method.\nThis method looks for a declaration of a given name in its current namespace.\nIf the declaration is not found, it is searched in the enclosing scope.\nGet local declarations from any scope\nScope.get_declaration()"
    },
    {
        "objectID": "examples/namespace/index",
        "href": "examples/namespace/index.html#complete-example",
        "title": "Navigation using names > Complete example",
        "section": "Complete example",
        "text": "This is the complete script for the name-based scope navigation section.\nComplete example"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#bitwise-boolean-arithmetic-relational",
        "title": "Bitwise, boolean, arithmetic, relational",
        "section": "Bitwise, boolean, arithmetic, relational",
        "text": "Arithmetic, logical, bitwise, and relational expressions are represented\nby unary expressions (ex: not X), binary expressions (ex: 1 + 2), or n-ary expressions.\nUnary and binary expressions are implemented with the UnaryExpr and BinaryExpr classes with the appropriate operator as an enumeration.\nN-ary expressions correspond to specific operator instance calls which use the NaryOp enumeration.\nOperator\nOperation\nKind\n-\nminus / subtraction\nunary / binary\n+\nplus / addition\nunary / binary, n-ary\n*\nmultiplication\nbinary, n-ary\n/\ndivision\nbinary\nlnot\nbitwise not\nunary\nland\nbitwise and\nbinary, n-ary\nlor\nbitwise or\nbinary, n-ary\nlxor\nbitwise xor\nbinary, n-ary\nlsl\nbitwise left-shift\nbinary\nlsr\nbitwise right-shift\nbinary\nnot\nlogical not\nunary\nand\nlogical and\nbinary, n-ary\nor\nlogical and\nbinary, n-ary\nxor\nlogical and\nbinary, n-ary\npre\nUnit delay\nunary (not initial value), binary (initial value)\n=\nrelation equal\nbinary\n<>\nrelation difference\nbinary\n<\nrelation less than\nbinary\n<=\nrelation less than or equal to\nbinary\n>\nrelation greater than\nbinary\n>=\nrelation greater than or equal to\nbinary\n->\ninitial value\nbinary\n@\narray concatenation\nbinary\n(:>)\ncast operation\nbinary\nBitwise, boolean, arithmetic, relational\nOperators\nUnaryExpr\nBinaryExpr\nNaryOp"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#unary-expressions",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions",
        "section": "Unary expressions",
        "text": "A unary expression is composed of a unary operator and an expression.\nUnary operators are defined with the UnaryOp enumeration.\nBases: Enum\nUnary operators:\narithmetic operators\nlogical operators\nUnit delay operator\n(lnot) Bitwise not.\n(-) Unary minus.\n(not) Logical not.\n(+) Unary plus.\n(pre) Unit delay.\nBases: Expression\nExpression with unary operators\n:py:class`ansys.scadeone.core.swan.expressions.UnaryOp`.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nExpression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nUnary operator.\nOwner of current Swan construct.\nUnary expressions\nUnaryOp\nEnum\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryOp",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > UnaryOp",
        "section": "Unary expressions > UnaryOp",
        "text": "class ansys.scadeone.core.swan.UnaryOp(value)\n\nBases: Enum\n\nUnary operators:\n\narithmetic operators\n\nlogical operators\n\nUnit delay operator\n\n!! processed by numpydoc !!\n\n\n\nLnot = 3\n\n(lnot) Bitwise not.\n\n!! processed by numpydoc !!\n\n\n\nMinus = 1\n\n(-) Unary minus.\n\n!! processed by numpydoc !!\n\n\n\nNot = 4\n\n(not) Logical not.\n\n!! processed by numpydoc !!\n\n\n\nPlus = 2\n\n(+) Unary plus.\n\n!! processed by numpydoc !!\n\n\n\nPre = 5\n\n(pre) Unit delay.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryOp.Lnot",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > Lnot",
        "section": "Unary expressions > Lnot",
        "text": "Lnot = 3\n\n(lnot) Bitwise not.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryOp.Minus",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > Minus",
        "section": "Unary expressions > Minus",
        "text": "Minus = 1\n\n(-) Unary minus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryOp.Not",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > Not",
        "section": "Unary expressions > Not",
        "text": "Not = 4\n\n(not) Logical not.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryOp.Plus",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > Plus",
        "section": "Unary expressions > Plus",
        "text": "Plus = 2\n\n(+) Unary plus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryOp.Pre",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > Pre",
        "section": "Unary expressions > Pre",
        "text": "Pre = 5\n\n(pre) Unit delay.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryExpr",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > UnaryExpr",
        "section": "Unary expressions > UnaryExpr",
        "text": "class ansys.scadeone.core.swan.UnaryExpr(operator: UnaryOp, expr: Expression)\n\nBases: Expression\n\nExpression with unary operators\n:py:class`ansys.scadeone.core.swan.expressions.UnaryOp`.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty operator: UnaryOp\n\nUnary operator.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryExpr.get_full_path",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > get_full_path",
        "section": "Unary expressions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryExpr.set_owner",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > set_owner",
        "section": "Unary expressions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryExpr.expr",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > expr",
        "section": "Unary expressions > expr",
        "text": "property expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryExpr.is_protected",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > is_protected",
        "section": "Unary expressions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryExpr.model",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > model",
        "section": "Unary expressions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryExpr.module",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > module",
        "section": "Unary expressions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryExpr.operator",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > operator",
        "section": "Unary expressions > operator",
        "text": "property operator: UnaryOp\n\nUnary operator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.UnaryExpr.owner",
        "title": "Bitwise, boolean, arithmetic, relational > Unary expressions > owner",
        "section": "Unary expressions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#binary-expressions",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions",
        "section": "Binary expressions",
        "text": "A binary expression is composed of a binary operator and two expressions.\nBinary operators are defined with the BinaryOp enumeration.\nBases: Enum\nBinary operators:\narithmetic operators\nrelational operators\nlogical operators\nbitwise operators\nInitial value, initialed unit delay\nConcat\n(and) Logical and.\n(<>) Different.\n(=) Equal.\n(>=) Greater than or equal to.\n(>) Greater than.\n(land) Bitwise and.\n(<=) Less than or equal to.\n(lor) Bitwise or.\n(lsl) Logical shift left.\n(lsr) Logical shift right.\n(<) Less than.\n(lxor) Bitwise exclusive or.\n(-) Subtraction.\n(mod) Modulo.\n(*) Multiplication.\n(or) Logical or.\n(+) Addition.\n(/) Division.\n(xor) Logical exclusive or.\nBases: Expression\nExpression with binary operators\n:py:class`ansys.scadeone.swan.expressions.BinaryOp`.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLeft expression.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nBinary operator.\nOwner of current Swan construct.\nRight expression.\nBinary expressions\nBinaryOp\nEnum\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > BinaryOp",
        "section": "Binary expressions > BinaryOp",
        "text": "class ansys.scadeone.core.swan.BinaryOp(value)\n\nBases: Enum\n\nBinary operators:\n\narithmetic operators\n\nrelational operators\n\nlogical operators\n\nbitwise operators\n\nInitial value, initialed unit delay\n\nConcat\n\n!! processed by numpydoc !!\n\n\n\nAnd = 12\n\n(and) Logical and.\n\n!! processed by numpydoc !!\n\n\n\nDiff = 7\n\n(<>) Different.\n\n!! processed by numpydoc !!\n\n\n\nEqual = 6\n\n(=) Equal.\n\n!! processed by numpydoc !!\n\n\n\nGeq = 11\n\n(>=) Greater than or equal to.\n\n!! processed by numpydoc !!\n\n\n\nGt = 9\n\n(>) Greater than.\n\n!! processed by numpydoc !!\n\n\n\nLand = 15\n\n(land) Bitwise and.\n\n!! processed by numpydoc !!\n\n\n\nLeq = 10\n\n(<=) Less than or equal to.\n\n!! processed by numpydoc !!\n\n\n\nLor = 16\n\n(lor) Bitwise or.\n\n!! processed by numpydoc !!\n\n\n\nLsl = 18\n\n(lsl) Logical shift left.\n\n!! processed by numpydoc !!\n\n\n\nLsr = 19\n\n(lsr) Logical shift right.\n\n!! processed by numpydoc !!\n\n\n\nLt = 8\n\n(<) Less than.\n\n!! processed by numpydoc !!\n\n\n\nLxor = 17\n\n(lxor) Bitwise exclusive or.\n\n!! processed by numpydoc !!\n\n\n\nMinus = 2\n\n(-) Subtraction.\n\n!! processed by numpydoc !!\n\n\n\nMod = 5\n\n(mod) Modulo.\n\n!! processed by numpydoc !!\n\n\n\nMult = 3\n\n(*) Multiplication.\n\n!! processed by numpydoc !!\n\n\n\nOr = 13\n\n(or) Logical or.\n\n!! processed by numpydoc !!\n\n\n\nPlus = 1\n\n(+) Addition.\n\n!! processed by numpydoc !!\n\n\n\nSlash = 4\n\n(/) Division.\n\n!! processed by numpydoc !!\n\n\n\nXor = 14\n\n(xor) Logical exclusive or.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.And",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > And",
        "section": "Binary expressions > And",
        "text": "And = 12\n\n(and) Logical and.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Diff",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Diff",
        "section": "Binary expressions > Diff",
        "text": "Diff = 7\n\n(<>) Different.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Equal",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Equal",
        "section": "Binary expressions > Equal",
        "text": "Equal = 6\n\n(=) Equal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Geq",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Geq",
        "section": "Binary expressions > Geq",
        "text": "Geq = 11\n\n(>=) Greater than or equal to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Gt",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Gt",
        "section": "Binary expressions > Gt",
        "text": "Gt = 9\n\n(>) Greater than.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Land",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Land",
        "section": "Binary expressions > Land",
        "text": "Land = 15\n\n(land) Bitwise and.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Leq",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Leq",
        "section": "Binary expressions > Leq",
        "text": "Leq = 10\n\n(<=) Less than or equal to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Lor",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Lor",
        "section": "Binary expressions > Lor",
        "text": "Lor = 16\n\n(lor) Bitwise or.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Lsl",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Lsl",
        "section": "Binary expressions > Lsl",
        "text": "Lsl = 18\n\n(lsl) Logical shift left.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Lsr",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Lsr",
        "section": "Binary expressions > Lsr",
        "text": "Lsr = 19\n\n(lsr) Logical shift right.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Lt",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Lt",
        "section": "Binary expressions > Lt",
        "text": "Lt = 8\n\n(<) Less than.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Lxor",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Lxor",
        "section": "Binary expressions > Lxor",
        "text": "Lxor = 17\n\n(lxor) Bitwise exclusive or.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Minus",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Minus",
        "section": "Binary expressions > Minus",
        "text": "Minus = 2\n\n(-) Subtraction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Mod",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Mod",
        "section": "Binary expressions > Mod",
        "text": "Mod = 5\n\n(mod) Modulo.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Mult",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Mult",
        "section": "Binary expressions > Mult",
        "text": "Mult = 3\n\n(*) Multiplication.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Or",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Or",
        "section": "Binary expressions > Or",
        "text": "Or = 13\n\n(or) Logical or.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Plus",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Plus",
        "section": "Binary expressions > Plus",
        "text": "Plus = 1\n\n(+) Addition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Slash",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Slash",
        "section": "Binary expressions > Slash",
        "text": "Slash = 4\n\n(/) Division.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryOp.Xor",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > Xor",
        "section": "Binary expressions > Xor",
        "text": "Xor = 14\n\n(xor) Logical exclusive or.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryExpr",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > BinaryExpr",
        "section": "Binary expressions > BinaryExpr",
        "text": "class ansys.scadeone.core.swan.BinaryExpr(operator: BinaryOp, left: Expression, right: Expression)\n\nBases: Expression\n\nExpression with binary operators\n:py:class`ansys.scadeone.swan.expressions.BinaryOp`.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty left: Expression\n\nLeft expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty operator: BinaryOp\n\nBinary operator.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty right: Expression\n\nRight expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryExpr.get_full_path",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > get_full_path",
        "section": "Binary expressions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryExpr.set_owner",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > set_owner",
        "section": "Binary expressions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryExpr.is_protected",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > is_protected",
        "section": "Binary expressions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryExpr.left",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > left",
        "section": "Binary expressions > left",
        "text": "property left: Expression\n\nLeft expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryExpr.model",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > model",
        "section": "Binary expressions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryExpr.module",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > module",
        "section": "Binary expressions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryExpr.operator",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > operator",
        "section": "Binary expressions > operator",
        "text": "property operator: BinaryOp\n\nBinary operator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryExpr.owner",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > owner",
        "section": "Binary expressions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.BinaryExpr.right",
        "title": "Bitwise, boolean, arithmetic, relational > Binary expressions > right",
        "section": "Binary expressions > right",
        "text": "property right: Expression\n\nRight expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#cast-operators",
        "title": "Bitwise, boolean, arithmetic, relational > Cast operators",
        "section": "Cast operators",
        "text": "A cast operator ( :> )  is a specific binary expression as it takes an\nexpression and a type.\nBases: Expression\nCast expression: ( expr :> type_expr).\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nExpression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nType expression.\nCast operators\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NumericCast",
        "title": "Bitwise, boolean, arithmetic, relational > Cast operators > NumericCast",
        "section": "Cast operators > NumericCast",
        "text": "class ansys.scadeone.core.swan.NumericCast(expr: Expression, type: TypeExpression)\n\nBases: Expression\n\nCast expression: ( expr :> type_expr).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty type: TypeExpression\n\nType expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NumericCast.get_full_path",
        "title": "Bitwise, boolean, arithmetic, relational > Cast operators > get_full_path",
        "section": "Cast operators > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NumericCast.set_owner",
        "title": "Bitwise, boolean, arithmetic, relational > Cast operators > set_owner",
        "section": "Cast operators > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NumericCast.expr",
        "title": "Bitwise, boolean, arithmetic, relational > Cast operators > expr",
        "section": "Cast operators > expr",
        "text": "property expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NumericCast.is_protected",
        "title": "Bitwise, boolean, arithmetic, relational > Cast operators > is_protected",
        "section": "Cast operators > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NumericCast.model",
        "title": "Bitwise, boolean, arithmetic, relational > Cast operators > model",
        "section": "Cast operators > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NumericCast.module",
        "title": "Bitwise, boolean, arithmetic, relational > Cast operators > module",
        "section": "Cast operators > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NumericCast.owner",
        "title": "Bitwise, boolean, arithmetic, relational > Cast operators > owner",
        "section": "Cast operators > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NumericCast.type",
        "title": "Bitwise, boolean, arithmetic, relational > Cast operators > type",
        "section": "Cast operators > type",
        "text": "property type: TypeExpression\n\nType expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#n-ary-expressions",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions",
        "section": "N-ary expressions",
        "text": "N-ary operators are a special case of operator calls. The n-ary operations\nare given by the following enumeration.\nBases: Enum\nN-ary operators.\n(and) N-ary logical and.\n(@) N-ary array concat.\n(land) N-ary bitwise and.\n(lor) N-ary bitwise or.\n(*) N-ary multiplication.\n(or) N-ary logical or.\n(+) N-ary addition.\n(xor) N-ary exclusive or.\nBases: OperatorExpression\nN-ary operators: ‘+’ | ‘*’ | ‘@’ | and | or | xor | land | lor.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nN-ary operator.\nOwner of current Swan construct.\nN-ary expressions\nEnum\nOperatorExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NaryOp",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > NaryOp",
        "section": "N-ary expressions > NaryOp",
        "text": "class ansys.scadeone.core.swan.NaryOp(value)\n\nBases: Enum\n\nN-ary operators.\n\n!! processed by numpydoc !!\n\n\n\nAnd = 5\n\n(and) N-ary logical and.\n\n!! processed by numpydoc !!\n\n\n\nConcat = 8\n\n(@) N-ary array concat.\n\n!! processed by numpydoc !!\n\n\n\nLand = 3\n\n(land) N-ary bitwise and.\n\n!! processed by numpydoc !!\n\n\n\nLor = 4\n\n(lor) N-ary bitwise or.\n\n!! processed by numpydoc !!\n\n\n\nMult = 2\n\n(*) N-ary multiplication.\n\n!! processed by numpydoc !!\n\n\n\nOr = 6\n\n(or) N-ary logical or.\n\n!! processed by numpydoc !!\n\n\n\nPlus = 1\n\n(+) N-ary addition.\n\n!! processed by numpydoc !!\n\n\n\nXor = 7\n\n(xor) N-ary exclusive or.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NaryOp.And",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > And",
        "section": "N-ary expressions > And",
        "text": "And = 5\n\n(and) N-ary logical and.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NaryOp.Concat",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > Concat",
        "section": "N-ary expressions > Concat",
        "text": "Concat = 8\n\n(@) N-ary array concat.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NaryOp.Land",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > Land",
        "section": "N-ary expressions > Land",
        "text": "Land = 3\n\n(land) N-ary bitwise and.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NaryOp.Lor",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > Lor",
        "section": "N-ary expressions > Lor",
        "text": "Lor = 4\n\n(lor) N-ary bitwise or.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NaryOp.Mult",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > Mult",
        "section": "N-ary expressions > Mult",
        "text": "Mult = 2\n\n(*) N-ary multiplication.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NaryOp.Or",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > Or",
        "section": "N-ary expressions > Or",
        "text": "Or = 6\n\n(or) N-ary logical or.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NaryOp.Plus",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > Plus",
        "section": "N-ary expressions > Plus",
        "text": "Plus = 1\n\n(+) N-ary addition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NaryOp.Xor",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > Xor",
        "section": "N-ary expressions > Xor",
        "text": "Xor = 7\n\n(xor) N-ary exclusive or.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NAryOperator",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > NAryOperator",
        "section": "N-ary expressions > NAryOperator",
        "text": "class ansys.scadeone.core.swan.NAryOperator(operator: NaryOp)\n\nBases: OperatorExpression\n\nN-ary operators: ‘+’ | ‘*’ | ‘@’ | and | or | xor | land | lor.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty operator: NaryOp\n\nN-ary operator.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NAryOperator.get_full_path",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > get_full_path",
        "section": "N-ary expressions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NAryOperator.set_owner",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > set_owner",
        "section": "N-ary expressions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NAryOperator.is_protected",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > is_protected",
        "section": "N-ary expressions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NAryOperator.model",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > model",
        "section": "N-ary expressions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NAryOperator.module",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > module",
        "section": "N-ary expressions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NAryOperator.operator",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > operator",
        "section": "N-ary expressions > operator",
        "text": "property operator: NaryOp\n\nN-ary operator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/basic_expr",
        "href": "api/language/expressions/basic_expr.html#ansys.scadeone.core.swan.NAryOperator.owner",
        "title": "Bitwise, boolean, arithmetic, relational > N-ary expressions > owner",
        "section": "N-ary expressions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/index",
        "href": "api/language/index.html#swan-language",
        "title": "Swan language",
        "section": "Swan language",
        "text": "This section describes the ansys.scadeone.core.swan module which contains all classes\navailable to represent a Swan model.\nSome class descriptions use the Extended Backus-Naur form to represent Swan constructs.\nSwan language\nansys.scadeone.core.swan"
    },
    {
        "objectID": "contrib",
        "href": "contrib.html#contributing",
        "title": "Contributing",
        "section": "Contributing",
        "text": "PyScadeOne is part of the\nScade One\nproduct, and is developed by its R&D team.\nContributing to PyScadeOne is welcomed and can be in the form of discussions, code,\ndocumentation, or issue reports\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith it and all style guidelines before attempting to contribute to PyScadeOne.\nThe following contribution information is specific to PyScadeOne.\nContributing"
    },
    {
        "objectID": "contrib",
        "href": "contrib.html#pyscadeone-documentation",
        "title": "Contributing > PyScadeOne documentation",
        "section": "PyScadeOne documentation",
        "text": "Documentation for the latest stable release of PyScadeOne is hosted at\nPyScadeOne Documentation.\nThis version is automatically kept up to date via GitHub actions.\nPyScadeOne documentation"
    },
    {
        "objectID": "contrib",
        "href": "contrib.html#posting-issues",
        "title": "Contributing > Posting Issues",
        "section": "Posting Issues",
        "text": "Use the PyScadeOne Issues\npage to submit questions, report bugs, and request new features. When possible,\nuse one of the existing templates\nTo reach the project support team, email pyansys.core@ansys.com.\nPosting Issues"
    },
    {
        "objectID": "contrib",
        "href": "contrib.html#discussions",
        "title": "Contributing > Discussions",
        "section": "Discussions",
        "text": "Use the PyScadeOne Discussions\npage to ask questions, share ideas, and connect with other users.\nDiscussions"
    },
    {
        "objectID": "contrib",
        "href": "contrib.html#contributing-code",
        "title": "Contributing > Contributing code",
        "section": "Contributing code",
        "text": "As PyScadeOne is a component of the Scade One product, the development team\nis responsible for the code. Any contribution is analyzed and possibly\nintegrated by the development team.\nContributing code"
    },
    {
        "objectID": "contrib",
        "href": "contrib.html#getting-the-source-code",
        "title": "Contributing > Getting the source code",
        "section": "Getting the source code",
        "text": "Run this code to clone and install the latest version of PyScadeOne in development mode:\nGetting the source code"
    },
    {
        "objectID": "contrib",
        "href": "contrib.html#code-style",
        "title": "Contributing > Code style",
        "section": "Code style",
        "text": "PyScadeOne follows PEP8 standard as outlined in the PyAnsys Development Guide.\nCode style"
    },
    {
        "objectID": "contrib",
        "href": "contrib.html#testing",
        "title": "Contributing > Testing",
        "section": "Testing",
        "text": "PyScadeOne uses pytest. In the main directory use:\nTests are in tests folder. Please add your own tests for non-regression.\nTesting"
    },
    {
        "objectID": "api/svc/navigation/diagram",
        "href": "api/svc/navigation/diagram.html#diagram-navigation",
        "title": "Diagram navigation",
        "section": "Diagram navigation",
        "text": "The diagram navigation API allows to find the sources and the targets of a block in a diagram.\nOnly the DefBlock, ExprBlock, Block, and Block are concerned, as they are connected by Wire.\nThe sources and targets properties are defined for these classes.\nThe diagram_nav_ex example shows how to use these properties.\nDiagram navigation\nDefBlock\nExprBlock\nBlock\nBlock\nWire\nsources\ntargets"
    },
    {
        "objectID": "api/svc/navigation/diagram",
        "href": "api/svc/navigation/diagram.html#sources-property",
        "title": "Diagram navigation > Sources property",
        "section": "Sources property",
        "text": "The sources property provides the list of block sources, that is, all the blocks\nthat are connected to the block inputs.\nThe list is a tuple of the form: (diagram_object, source_adaptation, List[target_adaptation]|None), where:\nis a diagram object connected as a source of the current block.\nis an adaptation from the diagram_object, giving which outputs of the source\nand how the outputs are connected (index, name, and so on).\nNote that there may be no source_adaptation if there is a single connection.\nis an adaptation to the current object, giving which input of the current block\nand how the input is connected (index, name, and so on).\nOne may have several target_adaptation if the source is connected to several\ninputs. The target_adaptation is None if there is no specific adaptation.\nSources property\nsources"
    },
    {
        "objectID": "api/svc/navigation/diagram",
        "href": "api/svc/navigation/diagram.html#targets-property",
        "title": "Diagram navigation > Targets property",
        "section": "Targets property",
        "text": "The targets property provides the list of block targets, that is, all the blocks\nthat are connected to the block outputs.\nThe list is a tuple of the form: (diagram_object, source_adaptation, target_adaptation), where:\nis a diagram object connected as an output of the current block.\nis an adaptation from the diagram_object, giving which inputs of the target\nand how the inputs are connected (index, name, and so on).\nis an adaptation to the current object, giving which input and how the input is connected (index, name, and so on).\nTargets property\ntargets"
    },
    {
        "objectID": "user_guide/overview",
        "href": "user_guide/overview.html#overview",
        "title": "Overview",
        "section": "Overview",
        "text": "The PyScadeOne API is built around the ansys.scadeone.core.ScadeOne class.\nThis class is the entry point to other APIs to manipulate project and Swan models.\nHere is the class diagram showing the relationships between classes.\nA ScadeOne instance is created as follows:\nor it can be created using a context manager:\nThe install_dir parameter can be a str or a Path value.\nIt is necessary to set it if the project relies on Scade One standard libraries.\nPyScadeOne uses the ScadeOneException exception when an error occurs from the API.\nErrors, warnings, etc. are logged into the ‘pyscadeone.log file located in the\nfolder where the script is launched.\nCheck out section ref_modeler for more details.\nOverview\nansys.scadeone.core.ScadeOne\ninstall_dir\nstr\nPath"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "Getting started"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "PyScadeOne is compatible with any Python version greater than Python 3.9.\nIt has been tested with Python 3.9 and 3.12. It is distributed as a wheel package.\nTo install PyScadeOne use the command:\nYou may want to install PyScadeOne in a Python virtual environment. Please look at\nthe Python venv module.\nInstallation"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#requirements",
        "title": "Getting started > Requirements",
        "section": "Requirements",
        "text": "PyScadeOne requires .NET Runtime 8 on your host.\nPlease look at dotnet and at the installation scripts.\nPyScadeOne uses the following .NET libraries:\nFsYaccFsLex, required for the Swan language parser\nFSharp, required for the Swan language parser\nThe required DLLs are delivered with PyScadeOne.\nRequirements"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#supported-versions",
        "title": "Getting started > Supported versions",
        "section": "Supported versions",
        "text": "The versions for the supported format/code are:\nGraphical information format: 2.0\nSimulation data format: 1.1\nSwan language version: 2025.0\nSwan Test Harness: 1.1\nTest results format: 1.0\nSupported versions"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#quick-start",
        "title": "Getting started > Quick start",
        "section": "Quick start",
        "text": "Here is a small script showing how to load a Scade One project\nand get its model.\nMore details can be found in Modeler section,\nand in API sections.\nQuick start"
    },
    {
        "objectID": "examples/visitor/index",
        "href": "examples/visitor/index.html#visitor",
        "title": "Visitor",
        "section": "Visitor",
        "text": "This example shows how to use a visitor to retrieve cross-references between operators.\nVisitor"
    },
    {
        "objectID": "examples/visitor/index",
        "href": "examples/visitor/index.html#setup",
        "title": "Visitor > Setup",
        "section": "Setup",
        "text": "The same QuadFlightControl example is used. To setup the example, see\nref_QuadFlightControl_python_setup.\nAll modules are loaded:\nSetup\nQuadFlightControl"
    },
    {
        "objectID": "examples/visitor/index",
        "href": "examples/visitor/index.html#visitor-definition",
        "title": "Visitor > Visitor definition",
        "section": "Visitor definition",
        "text": "The ReferenceVisitor is derived from SwanVisitor class. One needs:\nan attribute to store the current visited operator\ndictionaries to store the cross-references between operators\nsome methods to retrieve the data\nThe following methods are implemented, overridden from the base class:\nthe SwanVisitor.visit_Operator(): it keeps track of the current operator that is the caller,\nand calls the default process to go-on.\nand SwanVisitor.visit_PathIdCall() which implements the name of a called operator, amongst the\npossible operator expressions. Here, we first assess that the call corresponds to an operator declaration.\nThen we create the cross-references (see ref_visitor_full_code).\nThe visitor is instantiated, and visits all modules in the model:\nFinally, the caller_stat() and called_stat() functions\nprint the results for a given operator. These functions use the\nReferenceVisitor.get_caller() and ReferenceVisitor.get_called()\nmethods (see ref_visitor_full_code).\nVisitor definition\nReferenceVisitor\nSwanVisitor\nSwanVisitor.visit_Operator()\nSwanVisitor.visit_PathIdCall()\ncaller_stat()\ncalled_stat()\nReferenceVisitor.get_caller()\nReferenceVisitor.get_called()"
    },
    {
        "objectID": "examples/visitor/index",
        "href": "examples/visitor/index.html#complete-example",
        "title": "Visitor > Complete example",
        "section": "Complete example",
        "text": "This is the complete script for the visitor section. Some logging support is shown\nin the code, as well as the use of the doctest Python library. If one runs the\nexample, nothing is shown as the test succeeds.\nComplete example\ndoctest"
    },
    {
        "objectID": "examples/generated_code/index",
        "href": "examples/generated_code/index.html#generated-code",
        "title": "Generated code",
        "section": "Generated code",
        "text": "This section describes how to access generated code data from model elements using\na Code Generation job (see ref_generated_code).\nThe same QuadFlightControl example is used. To setup the example see\nref_QuadFlightControl_python_setup.\nThe generated code related package is required:\nThe example uses the code generation job named CodeGen for which\na GeneratedCode object is created:\nBefore being able to manipulate the generated code data, it is necessary to check that\nthe CodeGen job executed (this is done from the Scade One IDE).\nTo check that the job has been executed, use the GeneratedCode.is_code_generated property.\nGenerated code\nQuadFlightControl\nGeneratedCode\nGeneratedCode.is_code_generated"
    },
    {
        "objectID": "examples/generated_code/index",
        "href": "examples/generated_code/index.html#model-operators",
        "title": "Generated code > Model operators",
        "section": "Model operators",
        "text": "The list of operators as they are defined in the model can be retrieved using the GeneratedCode.get_model_operators() method:\nA given operator can also be retrieved by its model path using\nthe GeneratedCode.get_model_operator() method.\nThe monomorphic instances of polymorphic operators can be retrieved using\nthe GeneratedCode.get_model_monomorphic_instance()\nand GeneratedCode.get_model_monomorphic_instances() methods:\nModel operators\nGeneratedCode.get_model_operators()\nGeneratedCode.get_model_operator()\nGeneratedCode.get_model_monomorphic_instance()\nGeneratedCode.get_model_monomorphic_instances()"
    },
    {
        "objectID": "examples/generated_code/index",
        "href": "examples/generated_code/index.html#get-generated-code-from-model-operators",
        "title": "Generated code > Get generated code from model operators",
        "section": "Get generated code from model operators",
        "text": "The ModelOperator object gives access to the different associated generated functions\n(for example the cycle function or the init function)\nFor example, to get the cycle function of the root operator:\nTo directly get the parameters of the cycle function:\nTo get the list of inputs and outputs with the name of the associated parameters in the cycle function:\nGet generated code from model operators"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#activations",
        "title": "Activations",
        "section": "Activations",
        "text": "This section describes the activate if and activate when constructs.\nActivations"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#activate-if",
        "title": "Activations > Activate if",
        "section": "Activate if",
        "text": "The activate if operator uses a tree of conditional expressions.\nThe classes to represent the operator are organized as follows:\nThe ActivateIf references the IfActivation which in turns stores\nall the if condition elsif condition else branches. Branches are in the order if, then elsif and else.\nThe class IfActivationBranch stores an if, or elsif or else branch with\nits condition (but for else branch) and its associated computation (data_def) or another\ndecision tree.\nBases: DefByCase\nActivate if operator definition:\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nActivation branch of activate.\nTrue when the object is an equation.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLeft-hand side of the equation, may be None.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nReturn name or None if no name.\nOwner of current Swan construct.\nBases: SwanItem\nList of if_activation branches as a list of IfActivationBranch.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturn branches of if_activation.\nThere must be at least two branches, the if and the else branches.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nActivation branches must be at least if and else, and elsif has a condition.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nStores a branch of an if_activation.\nA branch is:\nif expr then ifte_branch, or\nelsif expr then ifte_branch, or\nelse ifte_branch\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nBranch activation branch.\nBranch condition, None for else branch.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nBase class for IfteDataDef and IfteIfActivation classes.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: IfteBranch\nifte_branch of an activate if as a data definition. See ActivateIf.\nifte_branch ::= data_def\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: IfteBranch\nifte_branch of an activate if as an if_activation. See ActivateIf.\nifte_branch ::= if_activation\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nIf activation.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nActivate if\nActivateIf\nIfActivation\nIfActivationBranch\nDefByCase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nIfActivationBranch\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nIfteDataDef\nIfteIfActivation\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nIfteBranch\nActivateIf\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nIfteBranch\nActivateIf\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf",
        "title": "Activations > Activate if > ActivateIf",
        "section": "Activate if > ActivateIf",
        "text": "class ansys.scadeone.core.swan.ActivateIf(if_activation: IfActivation, lhs: EquationLHS | None = None, name: Luid | None = None, is_equation: bool = False)\n\nBases: DefByCase\n\nActivate if operator definition:\n\nselect_activation ::= activate [[ LUID ]] if_activation\n\nif_activation ::= if expr then ifte_branch\n\n{{ elsif expr then ifte_branch }}\n\nelse ifte_branch\n\nifte_branch ::= data_def | if_activation\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty if_activation: IfActivation\n\nActivation branch of activate.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_equation: bool\n\nTrue when the object is an equation.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty lhs: EquationLHS | None\n\nLeft-hand side of the equation, may be None.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty name: Luid | None\n\nReturn name or None if no name.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf.get_full_path",
        "title": "Activations > Activate if > get_full_path",
        "section": "Activate if > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf.set_owner",
        "title": "Activations > Activate if > set_owner",
        "section": "Activate if > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf.if_activation",
        "title": "Activations > Activate if > if_activation",
        "section": "Activate if > if_activation",
        "text": "property if_activation: IfActivation\n\nActivation branch of activate.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf.is_equation",
        "title": "Activations > Activate if > is_equation",
        "section": "Activate if > is_equation",
        "text": "property is_equation: bool\n\nTrue when the object is an equation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf.is_protected",
        "title": "Activations > Activate if > is_protected",
        "section": "Activate if > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf.lhs",
        "title": "Activations > Activate if > lhs",
        "section": "Activate if > lhs",
        "text": "property lhs: EquationLHS | None\n\nLeft-hand side of the equation, may be None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf.model",
        "title": "Activations > Activate if > model",
        "section": "Activate if > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf.module",
        "title": "Activations > Activate if > module",
        "section": "Activate if > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf.name",
        "title": "Activations > Activate if > name",
        "section": "Activate if > name",
        "text": "property name: Luid | None\n\nReturn name or None if no name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateIf.owner",
        "title": "Activations > Activate if > owner",
        "section": "Activate if > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivation",
        "title": "Activations > Activate if > IfActivation",
        "section": "Activate if > IfActivation",
        "text": "class ansys.scadeone.core.swan.IfActivation(branches: List[IfActivationBranch])\n\nBases: SwanItem\n\nList of if_activation branches as a list of IfActivationBranch.\n\nif_activation ::= if expr then ifte_branch\n\n{{ elsif expr then ifte_branch }}\n\nelse ifte_branch\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty branches: List[IfActivationBranch]\n\nReturn branches of if_activation.\nThere must be at least two branches, the if and the else branches.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_valid: bool\n\nActivation branches must be at least if and else, and elsif has a condition.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivation.get_full_path",
        "title": "Activations > Activate if > get_full_path",
        "section": "Activate if > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivation.set_owner",
        "title": "Activations > Activate if > set_owner",
        "section": "Activate if > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivation.branches",
        "title": "Activations > Activate if > branches",
        "section": "Activate if > branches",
        "text": "property branches: List[IfActivationBranch]\n\nReturn branches of if_activation.\nThere must be at least two branches, the if and the else branches.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivation.is_protected",
        "title": "Activations > Activate if > is_protected",
        "section": "Activate if > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivation.is_valid",
        "title": "Activations > Activate if > is_valid",
        "section": "Activate if > is_valid",
        "text": "property is_valid: bool\n\nActivation branches must be at least if and else, and elsif has a condition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivation.model",
        "title": "Activations > Activate if > model",
        "section": "Activate if > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivation.module",
        "title": "Activations > Activate if > module",
        "section": "Activate if > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivation.owner",
        "title": "Activations > Activate if > owner",
        "section": "Activate if > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivationBranch",
        "title": "Activations > Activate if > IfActivationBranch",
        "section": "Activate if > IfActivationBranch",
        "text": "class ansys.scadeone.core.swan.IfActivationBranch(condition: Expression | None, branch: IfteBranch)\n\nBases: SwanItem\n\nStores a branch of an if_activation.\n\nA branch is:\n\nif expr then ifte_branch, or\n\nelsif expr then ifte_branch, or\n\nelse ifte_branch\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty branch: IfteBranch\n\nBranch activation branch.\n\n!! processed by numpydoc !!\n\n\n\nproperty condition: Expression | None\n\nBranch condition, None for else branch.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivationBranch.get_full_path",
        "title": "Activations > Activate if > get_full_path",
        "section": "Activate if > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivationBranch.set_owner",
        "title": "Activations > Activate if > set_owner",
        "section": "Activate if > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivationBranch.branch",
        "title": "Activations > Activate if > branch",
        "section": "Activate if > branch",
        "text": "property branch: IfteBranch\n\nBranch activation branch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivationBranch.condition",
        "title": "Activations > Activate if > condition",
        "section": "Activate if > condition",
        "text": "property condition: Expression | None\n\nBranch condition, None for else branch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivationBranch.is_protected",
        "title": "Activations > Activate if > is_protected",
        "section": "Activate if > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivationBranch.model",
        "title": "Activations > Activate if > model",
        "section": "Activate if > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivationBranch.module",
        "title": "Activations > Activate if > module",
        "section": "Activate if > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfActivationBranch.owner",
        "title": "Activations > Activate if > owner",
        "section": "Activate if > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteBranch",
        "title": "Activations > Activate if > IfteBranch",
        "section": "Activate if > IfteBranch",
        "text": "class ansys.scadeone.core.swan.IfteBranch\n\nBases: SwanItem\n\nBase class for IfteDataDef and IfteIfActivation classes.\n\nifte_branch ::= data_def\n\n| if_activation\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteBranch.get_full_path",
        "title": "Activations > Activate if > get_full_path",
        "section": "Activate if > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteBranch.set_owner",
        "title": "Activations > Activate if > set_owner",
        "section": "Activate if > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteBranch.is_protected",
        "title": "Activations > Activate if > is_protected",
        "section": "Activate if > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteBranch.model",
        "title": "Activations > Activate if > model",
        "section": "Activate if > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteBranch.module",
        "title": "Activations > Activate if > module",
        "section": "Activate if > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteBranch.owner",
        "title": "Activations > Activate if > owner",
        "section": "Activate if > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteDataDef",
        "title": "Activations > Activate if > IfteDataDef",
        "section": "Activate if > IfteDataDef",
        "text": "class ansys.scadeone.core.swan.IfteDataDef(data_def: Equation | Scope)\n\nBases: IfteBranch\n\nifte_branch of an activate if as a data definition. See ActivateIf.\n\nifte_branch ::= data_def\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteDataDef.get_full_path",
        "title": "Activations > Activate if > get_full_path",
        "section": "Activate if > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteDataDef.set_owner",
        "title": "Activations > Activate if > set_owner",
        "section": "Activate if > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteDataDef.is_protected",
        "title": "Activations > Activate if > is_protected",
        "section": "Activate if > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteDataDef.model",
        "title": "Activations > Activate if > model",
        "section": "Activate if > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteDataDef.module",
        "title": "Activations > Activate if > module",
        "section": "Activate if > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteDataDef.owner",
        "title": "Activations > Activate if > owner",
        "section": "Activate if > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteIfActivation",
        "title": "Activations > Activate if > IfteIfActivation",
        "section": "Activate if > IfteIfActivation",
        "text": "class ansys.scadeone.core.swan.IfteIfActivation(if_activation: IfActivation)\n\nBases: IfteBranch\n\nifte_branch of an activate if as an if_activation. See ActivateIf.\n\nifte_branch ::= if_activation\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty if_activation: IfActivation\n\nIf activation.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteIfActivation.get_full_path",
        "title": "Activations > Activate if > get_full_path",
        "section": "Activate if > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteIfActivation.set_owner",
        "title": "Activations > Activate if > set_owner",
        "section": "Activate if > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteIfActivation.if_activation",
        "title": "Activations > Activate if > if_activation",
        "section": "Activate if > if_activation",
        "text": "property if_activation: IfActivation\n\nIf activation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteIfActivation.is_protected",
        "title": "Activations > Activate if > is_protected",
        "section": "Activate if > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteIfActivation.model",
        "title": "Activations > Activate if > model",
        "section": "Activate if > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteIfActivation.module",
        "title": "Activations > Activate if > module",
        "section": "Activate if > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.IfteIfActivation.owner",
        "title": "Activations > Activate if > owner",
        "section": "Activate if > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#activate-when",
        "title": "Activations > Activate when",
        "section": "Activate when",
        "text": "Bases: DefByCase\nActivate when operator definition.\nThere must be at least one branch.\nThis can be checked with the is_valid() method.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nActivate when branches.\nActivate when condition.\nTrue when the object is an equation.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when there is at least one branch.\nLeft-hand side of the equation, may be None.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nReturn name or None if no name.\nOwner of current Swan construct.\nBases: SwanItem\nStores a branch of a match_activation.\nA branch is:\n| pattern_with_capture : data_def\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nBranch data definition.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBranch pattern.\nActivate when\nDefByCase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen",
        "title": "Activations > Activate when > ActivateWhen",
        "section": "Activate when > ActivateWhen",
        "text": "class ansys.scadeone.core.swan.ActivateWhen(condition: Expression, branches: List[ActivateWhenBranch], lhs: EquationLHS | None = None, name: str | None = None, is_equation: bool = False)\n\nBases: DefByCase\n\nActivate when operator definition.\n\nThere must be at least one branch.\nThis can be checked with the is_valid() method.\n\nselect_activation ::= activate [[ LUID ]] match_activation\n\nmatch_activation ::= when expr match\n\n{{ | pattern_with_capture : data_def }}+\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty branches: List[ActivateWhenBranch]\n\nActivate when branches.\n\n!! processed by numpydoc !!\n\n\n\nproperty condition: Expression\n\nActivate when condition.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_equation: bool\n\nTrue when the object is an equation.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_valid: bool\n\nTrue when there is at least one branch.\n\n!! processed by numpydoc !!\n\n\n\nproperty lhs: EquationLHS | None\n\nLeft-hand side of the equation, may be None.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty name: Luid | None\n\nReturn name or None if no name.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.get_full_path",
        "title": "Activations > Activate when > get_full_path",
        "section": "Activate when > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.set_owner",
        "title": "Activations > Activate when > set_owner",
        "section": "Activate when > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.branches",
        "title": "Activations > Activate when > branches",
        "section": "Activate when > branches",
        "text": "property branches: List[ActivateWhenBranch]\n\nActivate when branches.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.condition",
        "title": "Activations > Activate when > condition",
        "section": "Activate when > condition",
        "text": "property condition: Expression\n\nActivate when condition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.is_equation",
        "title": "Activations > Activate when > is_equation",
        "section": "Activate when > is_equation",
        "text": "property is_equation: bool\n\nTrue when the object is an equation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.is_protected",
        "title": "Activations > Activate when > is_protected",
        "section": "Activate when > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.is_valid",
        "title": "Activations > Activate when > is_valid",
        "section": "Activate when > is_valid",
        "text": "property is_valid: bool\n\nTrue when there is at least one branch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.lhs",
        "title": "Activations > Activate when > lhs",
        "section": "Activate when > lhs",
        "text": "property lhs: EquationLHS | None\n\nLeft-hand side of the equation, may be None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.model",
        "title": "Activations > Activate when > model",
        "section": "Activate when > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.module",
        "title": "Activations > Activate when > module",
        "section": "Activate when > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.name",
        "title": "Activations > Activate when > name",
        "section": "Activate when > name",
        "text": "property name: Luid | None\n\nReturn name or None if no name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhen.owner",
        "title": "Activations > Activate when > owner",
        "section": "Activate when > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhenBranch",
        "title": "Activations > Activate when > ActivateWhenBranch",
        "section": "Activate when > ActivateWhenBranch",
        "text": "class ansys.scadeone.core.swan.ActivateWhenBranch(pattern: Pattern, data_def: Equation | Scope)\n\nBases: SwanItem\n\nStores a branch of a match_activation.\n\nA branch is:\n| pattern_with_capture : data_def\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data_def: Equation | Scope\n\nBranch data definition.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pattern: Pattern\n\nBranch pattern.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhenBranch.get_full_path",
        "title": "Activations > Activate when > get_full_path",
        "section": "Activate when > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhenBranch.set_owner",
        "title": "Activations > Activate when > set_owner",
        "section": "Activate when > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhenBranch.data_def",
        "title": "Activations > Activate when > data_def",
        "section": "Activate when > data_def",
        "text": "property data_def: Equation | Scope\n\nBranch data definition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhenBranch.is_protected",
        "title": "Activations > Activate when > is_protected",
        "section": "Activate when > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhenBranch.model",
        "title": "Activations > Activate when > model",
        "section": "Activate when > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhenBranch.module",
        "title": "Activations > Activate when > module",
        "section": "Activate when > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhenBranch.owner",
        "title": "Activations > Activate when > owner",
        "section": "Activate when > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/activation",
        "href": "api/language/operator/activation.html#ansys.scadeone.core.swan.ActivateWhenBranch.pattern",
        "title": "Activations > Activate when > pattern",
        "section": "Activate when > pattern",
        "text": "property pattern: Pattern\n\nBranch pattern.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#global-declarations",
        "title": "Global declarations",
        "section": "Global declarations",
        "text": "This section describes the classes that represent the\nglobal declarations of a Swan program: const, type,\nsensor and group constructs.\nIn Swan, a global declaration can contain several declarations. One can have\nfor instance: const C1: int32; C2: int32; or const C1: int32; const C2: int32;.\nThe Swan editor produces the second form, but having a list of declarations\nis correct.\nBases: SwanItem\nBase class for declarations.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nLanguage item identifier.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: ModuleItem\nAbstract class for global declarations:\ntype declaration list\nconstant declaration list\nsensor declaration list\ngroup declarations\nuser operator declaration (without body, in interface)\nuser operator definition (with body)\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nGlobal declarations\nconst C1: int32; C2: int32;\nconst C1: int32; const C2: int32;\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nModuleItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.Declaration",
        "title": "Global declarations > Global declarations > Declaration",
        "section": "Global declarations > Declaration",
        "text": "class ansys.scadeone.core.swan.Declaration(id: Identifier)\n\nBases: SwanItem\n\nBase class for declarations.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.Declaration.get_full_path",
        "title": "Global declarations > Global declarations > get_full_path",
        "section": "Global declarations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.Declaration.set_owner",
        "title": "Global declarations > Global declarations > set_owner",
        "section": "Global declarations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.Declaration.id",
        "title": "Global declarations > Global declarations > id",
        "section": "Global declarations > id",
        "text": "property id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.Declaration.is_protected",
        "title": "Global declarations > Global declarations > is_protected",
        "section": "Global declarations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.Declaration.model",
        "title": "Global declarations > Global declarations > model",
        "section": "Global declarations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.Declaration.module",
        "title": "Global declarations > Global declarations > module",
        "section": "Global declarations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.Declaration.owner",
        "title": "Global declarations > Global declarations > owner",
        "section": "Global declarations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GlobalDeclaration",
        "title": "Global declarations > Global declarations > GlobalDeclaration",
        "section": "Global declarations > GlobalDeclaration",
        "text": "class ansys.scadeone.core.swan.GlobalDeclaration\n\nBases: ModuleItem\n\nAbstract class for global declarations:\n\ntype declaration list\n\nconstant declaration list\n\nsensor declaration list\n\ngroup declarations\n\nuser operator declaration (without body, in interface)\n\nuser operator definition (with body)\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GlobalDeclaration.get_full_path",
        "title": "Global declarations > Global declarations > get_full_path",
        "section": "Global declarations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GlobalDeclaration.set_owner",
        "title": "Global declarations > Global declarations > set_owner",
        "section": "Global declarations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GlobalDeclaration.is_protected",
        "title": "Global declarations > Global declarations > is_protected",
        "section": "Global declarations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GlobalDeclaration.model",
        "title": "Global declarations > Global declarations > model",
        "section": "Global declarations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GlobalDeclaration.module",
        "title": "Global declarations > Global declarations > module",
        "section": "Global declarations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GlobalDeclaration.owner",
        "title": "Global declarations > Global declarations > owner",
        "section": "Global declarations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#types",
        "title": "Global declarations > Types",
        "section": "Types",
        "text": "Bases: GlobalDeclaration\nType declarations: type {{ type_decl ; }}.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nDeclared types.\nSee also type for details on type definitions.\nTypes\nGlobalDeclaration\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeDeclarations",
        "title": "Global declarations > Types > TypeDeclarations",
        "section": "Types > TypeDeclarations",
        "text": "class ansys.scadeone.core.swan.TypeDeclarations(types: List[TypeDecl])\n\nBases: GlobalDeclaration\n\nType declarations: type {{ type_decl ; }}.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty types: List[TypeDecl]\n\nDeclared types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeDeclarations.get_full_path",
        "title": "Global declarations > Types > get_full_path",
        "section": "Types > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeDeclarations.set_owner",
        "title": "Global declarations > Types > set_owner",
        "section": "Types > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeDeclarations.is_protected",
        "title": "Global declarations > Types > is_protected",
        "section": "Types > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeDeclarations.model",
        "title": "Global declarations > Types > model",
        "section": "Types > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeDeclarations.module",
        "title": "Global declarations > Types > module",
        "section": "Types > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeDeclarations.owner",
        "title": "Global declarations > Types > owner",
        "section": "Types > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeDeclarations.types",
        "title": "Global declarations > Types > types",
        "section": "Types > types",
        "text": "property types: List[TypeDecl]\n\nDeclared types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#constants",
        "title": "Global declarations > Constants",
        "section": "Constants",
        "text": "Bases: Declaration\nConstant declaration, with an id, a type, and an optional expression.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nLanguage item identifier.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nType of constant.\nConstant optional value. None if undefined.\nBases: GlobalDeclaration\nConstant declarations: constant {{ constant_decl ; }}.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nDeclared constants.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nConstants\nDeclaration\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nGlobalDeclaration\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDecl",
        "title": "Global declarations > Constants > ConstDecl",
        "section": "Constants > ConstDecl",
        "text": "class ansys.scadeone.core.swan.ConstDecl(id: Identifier, type: TypeExpression | None, value: Expression | None = None)\n\nBases: Declaration\n\nConstant declaration, with an id, a type, and an optional expression.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty type: TypeExpression | None\n\nType of constant.\n\n!! processed by numpydoc !!\n\n\n\nproperty value: Expression | None\n\nConstant optional value. None if undefined.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDecl.get_full_path",
        "title": "Global declarations > Constants > get_full_path",
        "section": "Constants > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDecl.set_owner",
        "title": "Global declarations > Constants > set_owner",
        "section": "Constants > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDecl.id",
        "title": "Global declarations > Constants > id",
        "section": "Constants > id",
        "text": "property id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDecl.is_protected",
        "title": "Global declarations > Constants > is_protected",
        "section": "Constants > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDecl.model",
        "title": "Global declarations > Constants > model",
        "section": "Constants > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDecl.module",
        "title": "Global declarations > Constants > module",
        "section": "Constants > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDecl.owner",
        "title": "Global declarations > Constants > owner",
        "section": "Constants > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDecl.type",
        "title": "Global declarations > Constants > type",
        "section": "Constants > type",
        "text": "property type: TypeExpression | None\n\nType of constant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDecl.value",
        "title": "Global declarations > Constants > value",
        "section": "Constants > value",
        "text": "property value: Expression | None\n\nConstant optional value. None if undefined.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDeclarations",
        "title": "Global declarations > Constants > ConstDeclarations",
        "section": "Constants > ConstDeclarations",
        "text": "class ansys.scadeone.core.swan.ConstDeclarations(constants: List[ConstDecl])\n\nBases: GlobalDeclaration\n\nConstant declarations: constant {{ constant_decl ; }}.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty constants: List[ConstDecl]\n\nDeclared constants.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDeclarations.get_full_path",
        "title": "Global declarations > Constants > get_full_path",
        "section": "Constants > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDeclarations.set_owner",
        "title": "Global declarations > Constants > set_owner",
        "section": "Constants > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDeclarations.constants",
        "title": "Global declarations > Constants > constants",
        "section": "Constants > constants",
        "text": "property constants: List[ConstDecl]\n\nDeclared constants.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDeclarations.is_protected",
        "title": "Global declarations > Constants > is_protected",
        "section": "Constants > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDeclarations.model",
        "title": "Global declarations > Constants > model",
        "section": "Constants > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDeclarations.module",
        "title": "Global declarations > Constants > module",
        "section": "Constants > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ConstDeclarations.owner",
        "title": "Global declarations > Constants > owner",
        "section": "Constants > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#sensors",
        "title": "Global declarations > Sensors",
        "section": "Sensors",
        "text": "Bases: Declaration\nSensor declaration with an id and a type.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nLanguage item identifier.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nSensor type.\nBases: GlobalDeclaration\nSensor declarations: sensor {{ sensor_decl ; }}.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nDeclared sensors.\nSensors\nDeclaration\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nGlobalDeclaration\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDecl",
        "title": "Global declarations > Sensors > SensorDecl",
        "section": "Sensors > SensorDecl",
        "text": "class ansys.scadeone.core.swan.SensorDecl(id: Identifier, type: TypeExpression)\n\nBases: Declaration\n\nSensor declaration with an id and a type.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty type: TypeExpression\n\nSensor type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDecl.get_full_path",
        "title": "Global declarations > Sensors > get_full_path",
        "section": "Sensors > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDecl.set_owner",
        "title": "Global declarations > Sensors > set_owner",
        "section": "Sensors > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDecl.id",
        "title": "Global declarations > Sensors > id",
        "section": "Sensors > id",
        "text": "property id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDecl.is_protected",
        "title": "Global declarations > Sensors > is_protected",
        "section": "Sensors > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDecl.model",
        "title": "Global declarations > Sensors > model",
        "section": "Sensors > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDecl.module",
        "title": "Global declarations > Sensors > module",
        "section": "Sensors > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDecl.owner",
        "title": "Global declarations > Sensors > owner",
        "section": "Sensors > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDecl.type",
        "title": "Global declarations > Sensors > type",
        "section": "Sensors > type",
        "text": "property type: TypeExpression\n\nSensor type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDeclarations",
        "title": "Global declarations > Sensors > SensorDeclarations",
        "section": "Sensors > SensorDeclarations",
        "text": "class ansys.scadeone.core.swan.SensorDeclarations(sensors: List[SensorDecl])\n\nBases: GlobalDeclaration\n\nSensor declarations: sensor {{ sensor_decl ; }}.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty sensors: List[SensorDecl]\n\nDeclared sensors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDeclarations.get_full_path",
        "title": "Global declarations > Sensors > get_full_path",
        "section": "Sensors > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDeclarations.set_owner",
        "title": "Global declarations > Sensors > set_owner",
        "section": "Sensors > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDeclarations.is_protected",
        "title": "Global declarations > Sensors > is_protected",
        "section": "Sensors > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDeclarations.model",
        "title": "Global declarations > Sensors > model",
        "section": "Sensors > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDeclarations.module",
        "title": "Global declarations > Sensors > module",
        "section": "Sensors > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDeclarations.owner",
        "title": "Global declarations > Sensors > owner",
        "section": "Sensors > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.SensorDeclarations.sensors",
        "title": "Global declarations > Sensors > sensors",
        "section": "Sensors > sensors",
        "text": "property sensors: List[SensorDecl]\n\nDeclared sensors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#groups",
        "title": "Global declarations > Groups",
        "section": "Groups",
        "text": "A GroupDecl object defines a group declaration, with a name and\na GroupTypeExpression for the type.\nA GroupTypeExpression can be:\na type expression, represented by a TypeGroupTypeExpressionGroupType instance\nor a list of GroupTypeExpression items, decomposed into two lists:\na positional list of GroupTypeExpression items\nfollowed by a list of named GroupTypeExpression items, represented\nwith NamedGroupTypeExpression instances.\nBases: Declaration\nGroup declaration with an id and a type.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nLanguage item identifier.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nGroup type expression.\nBases: SwanItem\nBase class for group type expressions.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: GroupTypeExpression\nGroup type expression: group_type_expr ::= type_expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nType expression of group item\nBases: GroupTypeExpression\nA named group type expression, used in GroupTypeExpressionList as id : group_type_expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLabel of named group item.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nType of named group item.\nBases: GroupTypeExpression\nGroup list made of positional items followed by named items.\nEach item is a group type expression.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturns all items\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nReturn named group items\nOwner of current Swan construct.\nReturn positional group items\nBases: GlobalDeclaration\nGroup declarations: group {{ group_decl ; }}.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nDeclared groups.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nGroups\nGroupDecl\nGroupTypeExpression\nGroupTypeExpression\nTypeGroupTypeExpressionGroupType\nGroupTypeExpression\nGroupTypeExpression\nGroupTypeExpression\nNamedGroupTypeExpression\nDeclaration\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nGroupTypeExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nGroupTypeExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nGroupTypeExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nGlobalDeclaration\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDecl",
        "title": "Global declarations > Groups > GroupDecl",
        "section": "Groups > GroupDecl",
        "text": "class ansys.scadeone.core.swan.GroupDecl(id: Identifier, type: GroupTypeExpression)\n\nBases: Declaration\n\nGroup declaration with an id and a type.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty type: GroupTypeExpression\n\nGroup type expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDecl.get_full_path",
        "title": "Global declarations > Groups > get_full_path",
        "section": "Groups > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDecl.set_owner",
        "title": "Global declarations > Groups > set_owner",
        "section": "Groups > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDecl.id",
        "title": "Global declarations > Groups > id",
        "section": "Groups > id",
        "text": "property id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDecl.is_protected",
        "title": "Global declarations > Groups > is_protected",
        "section": "Groups > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDecl.model",
        "title": "Global declarations > Groups > model",
        "section": "Groups > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDecl.module",
        "title": "Global declarations > Groups > module",
        "section": "Groups > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDecl.owner",
        "title": "Global declarations > Groups > owner",
        "section": "Groups > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDecl.type",
        "title": "Global declarations > Groups > type",
        "section": "Groups > type",
        "text": "property type: GroupTypeExpression\n\nGroup type expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpression",
        "title": "Global declarations > Groups > GroupTypeExpression",
        "section": "Groups > GroupTypeExpression",
        "text": "class ansys.scadeone.core.swan.GroupTypeExpression\n\nBases: SwanItem\n\nBase class for group type expressions.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpression.get_full_path",
        "title": "Global declarations > Groups > get_full_path",
        "section": "Groups > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpression.set_owner",
        "title": "Global declarations > Groups > set_owner",
        "section": "Groups > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpression.is_protected",
        "title": "Global declarations > Groups > is_protected",
        "section": "Groups > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpression.model",
        "title": "Global declarations > Groups > model",
        "section": "Groups > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpression.module",
        "title": "Global declarations > Groups > module",
        "section": "Groups > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpression.owner",
        "title": "Global declarations > Groups > owner",
        "section": "Groups > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeGroupTypeExpression",
        "title": "Global declarations > Groups > TypeGroupTypeExpression",
        "section": "Groups > TypeGroupTypeExpression",
        "text": "class ansys.scadeone.core.swan.TypeGroupTypeExpression(type: TypeExpression)\n\nBases: GroupTypeExpression\n\nGroup type expression: group_type_expr ::= type_expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty type\n\nType expression of group item\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeGroupTypeExpression.get_full_path",
        "title": "Global declarations > Groups > get_full_path",
        "section": "Groups > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeGroupTypeExpression.set_owner",
        "title": "Global declarations > Groups > set_owner",
        "section": "Groups > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeGroupTypeExpression.is_protected",
        "title": "Global declarations > Groups > is_protected",
        "section": "Groups > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeGroupTypeExpression.model",
        "title": "Global declarations > Groups > model",
        "section": "Groups > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeGroupTypeExpression.module",
        "title": "Global declarations > Groups > module",
        "section": "Groups > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeGroupTypeExpression.owner",
        "title": "Global declarations > Groups > owner",
        "section": "Groups > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.TypeGroupTypeExpression.type",
        "title": "Global declarations > Groups > type",
        "section": "Groups > type",
        "text": "property type\n\nType expression of group item\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.NamedGroupTypeExpression",
        "title": "Global declarations > Groups > NamedGroupTypeExpression",
        "section": "Groups > NamedGroupTypeExpression",
        "text": "class ansys.scadeone.core.swan.NamedGroupTypeExpression(label: Identifier, type: GroupTypeExpression)\n\nBases: GroupTypeExpression\n\nA named group type expression, used in GroupTypeExpressionList as id : group_type_expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty label\n\nLabel of named group item.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty type\n\nType of named group item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.NamedGroupTypeExpression.get_full_path",
        "title": "Global declarations > Groups > get_full_path",
        "section": "Groups > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.NamedGroupTypeExpression.set_owner",
        "title": "Global declarations > Groups > set_owner",
        "section": "Groups > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.NamedGroupTypeExpression.is_protected",
        "title": "Global declarations > Groups > is_protected",
        "section": "Groups > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.NamedGroupTypeExpression.label",
        "title": "Global declarations > Groups > label",
        "section": "Groups > label",
        "text": "property label\n\nLabel of named group item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.NamedGroupTypeExpression.model",
        "title": "Global declarations > Groups > model",
        "section": "Groups > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.NamedGroupTypeExpression.module",
        "title": "Global declarations > Groups > module",
        "section": "Groups > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.NamedGroupTypeExpression.owner",
        "title": "Global declarations > Groups > owner",
        "section": "Groups > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.NamedGroupTypeExpression.type",
        "title": "Global declarations > Groups > type",
        "section": "Groups > type",
        "text": "property type\n\nType of named group item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpressionList",
        "title": "Global declarations > Groups > GroupTypeExpressionList",
        "section": "Groups > GroupTypeExpressionList",
        "text": "class ansys.scadeone.core.swan.GroupTypeExpressionList(positional: List[GroupTypeExpression], named: List[NamedGroupTypeExpression])\n\nBases: GroupTypeExpression\n\nGroup list made of positional items followed by named items.\nEach item is a group type expression.\n\ngroup_type_expr ::= ( group_type_expr {{ , group_type_expr }}\n\n{{ , id : group_type_expr }} )\n\n| ( id : group_type_expr {{ , id : group_type_expr }} )\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty items: Generator[GroupTypeExpression, None, None]\n\nReturns all items\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty named: Generator[NamedGroupTypeExpression, None, None]\n\nReturn named group items\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty positional: Generator[GroupTypeExpression, None, None]\n\nReturn positional group items\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpressionList.get_full_path",
        "title": "Global declarations > Groups > get_full_path",
        "section": "Groups > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpressionList.set_owner",
        "title": "Global declarations > Groups > set_owner",
        "section": "Groups > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpressionList.is_protected",
        "title": "Global declarations > Groups > is_protected",
        "section": "Groups > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpressionList.items",
        "title": "Global declarations > Groups > items",
        "section": "Groups > items",
        "text": "property items: Generator[GroupTypeExpression, None, None]\n\nReturns all items\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpressionList.model",
        "title": "Global declarations > Groups > model",
        "section": "Groups > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpressionList.module",
        "title": "Global declarations > Groups > module",
        "section": "Groups > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpressionList.named",
        "title": "Global declarations > Groups > named",
        "section": "Groups > named",
        "text": "property named: Generator[NamedGroupTypeExpression, None, None]\n\nReturn named group items\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpressionList.owner",
        "title": "Global declarations > Groups > owner",
        "section": "Groups > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupTypeExpressionList.positional",
        "title": "Global declarations > Groups > positional",
        "section": "Groups > positional",
        "text": "property positional: Generator[GroupTypeExpression, None, None]\n\nReturn positional group items\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDeclarations",
        "title": "Global declarations > Groups > GroupDeclarations",
        "section": "Groups > GroupDeclarations",
        "text": "class ansys.scadeone.core.swan.GroupDeclarations(groups: List[GroupDecl])\n\nBases: GlobalDeclaration\n\nGroup declarations: group {{ group_decl ; }}.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty groups: List[GroupDecl]\n\nDeclared groups.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDeclarations.get_full_path",
        "title": "Global declarations > Groups > get_full_path",
        "section": "Groups > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDeclarations.set_owner",
        "title": "Global declarations > Groups > set_owner",
        "section": "Groups > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDeclarations.groups",
        "title": "Global declarations > Groups > groups",
        "section": "Groups > groups",
        "text": "property groups: List[GroupDecl]\n\nDeclared groups.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDeclarations.is_protected",
        "title": "Global declarations > Groups > is_protected",
        "section": "Groups > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDeclarations.model",
        "title": "Global declarations > Groups > model",
        "section": "Groups > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDeclarations.module",
        "title": "Global declarations > Groups > module",
        "section": "Groups > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.GroupDeclarations.owner",
        "title": "Global declarations > Groups > owner",
        "section": "Groups > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#protected-declarations",
        "title": "Global declarations > Protected declarations",
        "section": "Protected declarations",
        "text": "Bases: ProtectedItem, GlobalDeclaration\nProtected declaration.\nFull path of Swan construct.\nCheck if protected data has the specified markup.\nString markup.\nTrue when instance markup is same as parameter.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nProtected data between markups.\nProtected data.\nProtected const declaration.\nProtected group declaration.\nTell if item is syntactically protected and provided as a string.\nProtected sensor declaration.\nProtected type declaration.\nProtected operator declaration.\nNote: operator declaration within {text% … %text} is parsed.\nProtection markup.\nMarkup string.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nProtected declarations\nProtectedItem\nGlobalDeclaration\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\npython:str\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl",
        "title": "Global declarations > Protected declarations > ProtectedDecl",
        "section": "Protected declarations > ProtectedDecl",
        "text": "class ansys.scadeone.core.swan.ProtectedDecl(markup: str, data: str)\n\nBases: ProtectedItem, GlobalDeclaration\n\nProtected declaration.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nhas_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_const: bool\n\nProtected const declaration.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_group: bool\n\nProtected group declaration.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_sensor: bool\n\nProtected sensor declaration.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_type: bool\n\nProtected type declaration.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_user_operator: bool\n\nProtected operator declaration.\n\nNote: operator declaration within {text% … %text} is parsed.\n\n!! processed by numpydoc !!\n\n\n\nproperty markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.get_full_path",
        "title": "Global declarations > Protected declarations > get_full_path",
        "section": "Protected declarations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.has_markup",
        "title": "Global declarations > Protected declarations > has_markup",
        "section": "Protected declarations > has_markup",
        "text": "has_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.set_owner",
        "title": "Global declarations > Protected declarations > set_owner",
        "section": "Protected declarations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.data",
        "title": "Global declarations > Protected declarations > data",
        "section": "Protected declarations > data",
        "text": "property data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.is_const",
        "title": "Global declarations > Protected declarations > is_const",
        "section": "Protected declarations > is_const",
        "text": "property is_const: bool\n\nProtected const declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.is_group",
        "title": "Global declarations > Protected declarations > is_group",
        "section": "Protected declarations > is_group",
        "text": "property is_group: bool\n\nProtected group declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.is_protected",
        "title": "Global declarations > Protected declarations > is_protected",
        "section": "Protected declarations > is_protected",
        "text": "property is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.is_sensor",
        "title": "Global declarations > Protected declarations > is_sensor",
        "section": "Protected declarations > is_sensor",
        "text": "property is_sensor: bool\n\nProtected sensor declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.is_type",
        "title": "Global declarations > Protected declarations > is_type",
        "section": "Protected declarations > is_type",
        "text": "property is_type: bool\n\nProtected type declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.is_user_operator",
        "title": "Global declarations > Protected declarations > is_user_operator",
        "section": "Protected declarations > is_user_operator",
        "text": "property is_user_operator: bool\n\nProtected operator declaration.\n\nNote: operator declaration within {text% … %text} is parsed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.markup",
        "title": "Global declarations > Protected declarations > markup",
        "section": "Protected declarations > markup",
        "text": "property markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.model",
        "title": "Global declarations > Protected declarations > model",
        "section": "Protected declarations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.module",
        "title": "Global declarations > Protected declarations > module",
        "section": "Protected declarations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/global",
        "href": "api/language/declarations/global.html#ansys.scadeone.core.swan.ProtectedDecl.owner",
        "title": "Global declarations > Protected declarations > owner",
        "section": "Protected declarations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/cli",
        "href": "user_guide/cli.html#command-line-interface",
        "title": "Command line interface",
        "section": "Command line interface",
        "text": "The PyScadeOne library has a command line tool, which is automatically installed\nin the Scripts directory of the Python installation folder. Ensure that\nthis Scripts folder is in your PATH environment variable.\nThe name of the tool is pyscadeone. It has the following sub-commands and options:\nfmu            generates an FMU. For more information, see ref_fmu_export.\nscript         executes given script or module.\nsimdata        shows ref_sim_data files (in combination with –show).\nUse pyscadeone <command> --help for a specific <command> help.\nShows help message and exits\nShows pyscadeone version\nShows supported formats\nActivates verbose mode. Several occurrences increase verbosity level\nCommand line interface\nScripts\nScripts\nfmu\nscript\nsimdata\npyscadeone <command> --help"
    },
    {
        "objectID": "api/language/expressions/composite",
        "href": "api/language/expressions/composite.html#array-structure-and-variant",
        "title": "Array, structure and variant",
        "section": "Array, structure and variant",
        "text": "Array, structure and variant"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#project-management",
        "title": "Project management",
        "section": "Project management",
        "text": "This section contains the classes related to Scade One projects.\nProject management"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#project-documentation",
        "title": "Project management > Project documentation",
        "section": "Project documentation",
        "text": "This section gives the description of project class which\nis used to manage Scade One projects.\nProjects are used by ScadeOne objects, and projects have a link to\nthe application. To deal with the cross-links, we use the IProject interface 1.\nBases: object\nInterface class\nBases: IProject\nThis class is the entry point of a project.\nProject dependencies as list of Projects.\nIf all is True, include recursively dependencies of dependencies.\nA dependency occurs only once.\nReturn all Swan sources from project.\nIf all is True, include also sources from project dependencies.\nList of all SwanFile objects.\nAccess to current Scade One application.\nProject JSON data.\nProject directory: Path if storage is a file, else None.\nAccess to model represented by the sources.\nProject storage.\nProject documentation\nScadeOne\nIProject\nobject\nIProject\npython:list\nSwanFile"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.project.IProject",
        "title": "Project management > Project documentation > IProject",
        "section": "Project documentation > IProject",
        "text": "class ansys.scadeone.core.project.IProject\n\nBases: object\n\nInterface class\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.project.Project",
        "title": "Project management > Project documentation > Project",
        "section": "Project documentation > Project",
        "text": "class ansys.scadeone.core.project.Project(app: IScadeOne, project: ProjectStorage)\n\nBases: IProject\n\nThis class is the entry point of a project.\n\n!! processed by numpydoc !!\n\n\n\ndependencies(all=False) -> List[Self]\n\nProject dependencies as list of Projects.\n\nIf all is True, include recursively dependencies of dependencies.\n\nA dependency occurs only once.\n\n!! processed by numpydoc !!\n\n\n\nswan_sources(all=False) -> List[SwanFile]\n\nReturn all Swan sources from project.\n\nIf all is True, include also sources from project dependencies.\n\nReturns\n\npython:list[SwanFile]\n\nList of all SwanFile objects.\n\n!! processed by numpydoc !!\n\n\n\nproperty app: IScadeOne\n\nAccess to current Scade One application.\n\n!! processed by numpydoc !!\n\n\n\nproperty data\n\nProject JSON data.\n\n!! processed by numpydoc !!\n\n\n\nproperty directory: Path | None\n\nProject directory: Path if storage is a file, else None.\n\n!! processed by numpydoc !!\n\n\n\nproperty model\n\nAccess to model represented by the sources.\n\n!! processed by numpydoc !!\n\n\n\nproperty storage: ProjectStorage\n\nProject storage.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.project.Project.dependencies",
        "title": "Project management > Project documentation > dependencies",
        "section": "Project documentation > dependencies",
        "text": "dependencies(all=False) -> List[Self]\n\nProject dependencies as list of Projects.\n\nIf all is True, include recursively dependencies of dependencies.\n\nA dependency occurs only once.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.project.Project.swan_sources",
        "title": "Project management > Project documentation > swan_sources",
        "section": "Project documentation > swan_sources",
        "text": "swan_sources(all=False) -> List[SwanFile]\n\nReturn all Swan sources from project.\n\nIf all is True, include also sources from project dependencies.\n\nReturns\n\npython:list[SwanFile]\n\nList of all SwanFile objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.project.Project.app",
        "title": "Project management > Project documentation > app",
        "section": "Project documentation > app",
        "text": "property app: IScadeOne\n\nAccess to current Scade One application.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.project.Project.data",
        "title": "Project management > Project documentation > data",
        "section": "Project documentation > data",
        "text": "property data\n\nProject JSON data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.project.Project.directory",
        "title": "Project management > Project documentation > directory",
        "section": "Project documentation > directory",
        "text": "property directory: Path | None\n\nProject directory: Path if storage is a file, else None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.project.Project.model",
        "title": "Project management > Project documentation > model",
        "section": "Project documentation > model",
        "text": "property model\n\nAccess to model represented by the sources.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.project.Project.storage",
        "title": "Project management > Project documentation > storage",
        "section": "Project documentation > storage",
        "text": "property storage: ProjectStorage\n\nProject storage.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#project-items",
        "title": "Project management > Project items",
        "section": "Project items",
        "text": "A project can manipulate different items saved using the storage module.\nThe API handles projects and Swan sources (.swan and .swani files).\nProject items"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#project-file",
        "title": "Project management > Project file",
        "section": "Project file",
        "text": "Bases: FileStorage, ProjectStorage\nProject as a file.\nContent of file.\nUses self.json to update storage content and returns self.\nSee json.dumps()\nfor detailed interface.\nTrue when file exists.\nLoads content of JSON data into json property and returns self.\nSee json.loads()\nfor detailed interface.\nSets content and write it to underlying file.\nJSON content.\nAny modification is propagated to the underlying JSON object.\nSaved path.\nSource origin: file name, string, etc.\nProject file\nFileStorage\nProjectStorage"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.ProjectFile",
        "title": "Project management > Project file > ProjectFile",
        "section": "Project file > ProjectFile",
        "text": "class ansys.scadeone.core.common.storage.ProjectFile(file: str | Path)\n\nBases: FileStorage, ProjectStorage\n\nProject as a file.\n\n!! processed by numpydoc !!\n\n\n\ncontent() -> str\n\nContent of file.\n\n!! processed by numpydoc !!\n\n\n\ndump(**kw)\n\nUses self.json to update storage content and returns self.\n\nSee json.dumps()\nfor detailed interface.\n\n!! processed by numpydoc !!\n\n\n\nexists() -> bool\n\nTrue when file exists.\n\n!! processed by numpydoc !!\n\n\n\nload(**kw)\n\nLoads content of JSON data into json property and returns self.\n\nSee json.loads()\nfor detailed interface.\n\n!! processed by numpydoc !!\n\n\n\nset_content(data: str) -> str\n\nSets content and write it to underlying file.\n\n!! processed by numpydoc !!\n\n\n\nproperty json\n\nJSON content.\nAny modification is propagated to the underlying JSON object.\n\n!! processed by numpydoc !!\n\n\n\nproperty path: Path\n\nSaved path.\n\n!! processed by numpydoc !!\n\n\n\nproperty source: str\n\nSource origin: file name, string, etc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.ProjectFile.content",
        "title": "Project management > Project file > content",
        "section": "Project file > content",
        "text": "content() -> str\n\nContent of file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.ProjectFile.dump",
        "title": "Project management > Project file > dump",
        "section": "Project file > dump",
        "text": "dump(**kw)\n\nUses self.json to update storage content and returns self.\n\nSee json.dumps()\nfor detailed interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.ProjectFile.exists",
        "title": "Project management > Project file > exists",
        "section": "Project file > exists",
        "text": "exists() -> bool\n\nTrue when file exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.ProjectFile.load",
        "title": "Project management > Project file > load",
        "section": "Project file > load",
        "text": "load(**kw)\n\nLoads content of JSON data into json property and returns self.\n\nSee json.loads()\nfor detailed interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.ProjectFile.set_content",
        "title": "Project management > Project file > set_content",
        "section": "Project file > set_content",
        "text": "set_content(data: str) -> str\n\nSets content and write it to underlying file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.ProjectFile.json",
        "title": "Project management > Project file > json",
        "section": "Project file > json",
        "text": "property json\n\nJSON content.\nAny modification is propagated to the underlying JSON object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.ProjectFile.path",
        "title": "Project management > Project file > path",
        "section": "Project file > path",
        "text": "property path: Path\n\nSaved path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.ProjectFile.source",
        "title": "Project management > Project file > source",
        "section": "Project file > source",
        "text": "property source: str\n\nSource origin: file name, string, etc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#swan-code",
        "title": "Project management > Swan code",
        "section": "Swan code",
        "text": "Bases: FileStorage, SwanStorage\nSwan code within a file.\nFile containing the Swan source.\nCheck Swan version information.\nWhen version information is missing or invalid.\nCheck Swan test harness version information.\nWhen version information is missing or invalid.\nContent of file.\nTrue when file exists.\nExtracts version information from a Swan source.\nVersion information as a string.\nEither the version information as a dictionary, or None if no version found.\nGenerate the version for a Swan file.\nTrue if the harness version is needed\nVersion\nSets content and write it to underlying file.\nTrue when file is an interface code.\nTrue when file is a module code.\nTrue when file is an test code.\nReturns basename of source file (no suffix).\nSaved path.\nSource origin: file name, string, etc.\nSwan version information.\nSee How to avoid bidirectional class and module dependencies  softwareengineering.stackexchange.com\nSwan code\nFileStorage\nSwanStorage\nPath\nScadeOneException\nScadeOneException\npython:str\nUnion\npython:dict\npython:None\npython:str"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile",
        "title": "Project management > Swan code > SwanFile",
        "section": "Swan code > SwanFile",
        "text": "class ansys.scadeone.core.common.storage.SwanFile(file: str | Path)\n\nBases: FileStorage, SwanStorage\n\nSwan code within a file.\n\nParameters\n\nfile\n\nPath\n\nFile containing the Swan source.\n\n!! processed by numpydoc !!\n\n\n\ncheck_swan_version()\n\nCheck Swan version information.\n\nRaises\n\nScadeOneException\n\nWhen version information is missing or invalid.\n\n!! processed by numpydoc !!\n\n\n\ncheck_swant_version()\n\nCheck Swan test harness version information.\n\nRaises\n\nScadeOneException\n\nWhen version information is missing or invalid.\n\n!! processed by numpydoc !!\n\n\n\ncontent() -> str\n\nContent of file.\n\n!! processed by numpydoc !!\n\n\n\nexists() -> bool\n\nTrue when file exists.\n\n!! processed by numpydoc !!\n\n\n\nstatic extract_version(source: str) -> dict | None\n\nExtracts version information from a Swan source.\n\nParameters\n\nsource\n\npython:str\n\nVersion information as a string.\n\nReturns\n\nUnion[python:dict, python:None]\n\nEither the version information as a dictionary, or None if no version found.\n\n!! processed by numpydoc !!\n\n\n\nstatic gen_version(is_harness=False)\n\nGenerate the version for a Swan file.\n\nParameters\n\nis_harness\n\nbool\n\nTrue if the harness version is needed\n\nReturns\n\npython:str\n\nVersion\n\n!! processed by numpydoc !!\n\n\n\nset_content(data: str) -> str\n\nSets content and write it to underlying file.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_interface\n\nTrue when file is an interface code.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_module\n\nTrue when file is a module code.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_test\n\nTrue when file is an test code.\n\n!! processed by numpydoc !!\n\n\n\nproperty name: str\n\nReturns basename of source file (no suffix).\n\n!! processed by numpydoc !!\n\n\n\nproperty path: Path\n\nSaved path.\n\n!! processed by numpydoc !!\n\n\n\nproperty source: str\n\nSource origin: file name, string, etc.\n\n!! processed by numpydoc !!\n\n\n\nproperty version: dict | None\n\nSwan version information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.check_swan_version",
        "title": "Project management > Swan code > check_swan_version",
        "section": "Swan code > check_swan_version",
        "text": "check_swan_version()\n\nCheck Swan version information.\n\nRaises\n\nScadeOneException\n\nWhen version information is missing or invalid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.check_swant_version",
        "title": "Project management > Swan code > check_swant_version",
        "section": "Swan code > check_swant_version",
        "text": "check_swant_version()\n\nCheck Swan test harness version information.\n\nRaises\n\nScadeOneException\n\nWhen version information is missing or invalid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.content",
        "title": "Project management > Swan code > content",
        "section": "Swan code > content",
        "text": "content() -> str\n\nContent of file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.exists",
        "title": "Project management > Swan code > exists",
        "section": "Swan code > exists",
        "text": "exists() -> bool\n\nTrue when file exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.extract_version",
        "title": "Project management > Swan code > extract_version",
        "section": "Swan code > extract_version",
        "text": "static extract_version(source: str) -> dict | None\n\nExtracts version information from a Swan source.\n\nParameters\n\nsource\n\npython:str\n\nVersion information as a string.\n\nReturns\n\nUnion[python:dict, python:None]\n\nEither the version information as a dictionary, or None if no version found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.gen_version",
        "title": "Project management > Swan code > gen_version",
        "section": "Swan code > gen_version",
        "text": "static gen_version(is_harness=False)\n\nGenerate the version for a Swan file.\n\nParameters\n\nis_harness\n\nbool\n\nTrue if the harness version is needed\n\nReturns\n\npython:str\n\nVersion\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.set_content",
        "title": "Project management > Swan code > set_content",
        "section": "Swan code > set_content",
        "text": "set_content(data: str) -> str\n\nSets content and write it to underlying file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.is_interface",
        "title": "Project management > Swan code > is_interface",
        "section": "Swan code > is_interface",
        "text": "property is_interface\n\nTrue when file is an interface code.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.is_module",
        "title": "Project management > Swan code > is_module",
        "section": "Swan code > is_module",
        "text": "property is_module\n\nTrue when file is a module code.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.is_test",
        "title": "Project management > Swan code > is_test",
        "section": "Swan code > is_test",
        "text": "property is_test\n\nTrue when file is an test code.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.name",
        "title": "Project management > Swan code > name",
        "section": "Swan code > name",
        "text": "property name: str\n\nReturns basename of source file (no suffix).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.path",
        "title": "Project management > Swan code > path",
        "section": "Swan code > path",
        "text": "property path: Path\n\nSaved path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.source",
        "title": "Project management > Swan code > source",
        "section": "Swan code > source",
        "text": "property source: str\n\nSource origin: file name, string, etc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/project",
        "href": "api/project.html#ansys.scadeone.core.common.storage.SwanFile.version",
        "title": "Project management > Swan code > version",
        "section": "Swan code > version",
        "text": "property version: dict | None\n\nSwan version information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/diagram/index",
        "href": "examples/diagram/index.html#diagram-navigation",
        "title": "Diagram navigation",
        "section": "Diagram navigation",
        "text": "This section presents navigation in an operator diagram, which means how to find the sources of an diagram block\n(the blocks that are connected to its inputs) and the targets (the blocks that are connected to its outputs).\nThe section starts giving the basic methods to move through a diagram and finishes by a simple\nnavigation between two objects using these methods.\nThe QuadFlightControl example is used. To setup the example see\nref_QuadFlightControl_python_setup.\nThe operator is first retrieved from the module:\nDiagram navigation\nQuadFlightControl"
    },
    {
        "objectID": "examples/diagram/index",
        "href": "examples/diagram/index.html#diagram-block",
        "title": "Diagram navigation > Diagram block",
        "section": "Diagram block",
        "text": "The operator’s diagram block can be accessed with the ansys.scadeone.core.swan.Operator.diagrams property.\nFrom the MotorControl diagram block, one can get the list of diagram objects (blocks, wires, etc.) and the\nconnections between them (sources or targets). The figure below presents those blocks for the example:\nDiagram block\nansys.scadeone.core.swan.Operator.diagrams"
    },
    {
        "objectID": "examples/diagram/index",
        "href": "examples/diagram/index.html#diagram-objects",
        "title": "Diagram navigation > Diagram objects",
        "section": "Diagram objects",
        "text": "To get the source and target objects, one need to get the diagram objects using the\nansys.scadeone.core.swan.Diagram.objects property. One can filter by ansys.scadeone.core.swan.Block\nto get the blocks list.\nDiagram objects\nansys.scadeone.core.swan.Diagram.objects\nansys.scadeone.core.swan.Block"
    },
    {
        "objectID": "examples/diagram/index",
        "href": "examples/diagram/index.html#sources-and-targets",
        "title": "Diagram navigation > Sources and targets",
        "section": "Sources and targets",
        "text": "Using the MotorControl diagram block, one can get the operator’s sources using the\nansys.scadeone.core.swan.DiagramObject.sources property:\nOne can also get the operator’s targets using the\nansys.scadeone.core.swan.DiagramObject.targets property:\nSources and targets\nansys.scadeone.core.swan.DiagramObject.sources\nansys.scadeone.core.swan.DiagramObject.targets"
    },
    {
        "objectID": "examples/diagram/index",
        "href": "examples/diagram/index.html#navigate-from-input-to-output",
        "title": "Diagram navigation > Navigate from Input to Output",
        "section": "Navigate from Input to Output",
        "text": "One can navigate inside the MotorControl operator selecting a starting and an ending point.\nOne take attitudeCmd input as starting point and one navigate through the wires to get the blocks on the route\nuntil one arrive at the ending point, rotorCmd.\nFirst, one get the attitudeCmd input with its fields.\nOnce one have the input, one can move to the next object diagram using\nthe ansys.scadeone.core.swan.DiagramObject.targets property.\nFor each object diagram target, one can move to the\nnext object, and so on until one arrive at the output. For each move, one can save the navigated object.\nNavigate from Input to Output\nansys.scadeone.core.swan.DiagramObject.targets"
    },
    {
        "objectID": "examples/diagram/index",
        "href": "examples/diagram/index.html#complete-example",
        "title": "Diagram navigation > Complete example",
        "section": "Complete example",
        "text": "This is the complete script for the diagram navigation section, with print of results.\nComplete example"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#operator-instance",
        "title": "Operator instance",
        "section": "Operator instance",
        "text": "An OperatorInstance object is an Expression object\nrepresenting an operator instance call, the called operator being represented\nby an instance of the top-level class OperatorBase\nHigher-order operations (operations using an operator as parameter) are\nrepresented by instances of the OperatorExpression class.\nBases: SwanItem, ABC\nBase class for: operator ::= prefix_op [[sizes]].\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturns op_str [<<sizes>>].\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nSize parameters of call.\nOperator instance\nOperatorInstance\nExpression\nOperatorBase\nOperatorExpression\nSwanItem\nABC\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorBase",
        "title": "Operator instance > Operator instance > OperatorBase",
        "section": "Operator instance > OperatorBase",
        "text": "class ansys.scadeone.core.swan.OperatorBase(sizes: List[Expression])\n\nBases: SwanItem, ABC\n\nBase class for: operator ::= prefix_op [[sizes]].\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str(op_str: str) -> str\n\nReturns op_str [<<sizes>>].\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty sizes: List[Expression]\n\nSize parameters of call.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorBase.get_full_path",
        "title": "Operator instance > Operator instance > get_full_path",
        "section": "Operator instance > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorBase.set_owner",
        "title": "Operator instance > Operator instance > set_owner",
        "section": "Operator instance > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorBase.to_str",
        "title": "Operator instance > Operator instance > to_str",
        "section": "Operator instance > to_str",
        "text": "to_str(op_str: str) -> str\n\nReturns op_str [<<sizes>>].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorBase.is_protected",
        "title": "Operator instance > Operator instance > is_protected",
        "section": "Operator instance > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorBase.model",
        "title": "Operator instance > Operator instance > model",
        "section": "Operator instance > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorBase.module",
        "title": "Operator instance > Operator instance > module",
        "section": "Operator instance > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorBase.owner",
        "title": "Operator instance > Operator instance > owner",
        "section": "Operator instance > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorBase.sizes",
        "title": "Operator instance > Operator instance > sizes",
        "section": "Operator instance > sizes",
        "text": "property sizes: List[Expression]\n\nSize parameters of call.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#operator-instance-application",
        "title": "Operator instance > Operator instance application",
        "section": "Operator instance application",
        "text": "Bases: Expression\nOperator instance call:\nexpr := operator_instance ( group )\noperator_instance ::= operator [[ luid ]]\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nOptional luid.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nCalled operator.\nOwner of current Swan construct.\nCall parameters.\nOperator instance application\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorInstance",
        "title": "Operator instance > Operator instance application > OperatorInstance",
        "section": "Operator instance application > OperatorInstance",
        "text": "class ansys.scadeone.core.swan.OperatorInstance(operator: OperatorBase, params: Group, luid: Luid | None = None)\n\nBases: Expression\n\nOperator instance call:\n\nexpr := operator_instance ( group )\n\noperator_instance ::= operator [[ luid ]]\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nOptional luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty operator: OperatorBase\n\nCalled operator.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty params: Group\n\nCall parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorInstance.get_full_path",
        "title": "Operator instance > Operator instance application > get_full_path",
        "section": "Operator instance application > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorInstance.set_owner",
        "title": "Operator instance > Operator instance application > set_owner",
        "section": "Operator instance application > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorInstance.is_protected",
        "title": "Operator instance > Operator instance application > is_protected",
        "section": "Operator instance application > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorInstance.luid",
        "title": "Operator instance > Operator instance application > luid",
        "section": "Operator instance application > luid",
        "text": "property luid: Luid | None\n\nOptional luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorInstance.model",
        "title": "Operator instance > Operator instance application > model",
        "section": "Operator instance application > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorInstance.module",
        "title": "Operator instance > Operator instance application > module",
        "section": "Operator instance application > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorInstance.operator",
        "title": "Operator instance > Operator instance application > operator",
        "section": "Operator instance application > operator",
        "text": "property operator: OperatorBase\n\nCalled operator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorInstance.owner",
        "title": "Operator instance > Operator instance application > owner",
        "section": "Operator instance application > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorInstance.params",
        "title": "Operator instance > Operator instance application > params",
        "section": "Operator instance application > params",
        "text": "property params: Group\n\nCall parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#named-operator-instance",
        "title": "Operator instance > Named operator instance",
        "section": "Named operator instance",
        "text": "Bases: OperatorBase, PragmaBase\nCall to user-defined operator: operator ::= path_id [[sizes]].\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturns op_str [<<sizes>>].\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nOperator path.\nList of pragmas.\nSize parameters of call.\nNamed operator instance\nOperatorBase\nPragmaBase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall",
        "title": "Operator instance > Named operator instance > PathIdOpCall",
        "section": "Named operator instance > PathIdOpCall",
        "text": "class ansys.scadeone.core.swan.PathIdOpCall(path_id: PathIdentifier, sizes: List[Expression], pragmas: List[Pragma])\n\nBases: OperatorBase, PragmaBase\n\nCall to user-defined operator: operator ::= path_id [[sizes]].\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str(op_str: str) -> str\n\nReturns op_str [<<sizes>>].\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty path_id: PathIdentifier\n\nOperator path.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty sizes: List[Expression]\n\nSize parameters of call.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.get_full_path",
        "title": "Operator instance > Named operator instance > get_full_path",
        "section": "Named operator instance > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.pragma_str",
        "title": "Operator instance > Named operator instance > pragma_str",
        "section": "Named operator instance > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.set_owner",
        "title": "Operator instance > Named operator instance > set_owner",
        "section": "Named operator instance > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.to_str",
        "title": "Operator instance > Named operator instance > to_str",
        "section": "Named operator instance > to_str",
        "text": "to_str(op_str: str) -> str\n\nReturns op_str [<<sizes>>].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.is_protected",
        "title": "Operator instance > Named operator instance > is_protected",
        "section": "Named operator instance > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.model",
        "title": "Operator instance > Named operator instance > model",
        "section": "Named operator instance > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.module",
        "title": "Operator instance > Named operator instance > module",
        "section": "Named operator instance > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.owner",
        "title": "Operator instance > Named operator instance > owner",
        "section": "Named operator instance > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.path_id",
        "title": "Operator instance > Named operator instance > path_id",
        "section": "Named operator instance > path_id",
        "text": "property path_id: PathIdentifier\n\nOperator path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.pragmas",
        "title": "Operator instance > Named operator instance > pragmas",
        "section": "Named operator instance > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PathIdOpCall.sizes",
        "title": "Operator instance > Named operator instance > sizes",
        "section": "Named operator instance > sizes",
        "text": "property sizes: List[Expression]\n\nSize parameters of call.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#anonymous-operator-instance",
        "title": "Operator instance > Anonymous operator instance",
        "section": "Anonymous operator instance",
        "text": "Bases: OperatorExpression\nAnonymous operator expression:\n((node|function)) id {{ , id }} scope_sections => expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nAnonymous operator body.\nTrue when anonymous operator is a node, else a function.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nAnonymous operator parameters list.\nScope sections list.\nBases: OperatorExpression\nAnonymous operator expression:\n((node|function)) params returns params data_def.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nAnonymous operator data definition, either an equation or a scope.\nAnonymous operator input list.\nTrue when anonymous operator is a node, else a function.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nAnonymous operator output list.\nOwner of current Swan construct.\nAnonymous operator instance\nOperatorExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nOperatorExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression",
        "title": "Operator instance > Anonymous operator instance > AnonymousOperatorWithExpression",
        "section": "Anonymous operator instance > AnonymousOperatorWithExpression",
        "text": "class ansys.scadeone.core.swan.AnonymousOperatorWithExpression(is_node: bool, params: List[Identifier], sections: List[ScopeSection], expr: Expression)\n\nBases: OperatorExpression\n\nAnonymous operator expression:\n((node|function)) id {{ , id }} scope_sections => expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nAnonymous operator body.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_node\n\nTrue when anonymous operator is a node, else a function.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty params: List[Identifier]\n\nAnonymous operator parameters list.\n\n!! processed by numpydoc !!\n\n\n\nproperty sections: List[ScopeSection]\n\nScope sections list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression.get_full_path",
        "title": "Operator instance > Anonymous operator instance > get_full_path",
        "section": "Anonymous operator instance > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression.set_owner",
        "title": "Operator instance > Anonymous operator instance > set_owner",
        "section": "Anonymous operator instance > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression.expr",
        "title": "Operator instance > Anonymous operator instance > expr",
        "section": "Anonymous operator instance > expr",
        "text": "property expr: Expression\n\nAnonymous operator body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression.is_node",
        "title": "Operator instance > Anonymous operator instance > is_node",
        "section": "Anonymous operator instance > is_node",
        "text": "property is_node\n\nTrue when anonymous operator is a node, else a function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression.is_protected",
        "title": "Operator instance > Anonymous operator instance > is_protected",
        "section": "Anonymous operator instance > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression.model",
        "title": "Operator instance > Anonymous operator instance > model",
        "section": "Anonymous operator instance > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression.module",
        "title": "Operator instance > Anonymous operator instance > module",
        "section": "Anonymous operator instance > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression.owner",
        "title": "Operator instance > Anonymous operator instance > owner",
        "section": "Anonymous operator instance > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression.params",
        "title": "Operator instance > Anonymous operator instance > params",
        "section": "Anonymous operator instance > params",
        "text": "property params: List[Identifier]\n\nAnonymous operator parameters list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithExpression.sections",
        "title": "Operator instance > Anonymous operator instance > sections",
        "section": "Anonymous operator instance > sections",
        "text": "property sections: List[ScopeSection]\n\nScope sections list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition",
        "title": "Operator instance > Anonymous operator instance > AnonymousOperatorWithDataDefinition",
        "section": "Anonymous operator instance > AnonymousOperatorWithDataDefinition",
        "text": "class ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition(is_node: bool, inputs: List[VarDecl], outputs: List[VarDecl], data_def: Equation | Scope)\n\nBases: OperatorExpression\n\nAnonymous operator expression:\n((node|function)) params returns params data_def.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data_def: Equation | Scope\n\nAnonymous operator data definition, either an equation or a scope.\n\n!! processed by numpydoc !!\n\n\n\nproperty inputs: List[VarDecl]\n\nAnonymous operator input list.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_node\n\nTrue when anonymous operator is a node, else a function.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty outputs: List[VarDecl]\n\nAnonymous operator output list.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition.get_full_path",
        "title": "Operator instance > Anonymous operator instance > get_full_path",
        "section": "Anonymous operator instance > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition.set_owner",
        "title": "Operator instance > Anonymous operator instance > set_owner",
        "section": "Anonymous operator instance > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition.data_def",
        "title": "Operator instance > Anonymous operator instance > data_def",
        "section": "Anonymous operator instance > data_def",
        "text": "property data_def: Equation | Scope\n\nAnonymous operator data definition, either an equation or a scope.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition.inputs",
        "title": "Operator instance > Anonymous operator instance > inputs",
        "section": "Anonymous operator instance > inputs",
        "text": "property inputs: List[VarDecl]\n\nAnonymous operator input list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition.is_node",
        "title": "Operator instance > Anonymous operator instance > is_node",
        "section": "Anonymous operator instance > is_node",
        "text": "property is_node\n\nTrue when anonymous operator is a node, else a function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition.is_protected",
        "title": "Operator instance > Anonymous operator instance > is_protected",
        "section": "Anonymous operator instance > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition.model",
        "title": "Operator instance > Anonymous operator instance > model",
        "section": "Anonymous operator instance > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition.module",
        "title": "Operator instance > Anonymous operator instance > module",
        "section": "Anonymous operator instance > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition.outputs",
        "title": "Operator instance > Anonymous operator instance > outputs",
        "section": "Anonymous operator instance > outputs",
        "text": "property outputs: List[VarDecl]\n\nAnonymous operator output list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.AnonymousOperatorWithDataDefinition.owner",
        "title": "Operator instance > Anonymous operator instance > owner",
        "section": "Anonymous operator instance > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#higher-order-operator-instance",
        "title": "Operator instance > Higher-order operator instance",
        "section": "Higher-order operator instance",
        "text": "Higher-order\nApplication\nmap, fold, mapfold, mapi foldi, mapfoldi\narray iterators\nactivate operator expression every\nconditional activation\nrestart operator expression every\nconditional restart\nHigher-order operator instance\nHigher-order operators"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#iterator",
        "title": "Operator instance > Iterator",
        "section": "Iterator",
        "text": "Bases: OperatorExpression\nIterators: map, fold, mapfold, mapi, foldi, mapfoldi.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nIterator kind.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nIterated operator.\nOwner of current Swan construct.\nBases: Enum\nIterators kind: map, fold, mapfold, mapi, foldi, mapfoldi.\nfold iterator.\nfoldi iterator.\nmap iterator.\nmapfold iterator.\nmapfoldi iterator.\nmapi iterator.\nIterator\nOperatorExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nEnum"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Iterator",
        "title": "Operator instance > Iterator > Iterator",
        "section": "Iterator > Iterator",
        "text": "class ansys.scadeone.core.swan.Iterator(kind: IteratorKind, operator: OperatorBase)\n\nBases: OperatorExpression\n\nIterators: map, fold, mapfold, mapi, foldi, mapfoldi.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty kind: IteratorKind\n\nIterator kind.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty operator: OperatorBase\n\nIterated operator.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Iterator.get_full_path",
        "title": "Operator instance > Iterator > get_full_path",
        "section": "Iterator > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Iterator.set_owner",
        "title": "Operator instance > Iterator > set_owner",
        "section": "Iterator > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Iterator.is_protected",
        "title": "Operator instance > Iterator > is_protected",
        "section": "Iterator > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Iterator.kind",
        "title": "Operator instance > Iterator > kind",
        "section": "Iterator > kind",
        "text": "property kind: IteratorKind\n\nIterator kind.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Iterator.model",
        "title": "Operator instance > Iterator > model",
        "section": "Iterator > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Iterator.module",
        "title": "Operator instance > Iterator > module",
        "section": "Iterator > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Iterator.operator",
        "title": "Operator instance > Iterator > operator",
        "section": "Iterator > operator",
        "text": "property operator: OperatorBase\n\nIterated operator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Iterator.owner",
        "title": "Operator instance > Iterator > owner",
        "section": "Iterator > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.IteratorKind",
        "title": "Operator instance > Iterator > IteratorKind",
        "section": "Iterator > IteratorKind",
        "text": "class ansys.scadeone.core.swan.IteratorKind(value)\n\nBases: Enum\n\nIterators kind: map, fold, mapfold, mapi, foldi, mapfoldi.\n\n!! processed by numpydoc !!\n\n\n\nFold = 2\n\nfold iterator.\n\n!! processed by numpydoc !!\n\n\n\nFoldi = 5\n\nfoldi iterator.\n\n!! processed by numpydoc !!\n\n\n\nMap = 1\n\nmap iterator.\n\n!! processed by numpydoc !!\n\n\n\nMapfold = 3\n\nmapfold iterator.\n\n!! processed by numpydoc !!\n\n\n\nMapfoldi = 6\n\nmapfoldi iterator.\n\n!! processed by numpydoc !!\n\n\n\nMapi = 4\n\nmapi iterator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.IteratorKind.Fold",
        "title": "Operator instance > Iterator > Fold",
        "section": "Iterator > Fold",
        "text": "Fold = 2\n\nfold iterator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.IteratorKind.Foldi",
        "title": "Operator instance > Iterator > Foldi",
        "section": "Iterator > Foldi",
        "text": "Foldi = 5\n\nfoldi iterator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.IteratorKind.Map",
        "title": "Operator instance > Iterator > Map",
        "section": "Iterator > Map",
        "text": "Map = 1\n\nmap iterator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.IteratorKind.Mapfold",
        "title": "Operator instance > Iterator > Mapfold",
        "section": "Iterator > Mapfold",
        "text": "Mapfold = 3\n\nmapfold iterator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.IteratorKind.Mapfoldi",
        "title": "Operator instance > Iterator > Mapfoldi",
        "section": "Iterator > Mapfoldi",
        "text": "Mapfoldi = 6\n\nmapfoldi iterator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.IteratorKind.Mapi",
        "title": "Operator instance > Iterator > Mapi",
        "section": "Iterator > Mapi",
        "text": "Mapi = 4\n\nmapi iterator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#activate",
        "title": "Operator instance > Activate",
        "section": "Activate",
        "text": "Bases: OperatorExpression\nHigher-order activate expression: activate operator\nevery expr (( last**| **default )) expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nActivation condition.\nActivation default/last expression.\nReturns true when last is set, false when default is set.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOperator under activation.\nOwner of current Swan construct.\nActivate\nOperatorExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery",
        "title": "Operator instance > Activate > ActivateEvery",
        "section": "Activate > ActivateEvery",
        "text": "class ansys.scadeone.core.swan.ActivateEvery(operator: OperatorBase, condition: Expression, is_last: bool, expr: Expression)\n\nBases: OperatorExpression\n\nHigher-order activate expression: activate operator\nevery expr (( last**| **default )) expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty condition: Expression\n\nActivation condition.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nActivation default/last expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_last: bool\n\nReturns true when last is set, false when default is set.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty operator: OperatorBase\n\nOperator under activation.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery.get_full_path",
        "title": "Operator instance > Activate > get_full_path",
        "section": "Activate > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery.set_owner",
        "title": "Operator instance > Activate > set_owner",
        "section": "Activate > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery.condition",
        "title": "Operator instance > Activate > condition",
        "section": "Activate > condition",
        "text": "property condition: Expression\n\nActivation condition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery.expr",
        "title": "Operator instance > Activate > expr",
        "section": "Activate > expr",
        "text": "property expr: Expression\n\nActivation default/last expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery.is_last",
        "title": "Operator instance > Activate > is_last",
        "section": "Activate > is_last",
        "text": "property is_last: bool\n\nReturns true when last is set, false when default is set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery.is_protected",
        "title": "Operator instance > Activate > is_protected",
        "section": "Activate > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery.model",
        "title": "Operator instance > Activate > model",
        "section": "Activate > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery.module",
        "title": "Operator instance > Activate > module",
        "section": "Activate > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery.operator",
        "title": "Operator instance > Activate > operator",
        "section": "Activate > operator",
        "text": "property operator: OperatorBase\n\nOperator under activation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ActivateEvery.owner",
        "title": "Operator instance > Activate > owner",
        "section": "Activate > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#restart",
        "title": "Operator instance > Restart",
        "section": "Restart",
        "text": "Bases: OperatorExpression\nHigher-order restart expression: restart operator every expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nActivation condition.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOperator under activation.\nOwner of current Swan construct.\nRestart\nOperatorExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Restart",
        "title": "Operator instance > Restart > Restart",
        "section": "Restart > Restart",
        "text": "class ansys.scadeone.core.swan.Restart(operator: OperatorBase, condition: Expression)\n\nBases: OperatorExpression\n\nHigher-order restart expression: restart operator every expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty condition: Expression\n\nActivation condition.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty operator: OperatorBase\n\nOperator under activation.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Restart.get_full_path",
        "title": "Operator instance > Restart > get_full_path",
        "section": "Restart > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Restart.set_owner",
        "title": "Operator instance > Restart > set_owner",
        "section": "Restart > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Restart.condition",
        "title": "Operator instance > Restart > condition",
        "section": "Restart > condition",
        "text": "property condition: Expression\n\nActivation condition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Restart.is_protected",
        "title": "Operator instance > Restart > is_protected",
        "section": "Restart > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Restart.model",
        "title": "Operator instance > Restart > model",
        "section": "Restart > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Restart.module",
        "title": "Operator instance > Restart > module",
        "section": "Restart > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Restart.operator",
        "title": "Operator instance > Restart > operator",
        "section": "Restart > operator",
        "text": "property operator: OperatorBase\n\nOperator under activation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Restart.owner",
        "title": "Operator instance > Restart > owner",
        "section": "Restart > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#partial-operator-instance",
        "title": "Operator instance > Partial operator instance",
        "section": "Partial operator instance",
        "text": "Bases: OperatorExpression\nPartial operator expression: operator partial_group.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nCalled operator.\nOwner of current Swan construct.\nReturns the partial group items.\nBases: SwanItem\nOptional group item: opt_group_item ::= _ | group_item.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when group item is ‘_’.\nReturns the group item, either a GroupItem or None.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nPartial operator instance\nOperatorExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Partial",
        "title": "Operator instance > Partial operator instance > Partial",
        "section": "Partial operator instance > Partial",
        "text": "class ansys.scadeone.core.swan.Partial(operator: OperatorBase, partial_group: List[OptGroupItem])\n\nBases: OperatorExpression\n\nPartial operator expression: operator partial_group.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty operator: OperatorBase\n\nCalled operator.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty partial_group: List[OptGroupItem]\n\nReturns the partial group items.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Partial.get_full_path",
        "title": "Operator instance > Partial operator instance > get_full_path",
        "section": "Partial operator instance > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Partial.set_owner",
        "title": "Operator instance > Partial operator instance > set_owner",
        "section": "Partial operator instance > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Partial.is_protected",
        "title": "Operator instance > Partial operator instance > is_protected",
        "section": "Partial operator instance > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Partial.model",
        "title": "Operator instance > Partial operator instance > model",
        "section": "Partial operator instance > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Partial.module",
        "title": "Operator instance > Partial operator instance > module",
        "section": "Partial operator instance > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Partial.operator",
        "title": "Operator instance > Partial operator instance > operator",
        "section": "Partial operator instance > operator",
        "text": "property operator: OperatorBase\n\nCalled operator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Partial.owner",
        "title": "Operator instance > Partial operator instance > owner",
        "section": "Partial operator instance > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.Partial.partial_group",
        "title": "Operator instance > Partial operator instance > partial_group",
        "section": "Partial operator instance > partial_group",
        "text": "property partial_group: List[OptGroupItem]\n\nReturns the partial group items.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OptGroupItem",
        "title": "Operator instance > Partial operator instance > OptGroupItem",
        "section": "Partial operator instance > OptGroupItem",
        "text": "class ansys.scadeone.core.swan.OptGroupItem(item: GroupItem | None = None)\n\nBases: SwanItem\n\nOptional group item: opt_group_item ::= _ | group_item.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_underscore: bool\n\nTrue when group item is ‘_’.\n\n!! processed by numpydoc !!\n\n\n\nproperty item: GroupItem | None\n\nReturns the group item, either a GroupItem or None.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OptGroupItem.get_full_path",
        "title": "Operator instance > Partial operator instance > get_full_path",
        "section": "Partial operator instance > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OptGroupItem.set_owner",
        "title": "Operator instance > Partial operator instance > set_owner",
        "section": "Partial operator instance > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OptGroupItem.is_protected",
        "title": "Operator instance > Partial operator instance > is_protected",
        "section": "Partial operator instance > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OptGroupItem.is_underscore",
        "title": "Operator instance > Partial operator instance > is_underscore",
        "section": "Partial operator instance > is_underscore",
        "text": "property is_underscore: bool\n\nTrue when group item is ‘_’.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OptGroupItem.item",
        "title": "Operator instance > Partial operator instance > item",
        "section": "Partial operator instance > item",
        "text": "property item: GroupItem | None\n\nReturns the group item, either a GroupItem or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OptGroupItem.model",
        "title": "Operator instance > Partial operator instance > model",
        "section": "Partial operator instance > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OptGroupItem.module",
        "title": "Operator instance > Partial operator instance > module",
        "section": "Partial operator instance > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OptGroupItem.owner",
        "title": "Operator instance > Partial operator instance > owner",
        "section": "Partial operator instance > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#n-ary-operator-instance",
        "title": "Operator instance > N-ary operator instance",
        "section": "N-ary operator instance",
        "text": "N-ary operator instances are implemented as specific expressions. See ref_n_ary_expr section.\nN-ary operator instance"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#operator-expressions",
        "title": "Operator instance > Operator Expressions",
        "section": "Operator Expressions",
        "text": "Bases: SwanItem, ABC\nBase class for op_expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: OperatorBase\nCall to op_expr: operator ::= (op_expr) [[sizes]].\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturns op_str [<<sizes>>].\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOperator expression.\nOwner of current Swan construct.\nSize parameters of call.\nThis class is used when an operator expression is syntactically\nincorrect and was protected by the serialization process.\nBases: OperatorExpression, ProtectedItem\nProtected operator expression,\ni.e., saved as string if syntactically incorrect.\nFull path of Swan construct.\nCheck if protected data has the specified markup.\nString markup.\nTrue when instance markup is same as parameter.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nProtected data between markups.\nProtected data.\nTell if item is syntactically protected and provided as a string.\nProtection markup.\nMarkup string.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nOperator Expressions\nSwanItem\nABC\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nOperatorBase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nOperatorExpression\nProtectedItem\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\npython:str\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorExpression",
        "title": "Operator instance > Operator Expressions > OperatorExpression",
        "section": "Operator Expressions > OperatorExpression",
        "text": "class ansys.scadeone.core.swan.OperatorExpression\n\nBases: SwanItem, ABC\n\nBase class for op_expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorExpression.get_full_path",
        "title": "Operator instance > Operator Expressions > get_full_path",
        "section": "Operator Expressions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorExpression.set_owner",
        "title": "Operator instance > Operator Expressions > set_owner",
        "section": "Operator Expressions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorExpression.is_protected",
        "title": "Operator instance > Operator Expressions > is_protected",
        "section": "Operator Expressions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorExpression.model",
        "title": "Operator instance > Operator Expressions > model",
        "section": "Operator Expressions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorExpression.module",
        "title": "Operator instance > Operator Expressions > module",
        "section": "Operator Expressions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.OperatorExpression.owner",
        "title": "Operator instance > Operator Expressions > owner",
        "section": "Operator Expressions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PrefixOperatorExpression",
        "title": "Operator instance > Operator Expressions > PrefixOperatorExpression",
        "section": "Operator Expressions > PrefixOperatorExpression",
        "text": "class ansys.scadeone.core.swan.PrefixOperatorExpression(op_expr: OperatorExpression, sizes: List[Expression])\n\nBases: OperatorBase\n\nCall to op_expr: operator ::= (op_expr) [[sizes]].\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str(op_str: str) -> str\n\nReturns op_str [<<sizes>>].\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty op_expr: OperatorExpression\n\nOperator expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty sizes: List[Expression]\n\nSize parameters of call.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PrefixOperatorExpression.get_full_path",
        "title": "Operator instance > Operator Expressions > get_full_path",
        "section": "Operator Expressions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PrefixOperatorExpression.set_owner",
        "title": "Operator instance > Operator Expressions > set_owner",
        "section": "Operator Expressions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PrefixOperatorExpression.to_str",
        "title": "Operator instance > Operator Expressions > to_str",
        "section": "Operator Expressions > to_str",
        "text": "to_str(op_str: str) -> str\n\nReturns op_str [<<sizes>>].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PrefixOperatorExpression.is_protected",
        "title": "Operator instance > Operator Expressions > is_protected",
        "section": "Operator Expressions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PrefixOperatorExpression.model",
        "title": "Operator instance > Operator Expressions > model",
        "section": "Operator Expressions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PrefixOperatorExpression.module",
        "title": "Operator instance > Operator Expressions > module",
        "section": "Operator Expressions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PrefixOperatorExpression.op_expr",
        "title": "Operator instance > Operator Expressions > op_expr",
        "section": "Operator Expressions > op_expr",
        "text": "property op_expr: OperatorExpression\n\nOperator expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PrefixOperatorExpression.owner",
        "title": "Operator instance > Operator Expressions > owner",
        "section": "Operator Expressions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.PrefixOperatorExpression.sizes",
        "title": "Operator instance > Operator Expressions > sizes",
        "section": "Operator Expressions > sizes",
        "text": "property sizes: List[Expression]\n\nSize parameters of call.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ProtectedOpExpr",
        "title": "Operator instance > Operator Expressions > ProtectedOpExpr",
        "section": "Operator Expressions > ProtectedOpExpr",
        "text": "class ansys.scadeone.core.swan.ProtectedOpExpr(data: str, markup: str)\n\nBases: OperatorExpression, ProtectedItem\n\nProtected operator expression,\ni.e., saved as string if syntactically incorrect.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nhas_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ProtectedOpExpr.get_full_path",
        "title": "Operator instance > Operator Expressions > get_full_path",
        "section": "Operator Expressions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ProtectedOpExpr.has_markup",
        "title": "Operator instance > Operator Expressions > has_markup",
        "section": "Operator Expressions > has_markup",
        "text": "has_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ProtectedOpExpr.set_owner",
        "title": "Operator instance > Operator Expressions > set_owner",
        "section": "Operator Expressions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ProtectedOpExpr.data",
        "title": "Operator instance > Operator Expressions > data",
        "section": "Operator Expressions > data",
        "text": "property data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ProtectedOpExpr.is_protected",
        "title": "Operator instance > Operator Expressions > is_protected",
        "section": "Operator Expressions > is_protected",
        "text": "property is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ProtectedOpExpr.markup",
        "title": "Operator instance > Operator Expressions > markup",
        "section": "Operator Expressions > markup",
        "text": "property markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ProtectedOpExpr.model",
        "title": "Operator instance > Operator Expressions > model",
        "section": "Operator Expressions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ProtectedOpExpr.module",
        "title": "Operator instance > Operator Expressions > module",
        "section": "Operator Expressions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/instance",
        "href": "api/language/expressions/instance.html#ansys.scadeone.core.swan.ProtectedOpExpr.owner",
        "title": "Operator instance > Operator Expressions > owner",
        "section": "Operator Expressions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/modeler",
        "href": "user_guide/modeler.html#modeler",
        "title": "Modeler",
        "section": "Modeler",
        "text": "This section uses the QuadFlightControl example provided with Scade One.\nThe example is located in the examples/QuadFlightControl/QuadFlightControl folder in the Scade One\ninstallation directory.\nModeler\nexamples/QuadFlightControl/QuadFlightControl"
    },
    {
        "objectID": "user_guide/modeler",
        "href": "user_guide/modeler.html#scadeone-instance",
        "title": "Modeler > ScadeOne instance",
        "section": "ScadeOne instance",
        "text": "A ScadeOne instance is created with the following code:\nwhere install_dir is the location of Scade One installation and it could take a string or\na pathlib.Path object as value. The app object is then used to access to projects.\nScadeOne instance\ninstall_dir\npathlib.Path"
    },
    {
        "objectID": "user_guide/modeler",
        "href": "user_guide/modeler.html#swan-projects",
        "title": "Modeler > Swan projects",
        "section": "Swan projects",
        "text": "A Swan project is opened with ansys.scadeone.core.ScadeOne.load_project().\nThe ansys.scadeone.core.ScadeOne.load_project() can take a string\nor a pathlib.Path object as parameter.\nIf the project exists, a ansys.scadeone.core.project.Project object is\nreturned, else None.\nSeveral projects can be loaded, with successive calls to the load_project() method.\nThey can be accessed using the app.projects property.\nFrom the ansys.pyscadeone.core.project.Project.app, one has access to the\nScade One app containing the project.\nSwan projects\nansys.scadeone.core.ScadeOne.load_project()\nansys.scadeone.core.ScadeOne.load_project()\npathlib.Path\nansys.scadeone.core.project.Project\nansys.pyscadeone.core.project.Project.app"
    },
    {
        "objectID": "user_guide/modeler",
        "href": "user_guide/modeler.html#dependencies",
        "title": "Modeler > Dependencies",
        "section": "Dependencies",
        "text": "A project may have several sub-projects as dependencies.\nThe list of dependencies is returned with\nthe ansys.scadeone.core.project.Project.dependencies() method.\nDependencies\nansys.scadeone.core.project.Project.dependencies()"
    },
    {
        "objectID": "user_guide/modeler",
        "href": "user_guide/modeler.html#swan-module-bodies-and-interfaces-files",
        "title": "Modeler > Swan module bodies and interfaces files",
        "section": "Swan module bodies and interfaces files",
        "text": "Swan module bodies (.swan files) and Swan module interfaces (.swani files)\ncan be listed with the ansys.scadeone.core.project.Project.swan_sources()\nmethod.\nSwan module bodies and interfaces files\nansys.scadeone.core.project.Project.swan_sources()"
    },
    {
        "objectID": "user_guide/modeler",
        "href": "user_guide/modeler.html#swan-model",
        "title": "Modeler > Swan model",
        "section": "Swan model",
        "text": "A ansys.scadeone.core.model.Model object represents a Swan model or program.\nA model is built from the sources of the project.\nThe project’s model can be accessed with the\nansys.scadeone.core.project.Project.model property.\nFrom a model, one can access to the Scade One instance,\nwith the model’s project property as in my_app = model.project.app\nA model contains all modules (body or interface) from the Swan sources. For each module,\none has access to the declarations it contains.\nFrom a ansys.scadeone.core.model.Model object, one can therefore access to:\nthe modules,\nall declarations,\nspecific declarations, like types or constants\nor a particular declaration.\nHere are some examples:\nPyScadeOne tries to be lazy to handle large projects. For instance,\nlooking for all sensors requires to load all sources.\nLooking for a specific item, the sources are loaded until the required\nitem is found.\nIn the following example, the ansys.scadeone.core.model.Model.find_declaration()\nis used to filter a specific operator. In that case, the search (and the load) stops\nwhen the requested operator is found. As we will use Swan constructs, we need to import\ntheir definitions:\nHere is an example to filter declarations to get specific operator:\nSwan model\nansys.scadeone.core.model.Model\nansys.scadeone.core.project.Project.model\nansys.scadeone.core.model.Model\nansys.scadeone.core.model.Model.find_declaration()"
    },
    {
        "objectID": "user_guide/modeler",
        "href": "user_guide/modeler.html#swan-language",
        "title": "Modeler > Swan language",
        "section": "Swan language",
        "text": "The model content represents the structure of the Swan program, starting with\nthe declarations: types, constants, groups, sensors, operators, and signatures.\nFor an operator or a signature, one can access to the input and output flows\nand to the body for operator. Then, from the body, one can access to the content of diagrams, equations, etc.\nAll Swan language constructs are represented by classes from the\nansys.scadeone.core.swan module. The section ref_swan_api describes\nthe Swan classes, with respect to the structure of the language reference documentation in the product.\nResuming with the previous code example, here is a usage sample of the Swan language API:\nSwan language\nansys.scadeone.core.swan"
    },
    {
        "objectID": "examples/fmu_export/index",
        "href": "examples/fmu_export/index.html#export-fmu",
        "title": "Export FMU",
        "section": "Export FMU",
        "text": "This section presents how to build an FMU package for FMI 2.0 (see ref_fmu_export).\nThis can also be done through the command line, see how\nat the end of the section.\nThe  QuadFlightControl example is used. To set up the example see\nref_QuadFlightControl_python_setup.\nThe following package must be used:\nThe example relies on a code generation job named CodeGen.\nA FMU_2_Export object is created for this job:\nTo generate and build the FMU, ensure to have the code generation job executed,\nwhich produces the C code from the Swan model (execution is done from the Scade One IDE).\nThe script can then access the generated code data.\nThe GeneratedCode object is accessible using the FMU_2_Export.codegen property.\nFrom there, you can check if code is generated with the GeneratedCode.is_code_generated property.\nThe FMI 2.0 files are generated using the FMU_2_Export.generate() method:\nThe FMU package is built from the FMI 2.0 and the Scade One generated files\nusing the FMU_2_Export.build() method:\nThe FMU is built using the gcc compiler provided with Scade One, unless it is already in the PATH.\nExplicit compiler path can also be provided using the gcc_path key args build argument.\nFor the QuadFlightControl example, some library operators are defined in an include file.\nThis file must be added to the swan_config.h  file.\nThis is done using the args build argument, by setting the swan_config_end key to the proper #include directive:\nThe FMU package is named QuadFlightControl_QuadFlightControl.fmu and is located under QuadFlight_FMU_ME sub directory.\nThe FMU package has been built for Model Exchange (ME). To build it for Co-Simulation (CS),\nset the kind parameter of the FMU_2_Export.generate() method to “CS”.\nExport FMU\nQuadFlightControl\nFMU_2_Export\nGeneratedCode\nFMU_2_Export.codegen\nGeneratedCode.is_code_generated\nFMU_2_Export.generate()\nFMU_2_Export.build()\nswan_config.h\nFMU_2_Export.generate()"
    },
    {
        "objectID": "examples/fmu_export/index",
        "href": "examples/fmu_export/index.html#example-with-command-line",
        "title": "Export FMU > Example with command line",
        "section": "Example with command line",
        "text": "The FMU package can be built using the pyscadeone command line as follow:\nRefer to fmu_export_cli for more details on command line usage.\nExample with command line"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#model",
        "title": "Model",
        "section": "Model",
        "text": "A Model object gives access to the model items defined in the Swan sources\nof a project. The unique Model instance of a project is the object returned\nby the ansys.scadeone.core.project.Project.model property of a\nproject instance.\nModel\nansys.scadeone.core.project.Project.model"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#model-documentation",
        "title": "Model > Model documentation",
        "section": "Model documentation",
        "text": "Bases: object\nModel handling class.\nA model contains module and interface declarations.\nLoading of Swan sources is lazy.\nConfigure model with project as owner. The configuration\nassociate the project and the model and prepare internal data to\nstore module bodies and interfaces.\nIt is called by ansys.scadeone.core.project.Project.model.\nReturn declarations matched by a filter.\nA function of one argument of type S.GlobalDeclaration, returning True or False.\nGenerator on matching declarations.\nFind a declaration for which predicate_fn returns True.\nFunction taking one S.GlobalDeclaration as argument and\nreturning True when some property holds, else False.\nFound declaration or None.\nReturn module body of name ‘name’\nReturn the Module instance for a given pathid.\nA path is of the form [ID ::]+ ID, where the last ID is the object\nname, and the “ID::ID…::” is the module path.\nIf the pathid has no path part (reduced to ID), return module.\nobject full path\nContext module where the search occurs.\nModule of the object, or None if not module found\nReturn module interface of name ‘name’\nLoad systematically all modules.\nLoad module by name\nModule name.\nSwan Module, either a ModuleBody or a ModuleInterface.\nReturn True when all Swan modules have been loaded.\nReturn a generator on constant declarations.\nDeclarations found in all modules/interfaces as a generator.\nThe Swan code of a module/interface is loaded if not yet loaded.\nReturn a generator on group declarations.\nLoaded module (module body or interface) as a generator.\nReturn a generator on operator declarations.\nSwan parser.\nModel project, as a Project object.\nReturn a generator on sensor declarations.\nReturn a generator on operator signature declarations.\nReturn a generator on type declarations.\nModel documentation\nobject\nansys.scadeone.core.project.Project.model\nfunction\nGenerator\nS.GlobalDeclaration\npython:None\npython:None\nfunction\nUnion\nS.GlobalDeclaration\npython:None\nModule\npython:str\nModule\nUnion\nS.Module\npython:None\npython:str\nModule"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model",
        "title": "Model > Model documentation > Model",
        "section": "Model documentation > Model",
        "text": "class ansys.scadeone.core.model.Model\n\nBases: object\n\nModel handling class.\nA model contains module and interface declarations.\n\nLoading of Swan sources is lazy.\n\n!! processed by numpydoc !!\n\n\n\nconfigure(project: IProject)\n\nConfigure model with project as owner. The configuration\nassociate the project and the model and prepare internal data to\nstore module bodies and interfaces.\n\nIt is called by ansys.scadeone.core.project.Project.model.\n\n!! processed by numpydoc !!\n\n\n\nfilter_declarations(filter_fn) -> Generator[GlobalDeclaration, None, None]\n\nReturn declarations matched by a filter.\n\nParameters\n\nfilter_fn\n\nfunction\n\nA function of one argument of type S.GlobalDeclaration, returning True or False.\n\nYields\n\nGenerator[S.GlobalDeclaration, python:None, python:None]\n\nGenerator on matching declarations.\n\n!! processed by numpydoc !!\n\n\n\nfind_declaration(predicate_fn) -> GlobalDeclaration | None\n\nFind a declaration for which predicate_fn returns True.\n\nParameters\n\npredicate_fn\n\nfunction\n\nFunction taking one S.GlobalDeclaration as argument and\nreturning True when some property holds, else False.\n\nReturns\n\nUnion[S.GlobalDeclaration, python:None]\n\nFound declaration or None.\n\n!! processed by numpydoc !!\n\n\n\nget_module_body(name: str) -> ModuleBody | None\n\nReturn module body of name ‘name’\n\n!! processed by numpydoc !!\n\n\n\nget_module_from_pathid(pathid: str, module: Module) -> Module | None\n\nReturn the Module instance for a given pathid.\nA path is of the form [ID ::]+ ID, where the last ID is the object\nname, and the “ID::ID…::” is the module path.\n\nIf the pathid has no path part (reduced to ID), return module.\n\nParameters\n\npathid\n\npython:str\n\nobject full path\n\nmodule\n\nModule\n\nContext module where the search occurs.\n\nReturns\n\nUnion[S.Module, python:None]\n\nModule of the object, or None if not module found\n\n!! processed by numpydoc !!\n\n\n\nget_module_interface(name: str) -> ModuleInterface | None\n\nReturn module interface of name ‘name’\n\n!! processed by numpydoc !!\n\n\n\nload_all_modules()\n\nLoad systematically all modules.\n\n!! processed by numpydoc !!\n\n\n\nload_module(name: str)\n\nLoad module by name\n\nParameters\n\nname\n\npython:str\n\nModule name.\n\nReturns\n\nModule\n\nSwan Module, either a ModuleBody or a ModuleInterface.\n\n!! processed by numpydoc !!\n\n\n\nproperty all_modules_loaded: True\n\nReturn True when all Swan modules have been loaded.\n\n!! processed by numpydoc !!\n\n\n\nproperty constants: Generator[ConstDecl, None, None]\n\nReturn a generator on constant declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty declarations: Generator[GlobalDeclaration, None, None]\n\nDeclarations found in all modules/interfaces as a generator.\n\nThe Swan code of a module/interface is loaded if not yet loaded.\n\n!! processed by numpydoc !!\n\n\n\nproperty groups: Generator[GroupDecl, None, None]\n\nReturn a generator on group declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty modules: Generator[Module, None, None]\n\nLoaded module (module body or interface) as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty operators: Generator[Operator, None, None]\n\nReturn a generator on operator declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty parser: SwanParser\n\nSwan parser.\n\n!! processed by numpydoc !!\n\n\n\nproperty project: IProject\n\nModel project, as a Project object.\n\n!! processed by numpydoc !!\n\n\n\nproperty sensors: Generator[SensorDecl, None, None]\n\nReturn a generator on sensor declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty signatures: Generator[Signature, None, None]\n\nReturn a generator on operator signature declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty types: Generator[TypeDecl, None, None]\n\nReturn a generator on type declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.configure",
        "title": "Model > Model documentation > configure",
        "section": "Model documentation > configure",
        "text": "configure(project: IProject)\n\nConfigure model with project as owner. The configuration\nassociate the project and the model and prepare internal data to\nstore module bodies and interfaces.\n\nIt is called by ansys.scadeone.core.project.Project.model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.filter_declarations",
        "title": "Model > Model documentation > filter_declarations",
        "section": "Model documentation > filter_declarations",
        "text": "filter_declarations(filter_fn) -> Generator[GlobalDeclaration, None, None]\n\nReturn declarations matched by a filter.\n\nParameters\n\nfilter_fn\n\nfunction\n\nA function of one argument of type S.GlobalDeclaration, returning True or False.\n\nYields\n\nGenerator[S.GlobalDeclaration, python:None, python:None]\n\nGenerator on matching declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.find_declaration",
        "title": "Model > Model documentation > find_declaration",
        "section": "Model documentation > find_declaration",
        "text": "find_declaration(predicate_fn) -> GlobalDeclaration | None\n\nFind a declaration for which predicate_fn returns True.\n\nParameters\n\npredicate_fn\n\nfunction\n\nFunction taking one S.GlobalDeclaration as argument and\nreturning True when some property holds, else False.\n\nReturns\n\nUnion[S.GlobalDeclaration, python:None]\n\nFound declaration or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.get_module_body",
        "title": "Model > Model documentation > get_module_body",
        "section": "Model documentation > get_module_body",
        "text": "get_module_body(name: str) -> ModuleBody | None\n\nReturn module body of name ‘name’\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.get_module_from_pathid",
        "title": "Model > Model documentation > get_module_from_pathid",
        "section": "Model documentation > get_module_from_pathid",
        "text": "get_module_from_pathid(pathid: str, module: Module) -> Module | None\n\nReturn the Module instance for a given pathid.\nA path is of the form [ID ::]+ ID, where the last ID is the object\nname, and the “ID::ID…::” is the module path.\n\nIf the pathid has no path part (reduced to ID), return module.\n\nParameters\n\npathid\n\npython:str\n\nobject full path\n\nmodule\n\nModule\n\nContext module where the search occurs.\n\nReturns\n\nUnion[S.Module, python:None]\n\nModule of the object, or None if not module found\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.get_module_interface",
        "title": "Model > Model documentation > get_module_interface",
        "section": "Model documentation > get_module_interface",
        "text": "get_module_interface(name: str) -> ModuleInterface | None\n\nReturn module interface of name ‘name’\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.load_all_modules",
        "title": "Model > Model documentation > load_all_modules",
        "section": "Model documentation > load_all_modules",
        "text": "load_all_modules()\n\nLoad systematically all modules.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.load_module",
        "title": "Model > Model documentation > load_module",
        "section": "Model documentation > load_module",
        "text": "load_module(name: str)\n\nLoad module by name\n\nParameters\n\nname\n\npython:str\n\nModule name.\n\nReturns\n\nModule\n\nSwan Module, either a ModuleBody or a ModuleInterface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.all_modules_loaded",
        "title": "Model > Model documentation > all_modules_loaded",
        "section": "Model documentation > all_modules_loaded",
        "text": "property all_modules_loaded: True\n\nReturn True when all Swan modules have been loaded.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.constants",
        "title": "Model > Model documentation > constants",
        "section": "Model documentation > constants",
        "text": "property constants: Generator[ConstDecl, None, None]\n\nReturn a generator on constant declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.declarations",
        "title": "Model > Model documentation > declarations",
        "section": "Model documentation > declarations",
        "text": "property declarations: Generator[GlobalDeclaration, None, None]\n\nDeclarations found in all modules/interfaces as a generator.\n\nThe Swan code of a module/interface is loaded if not yet loaded.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.groups",
        "title": "Model > Model documentation > groups",
        "section": "Model documentation > groups",
        "text": "property groups: Generator[GroupDecl, None, None]\n\nReturn a generator on group declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.modules",
        "title": "Model > Model documentation > modules",
        "section": "Model documentation > modules",
        "text": "property modules: Generator[Module, None, None]\n\nLoaded module (module body or interface) as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.operators",
        "title": "Model > Model documentation > operators",
        "section": "Model documentation > operators",
        "text": "property operators: Generator[Operator, None, None]\n\nReturn a generator on operator declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.parser",
        "title": "Model > Model documentation > parser",
        "section": "Model documentation > parser",
        "text": "property parser: SwanParser\n\nSwan parser.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.project",
        "title": "Model > Model documentation > project",
        "section": "Model documentation > project",
        "text": "property project: IProject\n\nModel project, as a Project object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.sensors",
        "title": "Model > Model documentation > sensors",
        "section": "Model documentation > sensors",
        "text": "property sensors: Generator[SensorDecl, None, None]\n\nReturn a generator on sensor declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.signatures",
        "title": "Model > Model documentation > signatures",
        "section": "Model documentation > signatures",
        "text": "property signatures: Generator[Signature, None, None]\n\nReturn a generator on operator signature declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/model",
        "href": "api/model.html#ansys.scadeone.core.model.Model.types",
        "title": "Model > Model documentation > types",
        "section": "Model documentation > types",
        "text": "property types: Generator[TypeDecl, None, None]\n\nReturn a generator on type declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/quad_flight_control",
        "href": "examples/quad_flight_control.html#quadflightcontrol-example-setup-code",
        "title": "QuadFlightControl example setup code",
        "section": "QuadFlightControl example setup code",
        "text": "The QuadFlightControl example provided with Scade One is used by the various code examples\nprovided in. ref_examples.\nThe QuadFlightControl example is located in the examples/QuadFlightControl\nfolder of the Scade One installation directory.\nAs the setup is almost the same for each example using the QuadFlightControl example,\nthe proper initial code is:\nNote that the ScadeOne instance is created with the install_dir parameter\nset.\nThe import of the cast operation is sometimes used to indicate\nthe type of an object to Python linters. This operation has no overhead\nand is not used in all scripts.\nQuadFlightControl example setup code\nexamples/QuadFlightControl\nScadeOne\ninstall_dir\ncast"
    },
    {
        "objectID": "api/language/declarations/index",
        "href": "api/language/declarations/index.html#declarations",
        "title": "Declarations",
        "section": "Declarations",
        "text": "This section describes the classes that represent Swan declarations.\nDeclarations are the global definitions: const, sensor, type and group.\nDeclarations are also operator in a module body and operator signature in the interface of\na module interface.\nThe API defines classes that are used by other classes, like class for path identifiers.\nThese classes are grouped in the Common Classes section.\nDeclarations"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#structure",
        "title": "Structure",
        "section": "Structure",
        "text": "Operation\nClass\n{} (Structure constructor)\nStructConstructor\n.() (Structure destructor)\nStructDestructor\n.l (Projection)\nStructProjection\n_ with .l (Functional update)\nSee update\nBases: Expression\nStructure expression, with optional type for cast\nto structure from a group: { group } [[ : path_id]].\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nGroup value\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nStructure type.\nBases: Expression\nGroup creation: path_id group (expr).\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nExpression.\nGroup type.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Expression\nStatic structure field access: expr . label.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nExpression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nField name.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nStructure\nStructure operations\nStructConstructor\nStructDestructor\nStructProjection\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructConstructor",
        "title": "Structure > Structure > StructConstructor",
        "section": "Structure > StructConstructor",
        "text": "class ansys.scadeone.core.swan.StructConstructor(group: Group, type: PathIdentifier | None = None)\n\nBases: Expression\n\nStructure expression, with optional type for cast\nto structure from a group: { group } [[ : path_id]].\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty group: Group\n\nGroup value\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty type: PathIdentifier | None\n\nStructure type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructConstructor.get_full_path",
        "title": "Structure > Structure > get_full_path",
        "section": "Structure > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructConstructor.set_owner",
        "title": "Structure > Structure > set_owner",
        "section": "Structure > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructConstructor.group",
        "title": "Structure > Structure > group",
        "section": "Structure > group",
        "text": "property group: Group\n\nGroup value\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructConstructor.is_protected",
        "title": "Structure > Structure > is_protected",
        "section": "Structure > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructConstructor.model",
        "title": "Structure > Structure > model",
        "section": "Structure > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructConstructor.module",
        "title": "Structure > Structure > module",
        "section": "Structure > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructConstructor.owner",
        "title": "Structure > Structure > owner",
        "section": "Structure > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructConstructor.type",
        "title": "Structure > Structure > type",
        "section": "Structure > type",
        "text": "property type: PathIdentifier | None\n\nStructure type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructDestructor",
        "title": "Structure > Structure > StructDestructor",
        "section": "Structure > StructDestructor",
        "text": "class ansys.scadeone.core.swan.StructDestructor(group: PathIdentifier, expr: Expression)\n\nBases: Expression\n\nGroup creation: path_id group (expr).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!\n\n\n\nproperty group: PathIdentifier\n\nGroup type.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructDestructor.get_full_path",
        "title": "Structure > Structure > get_full_path",
        "section": "Structure > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructDestructor.set_owner",
        "title": "Structure > Structure > set_owner",
        "section": "Structure > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructDestructor.expr",
        "title": "Structure > Structure > expr",
        "section": "Structure > expr",
        "text": "property expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructDestructor.group",
        "title": "Structure > Structure > group",
        "section": "Structure > group",
        "text": "property group: PathIdentifier\n\nGroup type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructDestructor.is_protected",
        "title": "Structure > Structure > is_protected",
        "section": "Structure > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructDestructor.model",
        "title": "Structure > Structure > model",
        "section": "Structure > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructDestructor.module",
        "title": "Structure > Structure > module",
        "section": "Structure > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructDestructor.owner",
        "title": "Structure > Structure > owner",
        "section": "Structure > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructProjection",
        "title": "Structure > Structure > StructProjection",
        "section": "Structure > StructProjection",
        "text": "class ansys.scadeone.core.swan.StructProjection(expr: Expression, label: Identifier)\n\nBases: Expression\n\nStatic structure field access: expr . label.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty label: Identifier\n\nField name.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructProjection.get_full_path",
        "title": "Structure > Structure > get_full_path",
        "section": "Structure > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructProjection.set_owner",
        "title": "Structure > Structure > set_owner",
        "section": "Structure > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructProjection.expr",
        "title": "Structure > Structure > expr",
        "section": "Structure > expr",
        "text": "property expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructProjection.is_protected",
        "title": "Structure > Structure > is_protected",
        "section": "Structure > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructProjection.label",
        "title": "Structure > Structure > label",
        "section": "Structure > label",
        "text": "property label: Identifier\n\nField name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructProjection.model",
        "title": "Structure > Structure > model",
        "section": "Structure > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructProjection.module",
        "title": "Structure > Structure > module",
        "section": "Structure > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/structure",
        "href": "api/language/expressions/structure.html#ansys.scadeone.core.swan.StructProjection.owner",
        "title": "Structure > Structure > owner",
        "section": "Structure > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#061---2025-02-03",
        "title": "0.6.1 - 2025-02-03",
        "section": "0.6.1 - 2025-02-03",
        "text": "No significant changes.\n0.6.1 - 2025-02-03"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#061---2025-01-31",
        "title": "0.6.1 - 2025-02-03 > 0.6.1 - 2025-01-31",
        "section": "0.6.1 - 2025-01-31",
        "text": "0.6.1 - 2025-01-31"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "0.6.1 - 2025-02-03 > Added",
        "section": "Added",
        "text": "technical review #14\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "0.6.1 - 2025-02-03 > Documentation",
        "section": "Documentation",
        "text": "Documentation only changes #27\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "0.6.1 - 2025-02-03 > Maintenance",
        "section": "Maintenance",
        "text": "update doc build #28\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changelog",
        "title": "0.6.1 - 2025-02-03 > Changelog",
        "section": "Changelog",
        "text": "Changelog"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#expressions",
        "title": "Expressions",
        "section": "Expressions",
        "text": "Expressions are implemented with classes that have Expression as top-level class.\nProtected expressions are implemented as ProtectedExpr.\nGroups as defined in ref_group are also Expression.\nBases: SwanItem\nBase class for expressions.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Expression, ProtectedItem\nProtected expression, i.e., saved as string if syntactically incorrect.\nFull path of Swan construct.\nCheck if protected data has the specified markup.\nString markup.\nTrue when instance markup is same as parameter.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nProtected data between markups.\nProtected data.\nTell if item is syntactically protected and provided as a string.\nProtection markup.\nMarkup string.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nExpressions\nExpression\nProtectedExpr\nExpression\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nProtectedItem\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\npython:str\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.Expression",
        "title": "Expressions > Expressions > Expression",
        "section": "Expressions > Expression",
        "text": "class ansys.scadeone.core.swan.Expression\n\nBases: SwanItem\n\nBase class for expressions.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.Expression.get_full_path",
        "title": "Expressions > Expressions > get_full_path",
        "section": "Expressions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.Expression.set_owner",
        "title": "Expressions > Expressions > set_owner",
        "section": "Expressions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.Expression.is_protected",
        "title": "Expressions > Expressions > is_protected",
        "section": "Expressions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.Expression.model",
        "title": "Expressions > Expressions > model",
        "section": "Expressions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.Expression.module",
        "title": "Expressions > Expressions > module",
        "section": "Expressions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.Expression.owner",
        "title": "Expressions > Expressions > owner",
        "section": "Expressions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.ProtectedExpr",
        "title": "Expressions > Expressions > ProtectedExpr",
        "section": "Expressions > ProtectedExpr",
        "text": "class ansys.scadeone.core.swan.ProtectedExpr(data: str, markup: str | None = 'syntax')\n\nBases: Expression, ProtectedItem\n\nProtected expression, i.e., saved as string if syntactically incorrect.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nhas_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.ProtectedExpr.get_full_path",
        "title": "Expressions > Expressions > get_full_path",
        "section": "Expressions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.ProtectedExpr.has_markup",
        "title": "Expressions > Expressions > has_markup",
        "section": "Expressions > has_markup",
        "text": "has_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.ProtectedExpr.set_owner",
        "title": "Expressions > Expressions > set_owner",
        "section": "Expressions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.ProtectedExpr.data",
        "title": "Expressions > Expressions > data",
        "section": "Expressions > data",
        "text": "property data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.ProtectedExpr.is_protected",
        "title": "Expressions > Expressions > is_protected",
        "section": "Expressions > is_protected",
        "text": "property is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.ProtectedExpr.markup",
        "title": "Expressions > Expressions > markup",
        "section": "Expressions > markup",
        "text": "property markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.ProtectedExpr.model",
        "title": "Expressions > Expressions > model",
        "section": "Expressions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.ProtectedExpr.module",
        "title": "Expressions > Expressions > module",
        "section": "Expressions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/index",
        "href": "api/language/expressions/index.html#ansys.scadeone.core.swan.ProtectedExpr.owner",
        "title": "Expressions > Expressions > owner",
        "section": "Expressions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/stpimporter",
        "href": "api/svc/stpimporter.html#scade-suite-test-procedure-importer",
        "title": "SCADE Suite test procedure importer",
        "section": "SCADE Suite test procedure importer",
        "text": "The stpimporter command allows to turn sets of SSS scenarios defined\nin a SCADE Test STP test procedure into simulation data files.\nIt is used as a command line, installed along with pyscadeone:\nSee Command Line section for details.\nSCADE Suite test procedure importer"
    },
    {
        "objectID": "api/svc/stpimporter",
        "href": "api/svc/stpimporter.html#inputs",
        "title": "SCADE Suite test procedure importer > Inputs",
        "section": "Inputs",
        "text": "To start a conversion, the user shall provide:\nA procedure file (.STP) that has at least one record of the defined SSS files.\nA record name (only if not all the records should be converted).\nThe associated Scade One project (.SPROJ).\nInputs"
    },
    {
        "objectID": "api/svc/stpimporter",
        "href": "api/svc/stpimporter.html#outputs",
        "title": "SCADE Suite test procedure importer > Outputs",
        "section": "Outputs",
        "text": "For each desired record, the importer produces two files:\nOne file name.sd setting all the input flows of the operator defined\nin the test, including used sensors, for the tests execution in each cycle\nOne file name_checks.sd for the checks of outputs.\nThe name corresponds to the record name in the procedure file.\nAll the files are created in a folder which name matches the respective procedure element\nname in the STP file. A folder is eventually created if not existing.\nThe stpimporter.log file is created in the folder where the command is launched.\nThis file notifies which variables or commands are not converted into simulation data,\nand provides the full readable content of every generated simulation data file.\nOutputs\nname.sd\nname_checks.sd\nstpimporter.log"
    },
    {
        "objectID": "api/svc/stpimporter",
        "href": "api/svc/stpimporter.html#supported-features",
        "title": "SCADE Suite test procedure importer > Supported features",
        "section": "Supported features",
        "text": "For every record, stpimporter parses any inits, preambles and scenarios.\nFor every flow, it looks for its corresponding type in the Swan files based on module::operator/name.\nSupported types:\nbool\nint8, int16, int32, int64\nuint8, uint16, uint32, uint64\nfloat32, float64\nchar\nenums\nstructures\narrays\ncombination of the preceding\nThe SSM::check command with optional sustain parameter\nAsserts equality for N cycles or forever. The real option is ignored.\nThe SSM::alias command\nReplaces any alias use by the original variable name.\nThe SSM::cycle [n] command\nAdds n (default 1) occurrences to each variable value.\nThe SSM::alias_value command\nReplaces any alias use by a value. A value can contain other alias values.\nThe use of None sequences - whenever a variable is not defined at a cycle.\nThe generated sequences have all the same number of values.\nThey are eventually completed if the .SSS scenario does not contain enough values for some signals.\nSupported features"
    },
    {
        "objectID": "api/svc/stpimporter",
        "href": "api/svc/stpimporter.html#limitations",
        "title": "SCADE Suite test procedure importer > Limitations",
        "section": "Limitations",
        "text": "Multiple features offered by SSS files are not supported in Simulation Data.\nThose are ignored and reported in the logs:\nAny SSM commands that are not supported are ignored.\nThe operator attribute must be defined in STP file and be the same as the operator\nin the .SSS files.\nInput values:\nPartial inputs are not supported. The example “(1, ,2)” means that the second value should be the last given value.\nAll inputs must be initialized. There is no default value like QTE does.\nTypes:\nOnly numerical constants are evaluated to determine array sizes. There is no evaluation of static expressions\nEnumeration values set with a pragma are not supported. For example, given enum {#pragma cg enum_val 6#end Red, Green, Blue} a 6 in .SSS is not recognized as a valid enum value\nImported types are not supported\nNaN, +Inf, -Inf are not supported\n? value is not supported.\nChecks not supported:\nTolerance (SSM::tolerance or real argument of SSM::check)\nProbes are not taken into account (SSM::check)\nCheck of parts of a complex type (SSM::check with paths, indexes, occurrences, etc.)\nComplex checks (ranges, lambda expressions, etc.)\nImages checks (SSM::check image).\nCSV files - only SSS files are converted.\nThe None values cannot be mixed with actual values in the same sequence for structures and arrays.\nLimitations"
    },
    {
        "objectID": "api/svc/stpimporter",
        "href": "api/svc/stpimporter.html#command-line",
        "title": "SCADE Suite test procedure importer > Command line",
        "section": "Command line",
        "text": "The stpimporter command is installed in the Scripts folder of the Python installation directory\nwhere the pyscadeone library is installed. The command line is as follows:\nstp_path              STP path\nsproj_path            Associated Swan project path\nShow this help message and exit\nSpecific record name\nUse specific output directory\nScade One installation path\nPrint exported SD files\nSpecify root operator (override STP information)\nRenaming log file from Scade Suite importer\nDisable garbage collection\nThe –renamings option specifies the path to the renaming log file\nfrom the SCADE Suite importer, usually named renamings.log. This file contains the renamings\nperformed by the SCADE Suite importer in case of packages within packages and declarations at top-level\nout of any packages. This file is mandatory for stpimporter command in these cases\nto correctly convert the SSS files with the proper names.\nCommand line\nScripts\nstp_path\nsproj_path"
    },
    {
        "objectID": "api/svc/navigation/index",
        "href": "api/svc/navigation/index.html#model-navigation",
        "title": "Model navigation",
        "section": "Model navigation",
        "text": "This section describes the API to navigate through model elements.\nA Swan API object represents a Swan construct and gives access to each construct children\nof the construct as a raw low-level access, but a higher-level access is sometimes required,\nlike accessing an instance through its path_id (or name).\nA general tree walk is implemented by the Visitor class.\nModel navigation\nVisitor"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#modules-and-interfaces",
        "title": "Modules and Interfaces",
        "section": "Modules and Interfaces",
        "text": "This section describes the classes that represent a module body\nor a module interface. It also describes the class representing\na use directive which is used to reference a module/interface\nin an other module/interface.\nSee also ref_op_decl and ref_global_decl.\nBases: Module\nModule body definition.\nReturn the module body for a module interface if it exists.\nReturn declarations matched by a filter.\nA function of one argument of type GlobalDeclaration, returning True or False.\nGenerator on matching declarations.\nReturn the type, global, or operator declaration searching by namespace.\nFull Swan path of module.\nReturn a dictionary of use directives by their name or given alias.\nThe name is the last part of the path ID.\nReturns\nDict[str, UseDirective]\nReturn the module interface for a module body if it exists.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturn a generator on constant declarations.\nDeclarations as a list. Can be modified.\nDeclarations as a generator.\nReturn module extension, with ‘.’ included.\nReturn a file name based on module name and namespaces.\nReturn a generator on group declarations.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nModule or Interface name.\nReturn a generator on operators.\nOwner of current Swan construct.\nReturn a generator on sensor declarations.\nSource of the module, as a string (file name).\nReturn a generator on type declarations.\nModule’s use directives as a list. Can be modified.\nModule’s use directives as a generator.\nBases: Module\nModule interface definition.\nReturn the module body for a module interface if it exists.\nReturn declarations matched by a filter.\nA function of one argument of type GlobalDeclaration, returning True or False.\nGenerator on matching declarations.\nReturn the type, global, or operator declaration searching by namespace.\nFull Swan path of module.\nReturn a dictionary of use directives by their name or given alias.\nThe name is the last part of the path ID.\nReturns\nDict[str, UseDirective]\nReturn the module interface for a module body if it exists.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturn a generator on constant declarations.\nDeclarations as a list. Can be modified.\nDeclarations as a generator.\nReturn module extension, with . included.\nReturn a file name based on module name and namespaces.\nReturn a generator on group declarations.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nModule or Interface name.\nOwner of current Swan construct.\nReturn a generator on sensor declarations.\nReturn a generator on signatures.\nSource of the module, as a string (file name).\nReturn a generator on type declarations.\nModule’s use directives as a list. Can be modified.\nModule’s use directives as a generator.\nBases: ModuleItem\nClass for use directive.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nRenaming of module.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nUsed module path.\nModules and Interfaces\nModule\nfunction\nGenerator\nGlobalDeclaration\npython:None\npython:None\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nModule\nfunction\nGenerator\nGlobalDeclaration\npython:None\npython:None\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nModuleItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody",
        "title": "Modules and Interfaces > Modules and Interfaces > ModuleBody",
        "section": "Modules and Interfaces > ModuleBody",
        "text": "class ansys.scadeone.core.swan.ModuleBody(name: PathIdentifier, use_directives: List[UseDirective] | None = None, declarations: List[GlobalDeclaration] | None = None)\n\nBases: Module\n\nModule body definition.\n\n!! processed by numpydoc !!\n\n\n\nbody() -> ModuleBody\n\nReturn the module body for a module interface if it exists.\n\n!! processed by numpydoc !!\n\n\n\nfilter_declarations(filter_fn) -> Generator[GlobalDeclaration, None, None]\n\nReturn declarations matched by a filter.\n\nParameters\n\nfilter_fn\n\nfunction\n\nA function of one argument of type GlobalDeclaration, returning True or False.\n\nYields\n\nGenerator[GlobalDeclaration, python:None, python:None]\n\nGenerator on matching declarations.\n\n!! processed by numpydoc !!\n\n\n\nget_declaration(name: str) -> GlobalDeclaration\n\nReturn the type, global, or operator declaration searching by namespace.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull Swan path of module.\n\n!! processed by numpydoc !!\n\n\n\nget_use_directive(name: str) -> UseDirective\n\nReturn a dictionary of use directives by their name or given alias.\nThe name is the last part of the path ID.\n\nReturns\nDict[str, UseDirective]\n\n!! processed by numpydoc !!\n\n\n\ninterface() -> ModuleInterface\n\nReturn the module interface for a module body if it exists.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty constants: Generator[ConstDecl, None, None]\n\nReturn a generator on constant declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty declaration_list: List[ModuleItem]\n\nDeclarations as a list. Can be modified.\n\n!! processed by numpydoc !!\n\n\n\nproperty declarations: Generator[ModuleItem, None, None]\n\nDeclarations as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty extension: str\n\nReturn module extension, with ‘.’ included.\n\n!! processed by numpydoc !!\n\n\n\nproperty file_name: str\n\nReturn a file name based on module name and namespaces.\n\n!! processed by numpydoc !!\n\n\n\nproperty groups: Generator[GroupDecl, None, None]\n\nReturn a generator on group declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty name: PathIdentifier\n\nModule or Interface name.\n\n!! processed by numpydoc !!\n\n\n\nproperty operators: Generator[Operator, None, None]\n\nReturn a generator on operators.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty sensors: Generator[SensorDecl, None, None]\n\nReturn a generator on sensor declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty source: str | None\n\nSource of the module, as a string (file name).\n\n!! processed by numpydoc !!\n\n\n\nproperty types: Generator[TypeDecl, None, None]\n\nReturn a generator on type declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty use_directive_list: List[UseDirective]\n\nModule’s use directives as a list. Can be modified.\n\n!! processed by numpydoc !!\n\n\n\nproperty use_directives: Generator[UseDirective, None, None]\n\nModule’s use directives as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.body",
        "title": "Modules and Interfaces > Modules and Interfaces > body",
        "section": "Modules and Interfaces > body",
        "text": "body() -> ModuleBody\n\nReturn the module body for a module interface if it exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.filter_declarations",
        "title": "Modules and Interfaces > Modules and Interfaces > filter_declarations",
        "section": "Modules and Interfaces > filter_declarations",
        "text": "filter_declarations(filter_fn) -> Generator[GlobalDeclaration, None, None]\n\nReturn declarations matched by a filter.\n\nParameters\n\nfilter_fn\n\nfunction\n\nA function of one argument of type GlobalDeclaration, returning True or False.\n\nYields\n\nGenerator[GlobalDeclaration, python:None, python:None]\n\nGenerator on matching declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.get_declaration",
        "title": "Modules and Interfaces > Modules and Interfaces > get_declaration",
        "section": "Modules and Interfaces > get_declaration",
        "text": "get_declaration(name: str) -> GlobalDeclaration\n\nReturn the type, global, or operator declaration searching by namespace.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.get_full_path",
        "title": "Modules and Interfaces > Modules and Interfaces > get_full_path",
        "section": "Modules and Interfaces > get_full_path",
        "text": "get_full_path() -> str\n\nFull Swan path of module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.get_use_directive",
        "title": "Modules and Interfaces > Modules and Interfaces > get_use_directive",
        "section": "Modules and Interfaces > get_use_directive",
        "text": "get_use_directive(name: str) -> UseDirective\n\nReturn a dictionary of use directives by their name or given alias.\nThe name is the last part of the path ID.\n\nReturns\nDict[str, UseDirective]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.interface",
        "title": "Modules and Interfaces > Modules and Interfaces > interface",
        "section": "Modules and Interfaces > interface",
        "text": "interface() -> ModuleInterface\n\nReturn the module interface for a module body if it exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.set_owner",
        "title": "Modules and Interfaces > Modules and Interfaces > set_owner",
        "section": "Modules and Interfaces > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.constants",
        "title": "Modules and Interfaces > Modules and Interfaces > constants",
        "section": "Modules and Interfaces > constants",
        "text": "property constants: Generator[ConstDecl, None, None]\n\nReturn a generator on constant declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.declaration_list",
        "title": "Modules and Interfaces > Modules and Interfaces > declaration_list",
        "section": "Modules and Interfaces > declaration_list",
        "text": "property declaration_list: List[ModuleItem]\n\nDeclarations as a list. Can be modified.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.declarations",
        "title": "Modules and Interfaces > Modules and Interfaces > declarations",
        "section": "Modules and Interfaces > declarations",
        "text": "property declarations: Generator[ModuleItem, None, None]\n\nDeclarations as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.extension",
        "title": "Modules and Interfaces > Modules and Interfaces > extension",
        "section": "Modules and Interfaces > extension",
        "text": "property extension: str\n\nReturn module extension, with ‘.’ included.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.file_name",
        "title": "Modules and Interfaces > Modules and Interfaces > file_name",
        "section": "Modules and Interfaces > file_name",
        "text": "property file_name: str\n\nReturn a file name based on module name and namespaces.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.groups",
        "title": "Modules and Interfaces > Modules and Interfaces > groups",
        "section": "Modules and Interfaces > groups",
        "text": "property groups: Generator[GroupDecl, None, None]\n\nReturn a generator on group declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.is_protected",
        "title": "Modules and Interfaces > Modules and Interfaces > is_protected",
        "section": "Modules and Interfaces > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.model",
        "title": "Modules and Interfaces > Modules and Interfaces > model",
        "section": "Modules and Interfaces > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.module",
        "title": "Modules and Interfaces > Modules and Interfaces > module",
        "section": "Modules and Interfaces > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.name",
        "title": "Modules and Interfaces > Modules and Interfaces > name",
        "section": "Modules and Interfaces > name",
        "text": "property name: PathIdentifier\n\nModule or Interface name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.operators",
        "title": "Modules and Interfaces > Modules and Interfaces > operators",
        "section": "Modules and Interfaces > operators",
        "text": "property operators: Generator[Operator, None, None]\n\nReturn a generator on operators.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.owner",
        "title": "Modules and Interfaces > Modules and Interfaces > owner",
        "section": "Modules and Interfaces > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.sensors",
        "title": "Modules and Interfaces > Modules and Interfaces > sensors",
        "section": "Modules and Interfaces > sensors",
        "text": "property sensors: Generator[SensorDecl, None, None]\n\nReturn a generator on sensor declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.source",
        "title": "Modules and Interfaces > Modules and Interfaces > source",
        "section": "Modules and Interfaces > source",
        "text": "property source: str | None\n\nSource of the module, as a string (file name).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.types",
        "title": "Modules and Interfaces > Modules and Interfaces > types",
        "section": "Modules and Interfaces > types",
        "text": "property types: Generator[TypeDecl, None, None]\n\nReturn a generator on type declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.use_directive_list",
        "title": "Modules and Interfaces > Modules and Interfaces > use_directive_list",
        "section": "Modules and Interfaces > use_directive_list",
        "text": "property use_directive_list: List[UseDirective]\n\nModule’s use directives as a list. Can be modified.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleBody.use_directives",
        "title": "Modules and Interfaces > Modules and Interfaces > use_directives",
        "section": "Modules and Interfaces > use_directives",
        "text": "property use_directives: Generator[UseDirective, None, None]\n\nModule’s use directives as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface",
        "title": "Modules and Interfaces > Modules and Interfaces > ModuleInterface",
        "section": "Modules and Interfaces > ModuleInterface",
        "text": "class ansys.scadeone.core.swan.ModuleInterface(name: PathIdentifier, use_directives: List[UseDirective] | None = None, declarations: List[ModuleItem] | None = None)\n\nBases: Module\n\nModule interface definition.\n\n!! processed by numpydoc !!\n\n\n\nbody() -> ModuleBody\n\nReturn the module body for a module interface if it exists.\n\n!! processed by numpydoc !!\n\n\n\nfilter_declarations(filter_fn) -> Generator[GlobalDeclaration, None, None]\n\nReturn declarations matched by a filter.\n\nParameters\n\nfilter_fn\n\nfunction\n\nA function of one argument of type GlobalDeclaration, returning True or False.\n\nYields\n\nGenerator[GlobalDeclaration, python:None, python:None]\n\nGenerator on matching declarations.\n\n!! processed by numpydoc !!\n\n\n\nget_declaration(name: str) -> GlobalDeclaration\n\nReturn the type, global, or operator declaration searching by namespace.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull Swan path of module.\n\n!! processed by numpydoc !!\n\n\n\nget_use_directive(name: str) -> UseDirective\n\nReturn a dictionary of use directives by their name or given alias.\nThe name is the last part of the path ID.\n\nReturns\nDict[str, UseDirective]\n\n!! processed by numpydoc !!\n\n\n\ninterface() -> ModuleInterface\n\nReturn the module interface for a module body if it exists.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty constants: Generator[ConstDecl, None, None]\n\nReturn a generator on constant declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty declaration_list: List[ModuleItem]\n\nDeclarations as a list. Can be modified.\n\n!! processed by numpydoc !!\n\n\n\nproperty declarations: Generator[ModuleItem, None, None]\n\nDeclarations as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty extension: str\n\nReturn module extension, with . included.\n\n!! processed by numpydoc !!\n\n\n\nproperty file_name: str\n\nReturn a file name based on module name and namespaces.\n\n!! processed by numpydoc !!\n\n\n\nproperty groups: Generator[GroupDecl, None, None]\n\nReturn a generator on group declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty name: PathIdentifier\n\nModule or Interface name.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty sensors: Generator[SensorDecl, None, None]\n\nReturn a generator on sensor declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty signatures: Generator[Signature, None, None]\n\nReturn a generator on signatures.\n\n!! processed by numpydoc !!\n\n\n\nproperty source: str | None\n\nSource of the module, as a string (file name).\n\n!! processed by numpydoc !!\n\n\n\nproperty types: Generator[TypeDecl, None, None]\n\nReturn a generator on type declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty use_directive_list: List[UseDirective]\n\nModule’s use directives as a list. Can be modified.\n\n!! processed by numpydoc !!\n\n\n\nproperty use_directives: Generator[UseDirective, None, None]\n\nModule’s use directives as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.body",
        "title": "Modules and Interfaces > Modules and Interfaces > body",
        "section": "Modules and Interfaces > body",
        "text": "body() -> ModuleBody\n\nReturn the module body for a module interface if it exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.filter_declarations",
        "title": "Modules and Interfaces > Modules and Interfaces > filter_declarations",
        "section": "Modules and Interfaces > filter_declarations",
        "text": "filter_declarations(filter_fn) -> Generator[GlobalDeclaration, None, None]\n\nReturn declarations matched by a filter.\n\nParameters\n\nfilter_fn\n\nfunction\n\nA function of one argument of type GlobalDeclaration, returning True or False.\n\nYields\n\nGenerator[GlobalDeclaration, python:None, python:None]\n\nGenerator on matching declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.get_declaration",
        "title": "Modules and Interfaces > Modules and Interfaces > get_declaration",
        "section": "Modules and Interfaces > get_declaration",
        "text": "get_declaration(name: str) -> GlobalDeclaration\n\nReturn the type, global, or operator declaration searching by namespace.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.get_full_path",
        "title": "Modules and Interfaces > Modules and Interfaces > get_full_path",
        "section": "Modules and Interfaces > get_full_path",
        "text": "get_full_path() -> str\n\nFull Swan path of module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.get_use_directive",
        "title": "Modules and Interfaces > Modules and Interfaces > get_use_directive",
        "section": "Modules and Interfaces > get_use_directive",
        "text": "get_use_directive(name: str) -> UseDirective\n\nReturn a dictionary of use directives by their name or given alias.\nThe name is the last part of the path ID.\n\nReturns\nDict[str, UseDirective]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.interface",
        "title": "Modules and Interfaces > Modules and Interfaces > interface",
        "section": "Modules and Interfaces > interface",
        "text": "interface() -> ModuleInterface\n\nReturn the module interface for a module body if it exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.set_owner",
        "title": "Modules and Interfaces > Modules and Interfaces > set_owner",
        "section": "Modules and Interfaces > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.constants",
        "title": "Modules and Interfaces > Modules and Interfaces > constants",
        "section": "Modules and Interfaces > constants",
        "text": "property constants: Generator[ConstDecl, None, None]\n\nReturn a generator on constant declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.declaration_list",
        "title": "Modules and Interfaces > Modules and Interfaces > declaration_list",
        "section": "Modules and Interfaces > declaration_list",
        "text": "property declaration_list: List[ModuleItem]\n\nDeclarations as a list. Can be modified.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.declarations",
        "title": "Modules and Interfaces > Modules and Interfaces > declarations",
        "section": "Modules and Interfaces > declarations",
        "text": "property declarations: Generator[ModuleItem, None, None]\n\nDeclarations as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.extension",
        "title": "Modules and Interfaces > Modules and Interfaces > extension",
        "section": "Modules and Interfaces > extension",
        "text": "property extension: str\n\nReturn module extension, with . included.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.file_name",
        "title": "Modules and Interfaces > Modules and Interfaces > file_name",
        "section": "Modules and Interfaces > file_name",
        "text": "property file_name: str\n\nReturn a file name based on module name and namespaces.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.groups",
        "title": "Modules and Interfaces > Modules and Interfaces > groups",
        "section": "Modules and Interfaces > groups",
        "text": "property groups: Generator[GroupDecl, None, None]\n\nReturn a generator on group declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.is_protected",
        "title": "Modules and Interfaces > Modules and Interfaces > is_protected",
        "section": "Modules and Interfaces > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.model",
        "title": "Modules and Interfaces > Modules and Interfaces > model",
        "section": "Modules and Interfaces > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.module",
        "title": "Modules and Interfaces > Modules and Interfaces > module",
        "section": "Modules and Interfaces > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.name",
        "title": "Modules and Interfaces > Modules and Interfaces > name",
        "section": "Modules and Interfaces > name",
        "text": "property name: PathIdentifier\n\nModule or Interface name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.owner",
        "title": "Modules and Interfaces > Modules and Interfaces > owner",
        "section": "Modules and Interfaces > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.sensors",
        "title": "Modules and Interfaces > Modules and Interfaces > sensors",
        "section": "Modules and Interfaces > sensors",
        "text": "property sensors: Generator[SensorDecl, None, None]\n\nReturn a generator on sensor declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.signatures",
        "title": "Modules and Interfaces > Modules and Interfaces > signatures",
        "section": "Modules and Interfaces > signatures",
        "text": "property signatures: Generator[Signature, None, None]\n\nReturn a generator on signatures.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.source",
        "title": "Modules and Interfaces > Modules and Interfaces > source",
        "section": "Modules and Interfaces > source",
        "text": "property source: str | None\n\nSource of the module, as a string (file name).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.types",
        "title": "Modules and Interfaces > Modules and Interfaces > types",
        "section": "Modules and Interfaces > types",
        "text": "property types: Generator[TypeDecl, None, None]\n\nReturn a generator on type declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.use_directive_list",
        "title": "Modules and Interfaces > Modules and Interfaces > use_directive_list",
        "section": "Modules and Interfaces > use_directive_list",
        "text": "property use_directive_list: List[UseDirective]\n\nModule’s use directives as a list. Can be modified.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.ModuleInterface.use_directives",
        "title": "Modules and Interfaces > Modules and Interfaces > use_directives",
        "section": "Modules and Interfaces > use_directives",
        "text": "property use_directives: Generator[UseDirective, None, None]\n\nModule’s use directives as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.UseDirective",
        "title": "Modules and Interfaces > Modules and Interfaces > UseDirective",
        "section": "Modules and Interfaces > UseDirective",
        "text": "class ansys.scadeone.core.swan.UseDirective(path: PathIdentifier, alias: Identifier | None = None)\n\nBases: ModuleItem\n\nClass for use directive.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty alias: Identifier | None\n\nRenaming of module.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty path: PathIdentifier\n\nUsed module path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.UseDirective.get_full_path",
        "title": "Modules and Interfaces > Modules and Interfaces > get_full_path",
        "section": "Modules and Interfaces > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.UseDirective.set_owner",
        "title": "Modules and Interfaces > Modules and Interfaces > set_owner",
        "section": "Modules and Interfaces > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.UseDirective.alias",
        "title": "Modules and Interfaces > Modules and Interfaces > alias",
        "section": "Modules and Interfaces > alias",
        "text": "property alias: Identifier | None\n\nRenaming of module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.UseDirective.is_protected",
        "title": "Modules and Interfaces > Modules and Interfaces > is_protected",
        "section": "Modules and Interfaces > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.UseDirective.model",
        "title": "Modules and Interfaces > Modules and Interfaces > model",
        "section": "Modules and Interfaces > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.UseDirective.module",
        "title": "Modules and Interfaces > Modules and Interfaces > module",
        "section": "Modules and Interfaces > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.UseDirective.owner",
        "title": "Modules and Interfaces > Modules and Interfaces > owner",
        "section": "Modules and Interfaces > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/module",
        "href": "api/language/declarations/module.html#ansys.scadeone.core.swan.UseDirective.path",
        "title": "Modules and Interfaces > Modules and Interfaces > path",
        "section": "Modules and Interfaces > path",
        "text": "property path: PathIdentifier\n\nUsed module path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#selection",
        "title": "Selection",
        "section": "Selection",
        "text": "These expressions represent if and case expressions.\nSelection"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#conditional-expression",
        "title": "Selection > Conditional expression",
        "section": "Conditional expression",
        "text": "Bases: Expression\nConditional if/then/else expression: if expr then expr else expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nCondition expression.\nElse expression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nThen expression.\nConditional expression\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.IfteExpr",
        "title": "Selection > Conditional expression > IfteExpr",
        "section": "Conditional expression > IfteExpr",
        "text": "class ansys.scadeone.core.swan.IfteExpr(cond_expr: Expression, then_expr: Expression, else_expr: Expression)\n\nBases: Expression\n\nConditional if/then/else expression: if expr then expr else expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty cond_expr: Expression\n\nCondition expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty else_expr: Expression\n\nElse expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty then_expr: Expression\n\nThen expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.IfteExpr.get_full_path",
        "title": "Selection > Conditional expression > get_full_path",
        "section": "Conditional expression > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.IfteExpr.set_owner",
        "title": "Selection > Conditional expression > set_owner",
        "section": "Conditional expression > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.IfteExpr.cond_expr",
        "title": "Selection > Conditional expression > cond_expr",
        "section": "Conditional expression > cond_expr",
        "text": "property cond_expr: Expression\n\nCondition expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.IfteExpr.else_expr",
        "title": "Selection > Conditional expression > else_expr",
        "section": "Conditional expression > else_expr",
        "text": "property else_expr: Expression\n\nElse expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.IfteExpr.is_protected",
        "title": "Selection > Conditional expression > is_protected",
        "section": "Conditional expression > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.IfteExpr.model",
        "title": "Selection > Conditional expression > model",
        "section": "Conditional expression > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.IfteExpr.module",
        "title": "Selection > Conditional expression > module",
        "section": "Conditional expression > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.IfteExpr.owner",
        "title": "Selection > Conditional expression > owner",
        "section": "Conditional expression > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.IfteExpr.then_expr",
        "title": "Selection > Conditional expression > then_expr",
        "section": "Conditional expression > then_expr",
        "text": "property then_expr: Expression\n\nThen expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#case-expression",
        "title": "Selection > Case expression",
        "section": "Case expression",
        "text": "Bases: Expression\nCase expression: case expr of {{ | pattern : expr }}+ ).\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nCase branches.\nCase expression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nCase branch expression:  pattern : expr.\nSee ansys.scadeone.swan.expressions.CaseExpr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nCase branch expression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nCase branch pattern.\nCase expression\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nansys.scadeone.swan.expressions.CaseExpr\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseExpr",
        "title": "Selection > Case expression > CaseExpr",
        "section": "Case expression > CaseExpr",
        "text": "class ansys.scadeone.core.swan.CaseExpr(expr: Expression, branches: List[CaseBranch])\n\nBases: Expression\n\nCase expression: case expr of {{ | pattern : expr }}+ ).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty branches: List[CaseBranch]\n\nCase branches.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nCase expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseExpr.get_full_path",
        "title": "Selection > Case expression > get_full_path",
        "section": "Case expression > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseExpr.set_owner",
        "title": "Selection > Case expression > set_owner",
        "section": "Case expression > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseExpr.branches",
        "title": "Selection > Case expression > branches",
        "section": "Case expression > branches",
        "text": "property branches: List[CaseBranch]\n\nCase branches.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseExpr.expr",
        "title": "Selection > Case expression > expr",
        "section": "Case expression > expr",
        "text": "property expr: Expression\n\nCase expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseExpr.is_protected",
        "title": "Selection > Case expression > is_protected",
        "section": "Case expression > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseExpr.model",
        "title": "Selection > Case expression > model",
        "section": "Case expression > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseExpr.module",
        "title": "Selection > Case expression > module",
        "section": "Case expression > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseExpr.owner",
        "title": "Selection > Case expression > owner",
        "section": "Case expression > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseBranch",
        "title": "Selection > Case expression > CaseBranch",
        "section": "Case expression > CaseBranch",
        "text": "class ansys.scadeone.core.swan.CaseBranch(pattern: Pattern, expr: Expression)\n\nBases: SwanItem\n\nCase branch expression:  pattern : expr.\n\nSee ansys.scadeone.swan.expressions.CaseExpr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nCase branch expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pattern: Pattern\n\nCase branch pattern.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseBranch.get_full_path",
        "title": "Selection > Case expression > get_full_path",
        "section": "Case expression > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseBranch.set_owner",
        "title": "Selection > Case expression > set_owner",
        "section": "Case expression > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseBranch.expr",
        "title": "Selection > Case expression > expr",
        "section": "Case expression > expr",
        "text": "property expr: Expression\n\nCase branch expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseBranch.is_protected",
        "title": "Selection > Case expression > is_protected",
        "section": "Case expression > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseBranch.model",
        "title": "Selection > Case expression > model",
        "section": "Case expression > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseBranch.module",
        "title": "Selection > Case expression > module",
        "section": "Case expression > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseBranch.owner",
        "title": "Selection > Case expression > owner",
        "section": "Case expression > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/selection",
        "href": "api/language/expressions/selection.html#ansys.scadeone.core.swan.CaseBranch.pattern",
        "title": "Selection > Case expression > pattern",
        "section": "Case expression > pattern",
        "text": "property pattern: Pattern\n\nCase branch pattern.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/example",
        "href": "user_guide/example.html#complete-example",
        "title": "Complete example",
        "section": "Complete example",
        "text": "Here is the complete script from the ref_user_guide chapter.\nComplete example"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#variable-declarations",
        "title": "Variable declarations",
        "section": "Variable declarations",
        "text": "Bases: ScopeSection\nImplements:\nvar {{var_decl ;}} section.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when section is given from {text%…%text} markup.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nDeclared variables.\nBases: SwanItem\nBase class for Variable and ProtectedVariable.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Declaration, Variable\nClass for variable declaration.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturn variable declaration string.\nVariable default expression.\nLanguage item identifier.\nTrue when variable is a clock.\nTrue when variable is an input.\nTrue when variable is local.\nTrue when variable is an output.\nTrue when variable is a probe.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nVariable last expression.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nVariable type.\nVariable clock.\nBases: Variable, ProtectedItem\nProtected variable definition as a string.\nFull path of Swan construct.\nCheck if protected data has the specified markup.\nString markup.\nTrue when instance markup is same as parameter.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nProtected data between markups.\nProtected data.\nTell if item is syntactically protected and provided as a string.\nProtection markup.\nMarkup string.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nVariable declarations\nScopeSection\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nDeclaration\nVariable\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nVariable\nProtectedItem\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\npython:str\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarSection",
        "title": "Variable declarations > Variable declarations > VarSection",
        "section": "Variable declarations > VarSection",
        "text": "class ansys.scadeone.core.swan.VarSection(var_decls: List[VarDecl])\n\nBases: ScopeSection\n\nImplements:\n\nvar {{var_decl ;}} section.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty var_decls: List[VarDecl]\n\nDeclared variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarSection.get_full_path",
        "title": "Variable declarations > Variable declarations > get_full_path",
        "section": "Variable declarations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarSection.set_owner",
        "title": "Variable declarations > Variable declarations > set_owner",
        "section": "Variable declarations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarSection.is_protected",
        "title": "Variable declarations > Variable declarations > is_protected",
        "section": "Variable declarations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarSection.is_text",
        "title": "Variable declarations > Variable declarations > is_text",
        "section": "Variable declarations > is_text",
        "text": "property is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarSection.model",
        "title": "Variable declarations > Variable declarations > model",
        "section": "Variable declarations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarSection.module",
        "title": "Variable declarations > Variable declarations > module",
        "section": "Variable declarations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarSection.owner",
        "title": "Variable declarations > Variable declarations > owner",
        "section": "Variable declarations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarSection.var_decls",
        "title": "Variable declarations > Variable declarations > var_decls",
        "section": "Variable declarations > var_decls",
        "text": "property var_decls: List[VarDecl]\n\nDeclared variables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.Variable",
        "title": "Variable declarations > Variable declarations > Variable",
        "section": "Variable declarations > Variable",
        "text": "class ansys.scadeone.core.swan.Variable\n\nBases: SwanItem\n\nBase class for Variable and ProtectedVariable.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.Variable.get_full_path",
        "title": "Variable declarations > Variable declarations > get_full_path",
        "section": "Variable declarations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.Variable.set_owner",
        "title": "Variable declarations > Variable declarations > set_owner",
        "section": "Variable declarations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.Variable.is_protected",
        "title": "Variable declarations > Variable declarations > is_protected",
        "section": "Variable declarations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.Variable.model",
        "title": "Variable declarations > Variable declarations > model",
        "section": "Variable declarations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.Variable.module",
        "title": "Variable declarations > Variable declarations > module",
        "section": "Variable declarations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.Variable.owner",
        "title": "Variable declarations > Variable declarations > owner",
        "section": "Variable declarations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl",
        "title": "Variable declarations > Variable declarations > VarDecl",
        "section": "Variable declarations > VarDecl",
        "text": "class ansys.scadeone.core.swan.VarDecl(id: Identifier, is_clock: bool | None = False, is_probe: bool | None = False, type: GroupTypeExpression | None = None, when: ClockExpr | None = None, default: Expression | None = None, last: Expression | None = None)\n\nBases: Declaration, Variable\n\nClass for variable declaration.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nvar_decl() -> str\n\nReturn variable declaration string.\n\n!! processed by numpydoc !!\n\n\n\nproperty default: Expression | None\n\nVariable default expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_clock: bool\n\nTrue when variable is a clock.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_input: bool\n\nTrue when variable is an input.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_local: bool\n\nTrue when variable is local.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_output: bool\n\nTrue when variable is an output.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_probe: bool\n\nTrue when variable is a probe.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty last: Expression | None\n\nVariable last expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty type: GroupTypeExpression | None\n\nVariable type.\n\n!! processed by numpydoc !!\n\n\n\nproperty when: ClockExpr | None\n\nVariable clock.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.get_full_path",
        "title": "Variable declarations > Variable declarations > get_full_path",
        "section": "Variable declarations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.set_owner",
        "title": "Variable declarations > Variable declarations > set_owner",
        "section": "Variable declarations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.var_decl",
        "title": "Variable declarations > Variable declarations > var_decl",
        "section": "Variable declarations > var_decl",
        "text": "var_decl() -> str\n\nReturn variable declaration string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.default",
        "title": "Variable declarations > Variable declarations > default",
        "section": "Variable declarations > default",
        "text": "property default: Expression | None\n\nVariable default expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.id",
        "title": "Variable declarations > Variable declarations > id",
        "section": "Variable declarations > id",
        "text": "property id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.is_clock",
        "title": "Variable declarations > Variable declarations > is_clock",
        "section": "Variable declarations > is_clock",
        "text": "property is_clock: bool\n\nTrue when variable is a clock.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.is_input",
        "title": "Variable declarations > Variable declarations > is_input",
        "section": "Variable declarations > is_input",
        "text": "property is_input: bool\n\nTrue when variable is an input.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.is_local",
        "title": "Variable declarations > Variable declarations > is_local",
        "section": "Variable declarations > is_local",
        "text": "property is_local: bool\n\nTrue when variable is local.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.is_output",
        "title": "Variable declarations > Variable declarations > is_output",
        "section": "Variable declarations > is_output",
        "text": "property is_output: bool\n\nTrue when variable is an output.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.is_probe",
        "title": "Variable declarations > Variable declarations > is_probe",
        "section": "Variable declarations > is_probe",
        "text": "property is_probe: bool\n\nTrue when variable is a probe.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.is_protected",
        "title": "Variable declarations > Variable declarations > is_protected",
        "section": "Variable declarations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.last",
        "title": "Variable declarations > Variable declarations > last",
        "section": "Variable declarations > last",
        "text": "property last: Expression | None\n\nVariable last expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.model",
        "title": "Variable declarations > Variable declarations > model",
        "section": "Variable declarations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.module",
        "title": "Variable declarations > Variable declarations > module",
        "section": "Variable declarations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.owner",
        "title": "Variable declarations > Variable declarations > owner",
        "section": "Variable declarations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.type",
        "title": "Variable declarations > Variable declarations > type",
        "section": "Variable declarations > type",
        "text": "property type: GroupTypeExpression | None\n\nVariable type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.VarDecl.when",
        "title": "Variable declarations > Variable declarations > when",
        "section": "Variable declarations > when",
        "text": "property when: ClockExpr | None\n\nVariable clock.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.ProtectedVariable",
        "title": "Variable declarations > Variable declarations > ProtectedVariable",
        "section": "Variable declarations > ProtectedVariable",
        "text": "class ansys.scadeone.core.swan.ProtectedVariable(data: str)\n\nBases: Variable, ProtectedItem\n\nProtected variable definition as a string.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nhas_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.ProtectedVariable.get_full_path",
        "title": "Variable declarations > Variable declarations > get_full_path",
        "section": "Variable declarations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.ProtectedVariable.has_markup",
        "title": "Variable declarations > Variable declarations > has_markup",
        "section": "Variable declarations > has_markup",
        "text": "has_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.ProtectedVariable.set_owner",
        "title": "Variable declarations > Variable declarations > set_owner",
        "section": "Variable declarations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.ProtectedVariable.data",
        "title": "Variable declarations > Variable declarations > data",
        "section": "Variable declarations > data",
        "text": "property data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.ProtectedVariable.is_protected",
        "title": "Variable declarations > Variable declarations > is_protected",
        "section": "Variable declarations > is_protected",
        "text": "property is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.ProtectedVariable.markup",
        "title": "Variable declarations > Variable declarations > markup",
        "section": "Variable declarations > markup",
        "text": "property markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.ProtectedVariable.model",
        "title": "Variable declarations > Variable declarations > model",
        "section": "Variable declarations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.ProtectedVariable.module",
        "title": "Variable declarations > Variable declarations > module",
        "section": "Variable declarations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/var",
        "href": "api/language/operator/var.html#ansys.scadeone.core.swan.ProtectedVariable.owner",
        "title": "Variable declarations > Variable declarations > owner",
        "section": "Variable declarations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#diagrams",
        "title": "Diagrams",
        "section": "Diagrams",
        "text": "A Diagram object stores the representation of a diagram.\nIt contains the various blocks (see figure) and connections using\nWire instances.\nBases: ScopeSection\nClass for a diagram construct.\nReturn a list of all diagram objects that are sources of current diagram.\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\nReturn a list of all diagram objects that are targets of current diagram.\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when section is given from {text%…%text} markup.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nDiagram objects.\nOwner of current Swan construct.\nBases: SwanItem, PragmaBase\nBase class for diagram objects.\nobject ::= ( [[ lunum ]] [[ luid ]] description [[ local_objects ]] )\nObject local unique number within the current operator.\nObject local unique identifier within the current operator.\nList of local objects associated with the object.\nIf locals is None, an empty list is created.\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nString representation. Must be overridden by subclasses.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLocal objects of object.\nLuid of object, or None if no Luid.\nLunum of object, or None if no Lunum.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nReturn a list of all diagram objects that are sources of current diagram object.\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\nReturn a list of all diagram objects that are targets of current diagram object.\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\nDiagrams\nDiagram\nWire\nScopeSection\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nPragmaBase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram",
        "title": "Diagrams > Diagrams > Diagram",
        "section": "Diagrams > Diagram",
        "text": "class ansys.scadeone.core.swan.Diagram(objects: List[DiagramObject])\n\nBases: ScopeSection\n\nClass for a diagram construct.\n\n!! processed by numpydoc !!\n\n\n\nget_block_sources(obj: DiagramObject) -> List[tuple[DiagramObject, GroupAdaptation | None, GroupAdaptation | None]]\n\nReturn a list of all diagram objects that are sources of current diagram.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!\n\n\n\nget_block_targets(obj: DiagramObject) -> List[tuple[DiagramObject, GroupAdaptation | None, GroupAdaptation | None]]\n\nReturn a list of all diagram objects that are targets of current diagram.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty objects: List[DiagramObject]\n\nDiagram objects.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram.get_block_sources",
        "title": "Diagrams > Diagrams > get_block_sources",
        "section": "Diagrams > get_block_sources",
        "text": "get_block_sources(obj: DiagramObject) -> List[tuple[DiagramObject, GroupAdaptation | None, GroupAdaptation | None]]\n\nReturn a list of all diagram objects that are sources of current diagram.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram.get_block_targets",
        "title": "Diagrams > Diagrams > get_block_targets",
        "section": "Diagrams > get_block_targets",
        "text": "get_block_targets(obj: DiagramObject) -> List[tuple[DiagramObject, GroupAdaptation | None, GroupAdaptation | None]]\n\nReturn a list of all diagram objects that are targets of current diagram.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram.get_full_path",
        "title": "Diagrams > Diagrams > get_full_path",
        "section": "Diagrams > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram.set_owner",
        "title": "Diagrams > Diagrams > set_owner",
        "section": "Diagrams > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram.is_protected",
        "title": "Diagrams > Diagrams > is_protected",
        "section": "Diagrams > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram.is_text",
        "title": "Diagrams > Diagrams > is_text",
        "section": "Diagrams > is_text",
        "text": "property is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram.model",
        "title": "Diagrams > Diagrams > model",
        "section": "Diagrams > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram.module",
        "title": "Diagrams > Diagrams > module",
        "section": "Diagrams > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram.objects",
        "title": "Diagrams > Diagrams > objects",
        "section": "Diagrams > objects",
        "text": "property objects: List[DiagramObject]\n\nDiagram objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Diagram.owner",
        "title": "Diagrams > Diagrams > owner",
        "section": "Diagrams > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject",
        "title": "Diagrams > Diagrams > DiagramObject",
        "section": "Diagrams > DiagramObject",
        "text": "class ansys.scadeone.core.swan.DiagramObject(lunum: Lunum | None = None, luid: Luid | None = None, locals: List[Self] | None = None, pragmas: List[Pragma] | None = None)\n\nBases: SwanItem, PragmaBase\n\nBase class for diagram objects.\n\nobject ::= ( [[ lunum ]] [[ luid ]] description [[ local_objects ]] )\n\nParameters\n\nlunum: Lunum (optional)\n\nObject local unique number within the current operator.\n\nluid: Luid (optional)\n\nObject local unique identifier within the current operator.\n\nlocals: list DiagramObject\n\nList of local objects associated with the object.\nIf locals is None, an empty list is created.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str() -> str\n\nString representation. Must be overridden by subclasses.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty sources: List[tuple[DiagramObject, GroupAdaptation, List[GroupAdaptation] | None]]\n\nReturn a list of all diagram objects that are sources of current diagram object.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty targets: List[tuple[DiagramObject, GroupAdaptation, GroupAdaptation]]\n\nReturn a list of all diagram objects that are targets of current diagram object.\n\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.get_full_path",
        "title": "Diagrams > Diagrams > get_full_path",
        "section": "Diagrams > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.pragma_str",
        "title": "Diagrams > Diagrams > pragma_str",
        "section": "Diagrams > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.set_owner",
        "title": "Diagrams > Diagrams > set_owner",
        "section": "Diagrams > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.to_str",
        "title": "Diagrams > Diagrams > to_str",
        "section": "Diagrams > to_str",
        "text": "to_str() -> str\n\nString representation. Must be overridden by subclasses.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.is_protected",
        "title": "Diagrams > Diagrams > is_protected",
        "section": "Diagrams > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.locals",
        "title": "Diagrams > Diagrams > locals",
        "section": "Diagrams > locals",
        "text": "property locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.luid",
        "title": "Diagrams > Diagrams > luid",
        "section": "Diagrams > luid",
        "text": "property luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.lunum",
        "title": "Diagrams > Diagrams > lunum",
        "section": "Diagrams > lunum",
        "text": "property lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.model",
        "title": "Diagrams > Diagrams > model",
        "section": "Diagrams > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.module",
        "title": "Diagrams > Diagrams > module",
        "section": "Diagrams > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.owner",
        "title": "Diagrams > Diagrams > owner",
        "section": "Diagrams > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.pragmas",
        "title": "Diagrams > Diagrams > pragmas",
        "section": "Diagrams > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.sources",
        "title": "Diagrams > Diagrams > sources",
        "section": "Diagrams > sources",
        "text": "property sources: List[tuple[DiagramObject, GroupAdaptation, List[GroupAdaptation] | None]]\n\nReturn a list of all diagram objects that are sources of current diagram object.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DiagramObject.targets",
        "title": "Diagrams > Diagrams > targets",
        "section": "Diagrams > targets",
        "text": "property targets: List[tuple[DiagramObject, GroupAdaptation, GroupAdaptation]]\n\nReturn a list of all diagram objects that are targets of current diagram object.\n\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#diagram-objects",
        "title": "Diagrams > Diagram objects",
        "section": "Diagram objects",
        "text": "This section describes the expr, def and block\nrelated classes.\nBases: DiagramObject\nExpression block:\nobject ::= ( [[ lunum ]] [[ luid ]] description [[ local_objects ]] )\ndescription ::= expr expr\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nExpr to string.\nBlock expression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLocal objects of object.\nLuid of object, or None if no Luid.\nLunum of object, or None if no Lunum.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nReturn a list of all diagram objects that are sources of current diagram object.\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\nReturn a list of all diagram objects that are targets of current diagram object.\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\nBases: DiagramObject\nDefinition block:\nobject ::= ( [[ lunum ]]  [[ luid ]] description [[ local_objects ]] )\ndescription ::= def lhs\ndescription ::= def {syntax% text %syntax}\nThe is_protected property returns True when the definition is\nprotected with a markup.\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nDef to string.\nTrue when definition is syntactically incorrect and protected.\nReturned defined flows.\nLocal objects of object.\nLuid of object, or None if no Luid.\nLunum of object, or None if no Lunum.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nReturn a list of all diagram objects that are sources of current diagram object.\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\nReturn a list of all diagram objects that are targets of current diagram object.\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\nBases: DiagramObject\nGeneric block:\nobject ::= ( [[ lunum ]] [[ luid ]] description [[ local_objects ]] )\ndescription ::= block  (operator | op_expr )\ndescription ::= block {syntax% text %syntax}\nThe is_protected property returns True when the block definition\nis protected with a markup.\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nBlock to string.\nCalled instance as an Operator, or an OperatorExpression or a protected string.\nTrue when called operator is defined as a string.\nLocal objects of object.\nLuid of object, or None if no Luid.\nLunum of object, or None if no Lunum.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nReturn a list of all diagram objects that are sources of current diagram object.\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\nReturn a list of all diagram objects that are targets of current diagram object.\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\nDiagram objects\nDiagramObject\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nDiagramObject\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nDiagramObject\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock",
        "title": "Diagrams > Diagram objects > ExprBlock",
        "section": "Diagram objects > ExprBlock",
        "text": "class ansys.scadeone.core.swan.ExprBlock(expr: Expression, lunum: Lunum | None = None, luid: Luid | None = None, locals: List[Self] | None = None, pragmas: List[Pragma] | None = None)\n\nBases: DiagramObject\n\nExpression block:\n\nobject ::= ( [[ lunum ]] [[ luid ]] description [[ local_objects ]] )\n\ndescription ::= expr expr\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str() -> str\n\nExpr to string.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nBlock expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty sources: List[tuple[DiagramObject, GroupAdaptation, List[GroupAdaptation] | None]]\n\nReturn a list of all diagram objects that are sources of current diagram object.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty targets: List[tuple[DiagramObject, GroupAdaptation, GroupAdaptation]]\n\nReturn a list of all diagram objects that are targets of current diagram object.\n\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.get_full_path",
        "title": "Diagrams > Diagram objects > get_full_path",
        "section": "Diagram objects > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.pragma_str",
        "title": "Diagrams > Diagram objects > pragma_str",
        "section": "Diagram objects > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.set_owner",
        "title": "Diagrams > Diagram objects > set_owner",
        "section": "Diagram objects > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.to_str",
        "title": "Diagrams > Diagram objects > to_str",
        "section": "Diagram objects > to_str",
        "text": "to_str() -> str\n\nExpr to string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.expr",
        "title": "Diagrams > Diagram objects > expr",
        "section": "Diagram objects > expr",
        "text": "property expr: Expression\n\nBlock expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.is_protected",
        "title": "Diagrams > Diagram objects > is_protected",
        "section": "Diagram objects > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.locals",
        "title": "Diagrams > Diagram objects > locals",
        "section": "Diagram objects > locals",
        "text": "property locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.luid",
        "title": "Diagrams > Diagram objects > luid",
        "section": "Diagram objects > luid",
        "text": "property luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.lunum",
        "title": "Diagrams > Diagram objects > lunum",
        "section": "Diagram objects > lunum",
        "text": "property lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.model",
        "title": "Diagrams > Diagram objects > model",
        "section": "Diagram objects > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.module",
        "title": "Diagrams > Diagram objects > module",
        "section": "Diagram objects > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.owner",
        "title": "Diagrams > Diagram objects > owner",
        "section": "Diagram objects > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.pragmas",
        "title": "Diagrams > Diagram objects > pragmas",
        "section": "Diagram objects > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.sources",
        "title": "Diagrams > Diagram objects > sources",
        "section": "Diagram objects > sources",
        "text": "property sources: List[tuple[DiagramObject, GroupAdaptation, List[GroupAdaptation] | None]]\n\nReturn a list of all diagram objects that are sources of current diagram object.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ExprBlock.targets",
        "title": "Diagrams > Diagram objects > targets",
        "section": "Diagram objects > targets",
        "text": "property targets: List[tuple[DiagramObject, GroupAdaptation, GroupAdaptation]]\n\nReturn a list of all diagram objects that are targets of current diagram object.\n\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock",
        "title": "Diagrams > Diagram objects > DefBlock",
        "section": "Diagram objects > DefBlock",
        "text": "class ansys.scadeone.core.swan.DefBlock(lhs: EquationLHS | ProtectedItem, lunum: Lunum | None = None, luid: Luid | None = None, locals: List[DiagramObject] | None = None, pragmas: List[Pragma] | None = None)\n\nBases: DiagramObject\n\nDefinition block:\n\nobject ::= ( [[ lunum ]]  [[ luid ]] description [[ local_objects ]] )\n\ndescription ::= def lhs\n\ndescription ::= def {syntax% text %syntax}\n\nThe is_protected property returns True when the definition is\nprotected with a markup.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str() -> str\n\nDef to string.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTrue when definition is syntactically incorrect and protected.\n\n!! processed by numpydoc !!\n\n\n\nproperty lhs: EquationLHS | ProtectedItem\n\nReturned defined flows.\n\n!! processed by numpydoc !!\n\n\n\nproperty locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty sources: List[tuple[DiagramObject, GroupAdaptation, List[GroupAdaptation] | None]]\n\nReturn a list of all diagram objects that are sources of current diagram object.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty targets: List[tuple[DiagramObject, GroupAdaptation, GroupAdaptation]]\n\nReturn a list of all diagram objects that are targets of current diagram object.\n\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.get_full_path",
        "title": "Diagrams > Diagram objects > get_full_path",
        "section": "Diagram objects > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.pragma_str",
        "title": "Diagrams > Diagram objects > pragma_str",
        "section": "Diagram objects > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.set_owner",
        "title": "Diagrams > Diagram objects > set_owner",
        "section": "Diagram objects > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.to_str",
        "title": "Diagrams > Diagram objects > to_str",
        "section": "Diagram objects > to_str",
        "text": "to_str() -> str\n\nDef to string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.is_protected",
        "title": "Diagrams > Diagram objects > is_protected",
        "section": "Diagram objects > is_protected",
        "text": "property is_protected\n\nTrue when definition is syntactically incorrect and protected.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.lhs",
        "title": "Diagrams > Diagram objects > lhs",
        "section": "Diagram objects > lhs",
        "text": "property lhs: EquationLHS | ProtectedItem\n\nReturned defined flows.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.locals",
        "title": "Diagrams > Diagram objects > locals",
        "section": "Diagram objects > locals",
        "text": "property locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.luid",
        "title": "Diagrams > Diagram objects > luid",
        "section": "Diagram objects > luid",
        "text": "property luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.lunum",
        "title": "Diagrams > Diagram objects > lunum",
        "section": "Diagram objects > lunum",
        "text": "property lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.model",
        "title": "Diagrams > Diagram objects > model",
        "section": "Diagram objects > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.module",
        "title": "Diagrams > Diagram objects > module",
        "section": "Diagram objects > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.owner",
        "title": "Diagrams > Diagram objects > owner",
        "section": "Diagram objects > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.pragmas",
        "title": "Diagrams > Diagram objects > pragmas",
        "section": "Diagram objects > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.sources",
        "title": "Diagrams > Diagram objects > sources",
        "section": "Diagram objects > sources",
        "text": "property sources: List[tuple[DiagramObject, GroupAdaptation, List[GroupAdaptation] | None]]\n\nReturn a list of all diagram objects that are sources of current diagram object.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.DefBlock.targets",
        "title": "Diagrams > Diagram objects > targets",
        "section": "Diagram objects > targets",
        "text": "property targets: List[tuple[DiagramObject, GroupAdaptation, GroupAdaptation]]\n\nReturn a list of all diagram objects that are targets of current diagram object.\n\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block",
        "title": "Diagrams > Diagram objects > Block",
        "section": "Diagram objects > Block",
        "text": "class ansys.scadeone.core.swan.Block(instance: OperatorBase | OperatorExpression | ProtectedItem, lunum: Lunum | None = None, luid: Luid | None = None, locals: List[DiagramObject] | None = None, pragmas: List[Pragma] | None = None)\n\nBases: DiagramObject\n\nGeneric block:\n\nobject ::= ( [[ lunum ]] [[ luid ]] description [[ local_objects ]] )\n\ndescription ::= block  (operator | op_expr )\n\ndescription ::= block {syntax% text %syntax}\n\nThe is_protected property returns True when the block definition\nis protected with a markup.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str() -> str\n\nBlock to string.\n\n!! processed by numpydoc !!\n\n\n\nproperty instance: OperatorBase | OperatorExpression | ProtectedItem\n\nCalled instance as an Operator, or an OperatorExpression or a protected string.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTrue when called operator is defined as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty sources: List[tuple[DiagramObject, GroupAdaptation, List[GroupAdaptation] | None]]\n\nReturn a list of all diagram objects that are sources of current diagram object.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty targets: List[tuple[DiagramObject, GroupAdaptation, GroupAdaptation]]\n\nReturn a list of all diagram objects that are targets of current diagram object.\n\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.get_full_path",
        "title": "Diagrams > Diagram objects > get_full_path",
        "section": "Diagram objects > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.pragma_str",
        "title": "Diagrams > Diagram objects > pragma_str",
        "section": "Diagram objects > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.set_owner",
        "title": "Diagrams > Diagram objects > set_owner",
        "section": "Diagram objects > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.to_str",
        "title": "Diagrams > Diagram objects > to_str",
        "section": "Diagram objects > to_str",
        "text": "to_str() -> str\n\nBlock to string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.instance",
        "title": "Diagrams > Diagram objects > instance",
        "section": "Diagram objects > instance",
        "text": "property instance: OperatorBase | OperatorExpression | ProtectedItem\n\nCalled instance as an Operator, or an OperatorExpression or a protected string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.is_protected",
        "title": "Diagrams > Diagram objects > is_protected",
        "section": "Diagram objects > is_protected",
        "text": "property is_protected\n\nTrue when called operator is defined as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.locals",
        "title": "Diagrams > Diagram objects > locals",
        "section": "Diagram objects > locals",
        "text": "property locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.luid",
        "title": "Diagrams > Diagram objects > luid",
        "section": "Diagram objects > luid",
        "text": "property luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.lunum",
        "title": "Diagrams > Diagram objects > lunum",
        "section": "Diagram objects > lunum",
        "text": "property lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.model",
        "title": "Diagrams > Diagram objects > model",
        "section": "Diagram objects > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.module",
        "title": "Diagrams > Diagram objects > module",
        "section": "Diagram objects > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.owner",
        "title": "Diagrams > Diagram objects > owner",
        "section": "Diagram objects > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.pragmas",
        "title": "Diagrams > Diagram objects > pragmas",
        "section": "Diagram objects > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.sources",
        "title": "Diagrams > Diagram objects > sources",
        "section": "Diagram objects > sources",
        "text": "property sources: List[tuple[DiagramObject, GroupAdaptation, List[GroupAdaptation] | None]]\n\nReturn a list of all diagram objects that are sources of current diagram object.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Block.targets",
        "title": "Diagrams > Diagram objects > targets",
        "section": "Diagram objects > targets",
        "text": "property targets: List[tuple[DiagramObject, GroupAdaptation, GroupAdaptation]]\n\nReturn a list of all diagram objects that are targets of current diagram object.\n\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#groupungroup-block-bar",
        "title": "Diagrams > Group/ungroup block (bar)",
        "section": "Group/ungroup block (bar)",
        "text": "The bar block is used to group/ungroup wires.\nBases: DiagramObject\nBar (group/ungroup constructor block):\nobject ::= ( [[ lunum ]] description [[ local_objects ]] )\ndescription ::= group [[group_operation]]\ngroup_operation ::= () | byname | bypos\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nGroup to string.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLocal objects of object.\nLuid of object, or None if no Luid.\nLunum of object, or None if no Lunum.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nGroup operation.\nOwner of current Swan construct.\nList of pragmas.\nReturn a list of all diagram objects that are sources of current diagram object.\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\nReturn a list of all diagram objects that are targets of current diagram object.\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\nBases: Enum\nOperation on groups.\nGroup Enum to string.\nbyname operation (keep named items)\nbypos operation (keep positional items)\nNo operation on group\nNormalization operation (positional, then named items)\nGroup/ungroup block (bar)\nDiagramObject\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nEnum"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar",
        "title": "Diagrams > Group/ungroup block (bar) > Bar",
        "section": "Group/ungroup block (bar) > Bar",
        "text": "class ansys.scadeone.core.swan.Bar(operation: GroupOperation | None = GroupOperation.NoOp, lunum: Lunum | None = None, locals: List[DiagramObject] | None = None, pragmas: List[Pragma] | None = None)\n\nBases: DiagramObject\n\nBar (group/ungroup constructor block):\n\nobject ::= ( [[ lunum ]] description [[ local_objects ]] )\n\ndescription ::= group [[group_operation]]\n\ngroup_operation ::= () | byname | bypos\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str() -> str\n\nGroup to string.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty operation: GroupOperation\n\nGroup operation.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty sources: List[tuple[DiagramObject, GroupAdaptation, List[GroupAdaptation] | None]]\n\nReturn a list of all diagram objects that are sources of current diagram object.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!\n\n\n\nproperty targets: List[tuple[DiagramObject, GroupAdaptation, GroupAdaptation]]\n\nReturn a list of all diagram objects that are targets of current diagram object.\n\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.get_full_path",
        "title": "Diagrams > Group/ungroup block (bar) > get_full_path",
        "section": "Group/ungroup block (bar) > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.pragma_str",
        "title": "Diagrams > Group/ungroup block (bar) > pragma_str",
        "section": "Group/ungroup block (bar) > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.set_owner",
        "title": "Diagrams > Group/ungroup block (bar) > set_owner",
        "section": "Group/ungroup block (bar) > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.to_str",
        "title": "Diagrams > Group/ungroup block (bar) > to_str",
        "section": "Group/ungroup block (bar) > to_str",
        "text": "to_str() -> str\n\nGroup to string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.is_protected",
        "title": "Diagrams > Group/ungroup block (bar) > is_protected",
        "section": "Group/ungroup block (bar) > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.locals",
        "title": "Diagrams > Group/ungroup block (bar) > locals",
        "section": "Group/ungroup block (bar) > locals",
        "text": "property locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.luid",
        "title": "Diagrams > Group/ungroup block (bar) > luid",
        "section": "Group/ungroup block (bar) > luid",
        "text": "property luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.lunum",
        "title": "Diagrams > Group/ungroup block (bar) > lunum",
        "section": "Group/ungroup block (bar) > lunum",
        "text": "property lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.model",
        "title": "Diagrams > Group/ungroup block (bar) > model",
        "section": "Group/ungroup block (bar) > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.module",
        "title": "Diagrams > Group/ungroup block (bar) > module",
        "section": "Group/ungroup block (bar) > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.operation",
        "title": "Diagrams > Group/ungroup block (bar) > operation",
        "section": "Group/ungroup block (bar) > operation",
        "text": "property operation: GroupOperation\n\nGroup operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.owner",
        "title": "Diagrams > Group/ungroup block (bar) > owner",
        "section": "Group/ungroup block (bar) > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.pragmas",
        "title": "Diagrams > Group/ungroup block (bar) > pragmas",
        "section": "Group/ungroup block (bar) > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.sources",
        "title": "Diagrams > Group/ungroup block (bar) > sources",
        "section": "Group/ungroup block (bar) > sources",
        "text": "property sources: List[tuple[DiagramObject, GroupAdaptation, List[GroupAdaptation] | None]]\n\nReturn a list of all diagram objects that are sources of current diagram object.\n\nA list item is a tuple of source object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Bar.targets",
        "title": "Diagrams > Group/ungroup block (bar) > targets",
        "section": "Group/ungroup block (bar) > targets",
        "text": "property targets: List[tuple[DiagramObject, GroupAdaptation, GroupAdaptation]]\n\nReturn a list of all diagram objects that are targets of current diagram object.\n\nA list item is a tuple of target object and the source and target adaptations used\nfor connection if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.GroupOperation",
        "title": "Diagrams > Group/ungroup block (bar) > GroupOperation",
        "section": "Group/ungroup block (bar) > GroupOperation",
        "text": "class ansys.scadeone.core.swan.GroupOperation(value)\n\nBases: Enum\n\nOperation on groups.\n\n!! processed by numpydoc !!\n\n\n\nstatic to_str(value: Self)\n\nGroup Enum to string.\n\n!! processed by numpydoc !!\n\n\n\nByName = 2\n\nbyname operation (keep named items)\n\n!! processed by numpydoc !!\n\n\n\nByPos = 3\n\nbypos operation (keep positional items)\n\n!! processed by numpydoc !!\n\n\n\nNoOp = 1\n\nNo operation on group\n\n!! processed by numpydoc !!\n\n\n\nNormalize = 4\n\nNormalization operation (positional, then named items)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.GroupOperation.to_str",
        "title": "Diagrams > Group/ungroup block (bar) > to_str",
        "section": "Group/ungroup block (bar) > to_str",
        "text": "static to_str(value: Self)\n\nGroup Enum to string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.GroupOperation.ByName",
        "title": "Diagrams > Group/ungroup block (bar) > ByName",
        "section": "Group/ungroup block (bar) > ByName",
        "text": "ByName = 2\n\nbyname operation (keep named items)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.GroupOperation.ByPos",
        "title": "Diagrams > Group/ungroup block (bar) > ByPos",
        "section": "Group/ungroup block (bar) > ByPos",
        "text": "ByPos = 3\n\nbypos operation (keep positional items)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.GroupOperation.NoOp",
        "title": "Diagrams > Group/ungroup block (bar) > NoOp",
        "section": "Group/ungroup block (bar) > NoOp",
        "text": "NoOp = 1\n\nNo operation on group\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.GroupOperation.Normalize",
        "title": "Diagrams > Group/ungroup block (bar) > Normalize",
        "section": "Group/ungroup block (bar) > Normalize",
        "text": "Normalize = 4\n\nNormalization operation (positional, then named items)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#wire-and-connections",
        "title": "Diagrams > Wire and connections",
        "section": "Wire and connections",
        "text": "Bases: DiagramObject\nWire definition:\nobject ::= ( [[ lunum ]] description [[ local_objects ]] )\ndescription ::= wire connection => connection {{ , connection }}\nA wire must have a least one target.\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nWire to string.\nReturn True when wire as at least one target.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLocal objects of object.\nLuid of object, or None if no Luid.\nLunum of object, or None if no Lunum.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nWire source.\nThis method must not be called for a Wire\nWire targets.\nBases: SwanItem\nWire connection for a source or for targets:\nconnection ::= port [[ group_adaptation ]] | ()\nIf both port and adaptation are None, then it corresponds to the ‘()’ form.\nConnection is not valid if only adaptation is given. This is checked\nwith the _is_valid()_ method.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturns the adaptation of the port of the connection.\nTrue when connected to some port.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when the connection either () or port [adaptation].\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nReturns the port of the connection.\nWire and connections\nDiagramObject\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire",
        "title": "Diagrams > Wire and connections > Wire",
        "section": "Wire and connections > Wire",
        "text": "class ansys.scadeone.core.swan.Wire(source: Connection, targets: List[Connection], lunum: Lunum | None = None, locals: List[DiagramObject] | None = None, pragmas: List[Pragma] | None = None)\n\nBases: DiagramObject\n\nWire definition:\n\nobject ::= ( [[ lunum ]] description [[ local_objects ]] )\n\ndescription ::= wire connection => connection {{ , connection }}\n\nA wire must have a least one target.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str() -> str\n\nWire to string.\n\n!! processed by numpydoc !!\n\n\n\nproperty has_target: bool\n\nReturn True when wire as at least one target.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty source: Connection\n\nWire source.\n\n!! processed by numpydoc !!\n\n\n\nproperty sources: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a Wire\n\n!! processed by numpydoc !!\n\n\n\nproperty targets: List[Connection]\n\nWire targets.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.get_full_path",
        "title": "Diagrams > Wire and connections > get_full_path",
        "section": "Wire and connections > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.pragma_str",
        "title": "Diagrams > Wire and connections > pragma_str",
        "section": "Wire and connections > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.set_owner",
        "title": "Diagrams > Wire and connections > set_owner",
        "section": "Wire and connections > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.to_str",
        "title": "Diagrams > Wire and connections > to_str",
        "section": "Wire and connections > to_str",
        "text": "to_str() -> str\n\nWire to string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.has_target",
        "title": "Diagrams > Wire and connections > has_target",
        "section": "Wire and connections > has_target",
        "text": "property has_target: bool\n\nReturn True when wire as at least one target.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.is_protected",
        "title": "Diagrams > Wire and connections > is_protected",
        "section": "Wire and connections > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.locals",
        "title": "Diagrams > Wire and connections > locals",
        "section": "Wire and connections > locals",
        "text": "property locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.luid",
        "title": "Diagrams > Wire and connections > luid",
        "section": "Wire and connections > luid",
        "text": "property luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.lunum",
        "title": "Diagrams > Wire and connections > lunum",
        "section": "Wire and connections > lunum",
        "text": "property lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.model",
        "title": "Diagrams > Wire and connections > model",
        "section": "Wire and connections > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.module",
        "title": "Diagrams > Wire and connections > module",
        "section": "Wire and connections > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.owner",
        "title": "Diagrams > Wire and connections > owner",
        "section": "Wire and connections > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.pragmas",
        "title": "Diagrams > Wire and connections > pragmas",
        "section": "Wire and connections > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.source",
        "title": "Diagrams > Wire and connections > source",
        "section": "Wire and connections > source",
        "text": "property source: Connection\n\nWire source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.sources",
        "title": "Diagrams > Wire and connections > sources",
        "section": "Wire and connections > sources",
        "text": "property sources: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a Wire\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Wire.targets",
        "title": "Diagrams > Wire and connections > targets",
        "section": "Wire and connections > targets",
        "text": "property targets: List[Connection]\n\nWire targets.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection",
        "title": "Diagrams > Wire and connections > Connection",
        "section": "Wire and connections > Connection",
        "text": "class ansys.scadeone.core.swan.Connection(port: PortExpr | None = None, adaptation: GroupAdaptation | None = None)\n\nBases: SwanItem\n\nWire connection for a source or for targets:\n\nconnection ::= port [[ group_adaptation ]] | ()\n\nIf both port and adaptation are None, then it corresponds to the ‘()’ form.\n\nConnection is not valid if only adaptation is given. This is checked\nwith the _is_valid()_ method.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty adaptation: GroupAdaptation | None\n\nReturns the adaptation of the port of the connection.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_connected: bool\n\nTrue when connected to some port.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_valid: bool\n\nTrue when the connection either () or port [adaptation].\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty port: PortExpr | None\n\nReturns the port of the connection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection.get_full_path",
        "title": "Diagrams > Wire and connections > get_full_path",
        "section": "Wire and connections > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection.set_owner",
        "title": "Diagrams > Wire and connections > set_owner",
        "section": "Wire and connections > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection.adaptation",
        "title": "Diagrams > Wire and connections > adaptation",
        "section": "Wire and connections > adaptation",
        "text": "property adaptation: GroupAdaptation | None\n\nReturns the adaptation of the port of the connection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection.is_connected",
        "title": "Diagrams > Wire and connections > is_connected",
        "section": "Wire and connections > is_connected",
        "text": "property is_connected: bool\n\nTrue when connected to some port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection.is_protected",
        "title": "Diagrams > Wire and connections > is_protected",
        "section": "Wire and connections > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection.is_valid",
        "title": "Diagrams > Wire and connections > is_valid",
        "section": "Wire and connections > is_valid",
        "text": "property is_valid: bool\n\nTrue when the connection either () or port [adaptation].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection.model",
        "title": "Diagrams > Wire and connections > model",
        "section": "Wire and connections > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection.module",
        "title": "Diagrams > Wire and connections > module",
        "section": "Wire and connections > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection.owner",
        "title": "Diagrams > Wire and connections > owner",
        "section": "Wire and connections > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.Connection.port",
        "title": "Diagrams > Wire and connections > port",
        "section": "Wire and connections > port",
        "text": "property port: PortExpr | None\n\nReturns the port of the connection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#def-by-case-blocks",
        "title": "Diagrams > Def-by-case blocks",
        "section": "Def-by-case blocks",
        "text": "The def-by-case blocks gather the graphical version of then state machine and\nactivate if/when constructs.\nBases: DefByCaseBlockBase\nState machine block definition:\nobject ::= ( description [[ local_objects ]] )\ndescription ::= [lhs :] state_machine\nA StateMachineBlock is a proxy to the internal StateMachine object, therefore\nthe methods and properties of the StateMachine object can be accessed directly.\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nSection to string.\nDef-by-case object.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLocal objects of object.\nLuid of object, or None if no Luid.\nLunum of object, or None if no Lunum.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nThis method must not be called for a def-by-case block.\nState machine object.\nThis method must not be called for a def-by-case block.\nBases: DefByCaseBlockBase\nActivate-if block definition:\nobject ::= ( description [[ local_objects ]] )\ndescription ::= [lhs :] activate [[ luid ]] if_activation\nA ActivateIF is a proxy to the internal ActivateIf object, therefore\nthe methods and properties of the ActivateIf object can be accessed directly.\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nSection to string.\nActivate if object.\nDef-by-case object.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLocal objects of object.\nLuid of object, or None if no Luid.\nLunum of object, or None if no Lunum.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nThis method must not be called for a def-by-case block.\nThis method must not be called for a def-by-case block.\nBases: DefByCaseBlockBase\nActivate-when block definition:\nobject ::= ( description [[ local_objects ]] )\ndescription ::= [lhs :] activate [[ luid ]] when_activation\nA ActivateIF is a proxy to the internal ActivateWhen object, therefore\nthe methods and properties of the ActivateIf object can be accessed directly.\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nSection to string.\nActivate when object.\nDef-by-case object.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLocal objects of object.\nLuid of object, or None if no Luid.\nLunum of object, or None if no Lunum.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nThis method must not be called for a def-by-case block.\nThis method must not be called for a def-by-case block.\nDef-by-case blocks\nDefByCaseBlockBase\nStateMachine\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nDefByCaseBlockBase\nActivateIf\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nDefByCaseBlockBase\nActivateWhen\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock",
        "title": "Diagrams > Def-by-case blocks > StateMachineBlock",
        "section": "Def-by-case blocks > StateMachineBlock",
        "text": "class ansys.scadeone.core.swan.StateMachineBlock(def_by_case: StateMachine, locals: List[DiagramObject] | None = None, pragmas: List[Pragma] | None = None)\n\nBases: DefByCaseBlockBase\n\nState machine block definition:\n\nobject ::= ( description [[ local_objects ]] )\n\ndescription ::= [lhs :] state_machine\n\nA StateMachineBlock is a proxy to the internal StateMachine object, therefore\nthe methods and properties of the StateMachine object can be accessed directly.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str() -> str\n\nSection to string.\n\n!! processed by numpydoc !!\n\n\n\nproperty def_by_case: DefByCase\n\nDef-by-case object.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty sources: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!\n\n\n\nproperty state_machine: StateMachine\n\nState machine object.\n\n!! processed by numpydoc !!\n\n\n\nproperty targets: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.get_full_path",
        "title": "Diagrams > Def-by-case blocks > get_full_path",
        "section": "Def-by-case blocks > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.pragma_str",
        "title": "Diagrams > Def-by-case blocks > pragma_str",
        "section": "Def-by-case blocks > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.set_owner",
        "title": "Diagrams > Def-by-case blocks > set_owner",
        "section": "Def-by-case blocks > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.to_str",
        "title": "Diagrams > Def-by-case blocks > to_str",
        "section": "Def-by-case blocks > to_str",
        "text": "to_str() -> str\n\nSection to string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.def_by_case",
        "title": "Diagrams > Def-by-case blocks > def_by_case",
        "section": "Def-by-case blocks > def_by_case",
        "text": "property def_by_case: DefByCase\n\nDef-by-case object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.is_protected",
        "title": "Diagrams > Def-by-case blocks > is_protected",
        "section": "Def-by-case blocks > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.locals",
        "title": "Diagrams > Def-by-case blocks > locals",
        "section": "Def-by-case blocks > locals",
        "text": "property locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.luid",
        "title": "Diagrams > Def-by-case blocks > luid",
        "section": "Def-by-case blocks > luid",
        "text": "property luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.lunum",
        "title": "Diagrams > Def-by-case blocks > lunum",
        "section": "Def-by-case blocks > lunum",
        "text": "property lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.model",
        "title": "Diagrams > Def-by-case blocks > model",
        "section": "Def-by-case blocks > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.module",
        "title": "Diagrams > Def-by-case blocks > module",
        "section": "Def-by-case blocks > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.owner",
        "title": "Diagrams > Def-by-case blocks > owner",
        "section": "Def-by-case blocks > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.pragmas",
        "title": "Diagrams > Def-by-case blocks > pragmas",
        "section": "Def-by-case blocks > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.sources",
        "title": "Diagrams > Def-by-case blocks > sources",
        "section": "Def-by-case blocks > sources",
        "text": "property sources: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.state_machine",
        "title": "Diagrams > Def-by-case blocks > state_machine",
        "section": "Def-by-case blocks > state_machine",
        "text": "property state_machine: StateMachine\n\nState machine object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.StateMachineBlock.targets",
        "title": "Diagrams > Def-by-case blocks > targets",
        "section": "Def-by-case blocks > targets",
        "text": "property targets: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock",
        "title": "Diagrams > Def-by-case blocks > ActivateIfBlock",
        "section": "Def-by-case blocks > ActivateIfBlock",
        "text": "class ansys.scadeone.core.swan.ActivateIfBlock(def_by_case: ActivateIf, locals: List[DiagramObject] | None = None, pragmas: List[Pragma] | None = None)\n\nBases: DefByCaseBlockBase\n\nActivate-if block definition:\n\nobject ::= ( description [[ local_objects ]] )\n\ndescription ::= [lhs :] activate [[ luid ]] if_activation\n\nA ActivateIF is a proxy to the internal ActivateIf object, therefore\nthe methods and properties of the ActivateIf object can be accessed directly.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str() -> str\n\nSection to string.\n\n!! processed by numpydoc !!\n\n\n\nproperty activate_if: ActivateIf\n\nActivate if object.\n\n!! processed by numpydoc !!\n\n\n\nproperty def_by_case: DefByCase\n\nDef-by-case object.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty sources: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!\n\n\n\nproperty targets: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.get_full_path",
        "title": "Diagrams > Def-by-case blocks > get_full_path",
        "section": "Def-by-case blocks > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.pragma_str",
        "title": "Diagrams > Def-by-case blocks > pragma_str",
        "section": "Def-by-case blocks > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.set_owner",
        "title": "Diagrams > Def-by-case blocks > set_owner",
        "section": "Def-by-case blocks > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.to_str",
        "title": "Diagrams > Def-by-case blocks > to_str",
        "section": "Def-by-case blocks > to_str",
        "text": "to_str() -> str\n\nSection to string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.activate_if",
        "title": "Diagrams > Def-by-case blocks > activate_if",
        "section": "Def-by-case blocks > activate_if",
        "text": "property activate_if: ActivateIf\n\nActivate if object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.def_by_case",
        "title": "Diagrams > Def-by-case blocks > def_by_case",
        "section": "Def-by-case blocks > def_by_case",
        "text": "property def_by_case: DefByCase\n\nDef-by-case object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.is_protected",
        "title": "Diagrams > Def-by-case blocks > is_protected",
        "section": "Def-by-case blocks > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.locals",
        "title": "Diagrams > Def-by-case blocks > locals",
        "section": "Def-by-case blocks > locals",
        "text": "property locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.luid",
        "title": "Diagrams > Def-by-case blocks > luid",
        "section": "Def-by-case blocks > luid",
        "text": "property luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.lunum",
        "title": "Diagrams > Def-by-case blocks > lunum",
        "section": "Def-by-case blocks > lunum",
        "text": "property lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.model",
        "title": "Diagrams > Def-by-case blocks > model",
        "section": "Def-by-case blocks > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.module",
        "title": "Diagrams > Def-by-case blocks > module",
        "section": "Def-by-case blocks > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.owner",
        "title": "Diagrams > Def-by-case blocks > owner",
        "section": "Def-by-case blocks > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.pragmas",
        "title": "Diagrams > Def-by-case blocks > pragmas",
        "section": "Def-by-case blocks > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.sources",
        "title": "Diagrams > Def-by-case blocks > sources",
        "section": "Def-by-case blocks > sources",
        "text": "property sources: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateIfBlock.targets",
        "title": "Diagrams > Def-by-case blocks > targets",
        "section": "Def-by-case blocks > targets",
        "text": "property targets: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock",
        "title": "Diagrams > Def-by-case blocks > ActivateWhenBlock",
        "section": "Def-by-case blocks > ActivateWhenBlock",
        "text": "class ansys.scadeone.core.swan.ActivateWhenBlock(def_by_case: ActivateWhen, locals: List[DiagramObject] | None = None, pragmas: List[Pragma] | None = None)\n\nBases: DefByCaseBlockBase\n\nActivate-when block definition:\n\nobject ::= ( description [[ local_objects ]] )\n\ndescription ::= [lhs :] activate [[ luid ]] when_activation\n\nA ActivateIF is a proxy to the internal ActivateWhen object, therefore\nthe methods and properties of the ActivateIf object can be accessed directly.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str() -> str\n\nSection to string.\n\n!! processed by numpydoc !!\n\n\n\nproperty activate_when: ActivateWhen\n\nActivate when object.\n\n!! processed by numpydoc !!\n\n\n\nproperty def_by_case: DefByCase\n\nDef-by-case object.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty sources: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!\n\n\n\nproperty targets: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.get_full_path",
        "title": "Diagrams > Def-by-case blocks > get_full_path",
        "section": "Def-by-case blocks > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.pragma_str",
        "title": "Diagrams > Def-by-case blocks > pragma_str",
        "section": "Def-by-case blocks > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.set_owner",
        "title": "Diagrams > Def-by-case blocks > set_owner",
        "section": "Def-by-case blocks > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.to_str",
        "title": "Diagrams > Def-by-case blocks > to_str",
        "section": "Def-by-case blocks > to_str",
        "text": "to_str() -> str\n\nSection to string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.activate_when",
        "title": "Diagrams > Def-by-case blocks > activate_when",
        "section": "Def-by-case blocks > activate_when",
        "text": "property activate_when: ActivateWhen\n\nActivate when object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.def_by_case",
        "title": "Diagrams > Def-by-case blocks > def_by_case",
        "section": "Def-by-case blocks > def_by_case",
        "text": "property def_by_case: DefByCase\n\nDef-by-case object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.is_protected",
        "title": "Diagrams > Def-by-case blocks > is_protected",
        "section": "Def-by-case blocks > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.locals",
        "title": "Diagrams > Def-by-case blocks > locals",
        "section": "Def-by-case blocks > locals",
        "text": "property locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.luid",
        "title": "Diagrams > Def-by-case blocks > luid",
        "section": "Def-by-case blocks > luid",
        "text": "property luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.lunum",
        "title": "Diagrams > Def-by-case blocks > lunum",
        "section": "Def-by-case blocks > lunum",
        "text": "property lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.model",
        "title": "Diagrams > Def-by-case blocks > model",
        "section": "Def-by-case blocks > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.module",
        "title": "Diagrams > Def-by-case blocks > module",
        "section": "Def-by-case blocks > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.owner",
        "title": "Diagrams > Def-by-case blocks > owner",
        "section": "Def-by-case blocks > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.pragmas",
        "title": "Diagrams > Def-by-case blocks > pragmas",
        "section": "Def-by-case blocks > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.sources",
        "title": "Diagrams > Def-by-case blocks > sources",
        "section": "Def-by-case blocks > sources",
        "text": "property sources: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.ActivateWhenBlock.targets",
        "title": "Diagrams > Def-by-case blocks > targets",
        "section": "Def-by-case blocks > targets",
        "text": "property targets: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a def-by-case block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#sections",
        "title": "Diagrams > Sections",
        "section": "Sections",
        "text": "The SectionBlock contains a Swan section, that is\nto say, a let, var, diagram, assert, assume or guarantee section.\nBases: DiagramObject\nSection block definition:\nobject ::= ( description [[ local_objects ]] )\ndescription ::= scope_section\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nSection to string.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLocal objects of object.\nLuid of object, or None if no Luid.\nLunum of object, or None if no Lunum.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nSection object of diagram object.\nThis method must not be called for a SectionBlock\nThis method must not be called for a SectionBlock\nSections\nSectionBlock\nDiagramObject\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock",
        "title": "Diagrams > Sections > SectionBlock",
        "section": "Sections > SectionBlock",
        "text": "class ansys.scadeone.core.swan.SectionBlock(section: ScopeSection, locals: List[DiagramObject] | None = None, pragmas: List[Pragma] | None = None)\n\nBases: DiagramObject\n\nSection block definition:\n\nobject ::= ( description [[ local_objects ]] )\n\ndescription ::= scope_section\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str() -> str\n\nSection to string.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty section: ScopeSection\n\nSection object of diagram object.\n\n!! processed by numpydoc !!\n\n\n\nproperty sources: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a SectionBlock\n\n!! processed by numpydoc !!\n\n\n\nproperty targets: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a SectionBlock\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.get_full_path",
        "title": "Diagrams > Sections > get_full_path",
        "section": "Sections > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.pragma_str",
        "title": "Diagrams > Sections > pragma_str",
        "section": "Sections > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.set_owner",
        "title": "Diagrams > Sections > set_owner",
        "section": "Sections > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.to_str",
        "title": "Diagrams > Sections > to_str",
        "section": "Sections > to_str",
        "text": "to_str() -> str\n\nSection to string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.is_protected",
        "title": "Diagrams > Sections > is_protected",
        "section": "Sections > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.locals",
        "title": "Diagrams > Sections > locals",
        "section": "Sections > locals",
        "text": "property locals: List[Self]\n\nLocal objects of object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.luid",
        "title": "Diagrams > Sections > luid",
        "section": "Sections > luid",
        "text": "property luid: Luid | None\n\nLuid of object, or None if no Luid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.lunum",
        "title": "Diagrams > Sections > lunum",
        "section": "Sections > lunum",
        "text": "property lunum: Lunum | None\n\nLunum of object, or None if no Lunum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.model",
        "title": "Diagrams > Sections > model",
        "section": "Sections > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.module",
        "title": "Diagrams > Sections > module",
        "section": "Sections > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.owner",
        "title": "Diagrams > Sections > owner",
        "section": "Sections > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.pragmas",
        "title": "Diagrams > Sections > pragmas",
        "section": "Sections > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.section",
        "title": "Diagrams > Sections > section",
        "section": "Sections > section",
        "text": "property section: ScopeSection\n\nSection object of diagram object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.sources",
        "title": "Diagrams > Sections > sources",
        "section": "Sections > sources",
        "text": "property sources: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a SectionBlock\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/diagram",
        "href": "api/language/operator/diagram.html#ansys.scadeone.core.swan.SectionBlock.targets",
        "title": "Diagrams > Sections > targets",
        "section": "Sections > targets",
        "text": "property targets: List[tuple[DiagramObject, GroupAdaptation | None]]\n\nThis method must not be called for a SectionBlock\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#simulation-data",
        "title": "Simulation data",
        "section": "Simulation data",
        "text": "Simulation data files are used to represent sequences of values:\nthey are the outputs of simulation jobs;\nthey can be used in test harnesses, in data source and oracle blocks, to be used respectively as inputs and expected values.\nThis library allows to read and edit simulation data files. Look for simulation data in Scade One documentation.\nSimulation data"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#covered-features",
        "title": "Simulation data > Covered features",
        "section": "Covered features",
        "text": "Support of none values, meaning that the value is not defined at a given cycle:\nStimuli operator: a value must be defined at first cycle, for next steps the none type means that a previous value is held.\nSimulator trace: a none value means that the variable clock is false.\nSupport of all Swan types, imported types (stored as a byte array) and combinations of them (native support of Variants & Groups).\nData support: structure, table (when the table size is a static constant), enum, string.\nLimitations: partial data is not supported. All values of a complex type must be given.\nThe variables are organized as a tree of <scope>/<scope>/…/<variable>, each scope and variable has an optional Swan kind: sensors, inputs, outputs, probes, assume, guarantee and so on.\nPossibility to specify a repetition of a signal or part of it.\nPossibility to open an existing file for modification: elements, types and values.\nCovered features\nnone\nnone\nnone"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#design-principles",
        "title": "Simulation data > Design principles",
        "section": "Design principles",
        "text": "A file of binary format does not allow a value conversion to or from string.\nThe values are stored as their binary representation in memory: no structured representation of composite values.\nThe values sequences are compressed using the zlib data-compression library.\nThe file size has no limit (more than 4 GB): use of 64 bits positions and C APIs for seek in file.\nThe entire file content is not loaded in memory when opening: the data is read in file only on demand.\nThe file content is not entirely rewritten on disk when closing: incremental read and write operations.\nDesign principles"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#performance",
        "title": "Simulation data > Performance",
        "section": "Performance",
        "text": "Appending values to an element: no need to read all the values before appending and use of a write cache.\nUpdating element: no move of significant data in file.\nPerformance"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#example-using-api-simulation-data",
        "title": "Simulation data > Example using API simulation data",
        "section": "Example using API simulation data",
        "text": "Example using API simulation data"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#simulation-data-file-preview-command-line",
        "title": "Simulation data > Simulation data file preview command line",
        "section": "Simulation data file preview command line",
        "text": "The pyscadeone ref_cli is used, in combination with the simdata and -show arguments, to preview\nthe content of a data file with .SD extension in a text editor, without opening the Scade One tool or Signal Editor.\nSimulation data file preview command line"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#high-level-api",
        "title": "Simulation data > High-level API",
        "section": "High-level API",
        "text": "Bases: ElementBase\nClass for simdata elements\nAdd a child to element\nchild element name\nchild element type\nchild element kind\nCreated child element\nRemove a child from element\nelement to remove\nchild could not be removed\nAdd a value to an element or appends to the last sequence of values if any.\nThis method shall NOT be used to add a single value after a multiple cycles sequence\nas it would also be repeated alongside the previous sequence.\nPrefer using append_values([py_value]) instead in such case.\nvalue that has a type corresponding to the element\nvalue is invalid or could not be added\nAdd a sequence of none values to an element (undefined cycle values)\nnumber of Nones to add\ncannot create or append nones sequence\nCreate a new sequence of one or multiple values.\nDo not use repeat factor for array and structure types.\nDo not use this for structure or array types that already have any value,\nuse append_value() instead in such case.\nlist of value(s) to add\nnumber of times to add, by default 1 (no repeat), do not use with non scalar values\nInvalid repeat, none contained in values, invalid values, cannot create or append\nvalues sequence, used repeat factor for array or structure types\nRead element values\nstart index for reading, beginning if not specified\nnumber of values to read, runs until end if not specified\neach value read\nClear all values of element\nvalues could not be cleared\nBases: FileBase\nSimdata files class\nCreate and add an element to file\nelement name\ntype of element\nkind of element\nThe new element that was added to file\nDelete an element from file\nelement to delete\nelement could not be found or deleted\nGet the file version\nVersion number\nClose a file\nCould not close file or file was not opened\nOpen a simdata file\npath of the file\nThe opened file\nfile could not be opened\nCreate a simdata file\npath of the file\nThe created file\nfile could not be created\nCreate a structure type\nall fields of the structure\nstructure name\nThe created structure type\nstructure type could not be created,\narguments are invalid, or field names duplicate\nCreate a multi dimensional array type\ntype of array\narray dimensions\narray name\nCreated array type\narray type could not be created, argument error or none type passed\nCreate an enumeration type\nvalues of the enumeration type\nname of enumeration type\nCreated enumeration type\ncould not create enumeration type, create a value of passed argument\nor invalid arguments in creation\nCreate a variant type\nconstructors of the variant type\nname of variant type\nCreated variant type\nvariant type could not be created, invalid arguments or duplicate constructor names\nCreate an imported type\nmemory size\nimported type name\nCreated imported type\ncould not create imported type, argument type error or argument type error\nHigh-level API\nElementBase\npython:str\nType\noptional\nElementKind\noptional\nElementBase\nElement\nScadeOneException\nAny\nScadeOneException\npython:int\nScadeOneException\nList\nAny\nOptional\npython:int\noptional\nScadeOneException\npython:int\noptional\npython:int\noptional\nIterator\nValue\nScadeOneException\nFileBase\npython:str\nType\noptional\nElementKind\noptional\nElementBase\nElement\nScadeOneException\npython:str\nScadeOneException\npython:str\nFileBase\nScadeOneException\npython:str\nFileBase\nScadeOneException\nList\nTuple\npython:str\noptional\nStructType\nScadeOneException\nType\nList\npython:int\npython:str\noptional\nArrayType\nScadeOneException\nList\npython:str\npython:str\noptional\nEnumType\nScadeOneException\nList\nTuple\npython:str\noptional\nVariantType\nScadeOneException\npython:int\npython:str\noptional\nImportedType\nScadeOneException"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.Element",
        "title": "Simulation data > High-level API > Element",
        "section": "High-level API > Element",
        "text": "class ansys.scadeone.core.svc.simdata.csd.Element(file: FileBase, elem_id: int, parent: ElementBase | None, name: str, sd_type: Type | None, kind: SdeKind)\n\nBases: ElementBase\n\nClass for simdata elements\n\n!! processed by numpydoc !!\n\n\n\nadd_child_element(name: str, sd_type: Type | None = None, kind: SdeKind = SdeKind.NONE) -> ElementBase\n\nAdd a child to element\n\nParameters\n\nname\n\npython:str\n\nchild element name\n\nsd_type\n\nType, optional\n\nchild element type\n\nkind\n\nElementKind, optional\n\nchild element kind\n\nReturns\n\nElementBase\n\nCreated child element\n\n!! processed by numpydoc !!\n\n\n\nremove_child_element(element: Element) -> None\n\nRemove a child from element\n\nParameters\n\nelement\n\nElement\n\nelement to remove\n\nRaises\n\nScadeOneException\n\nchild could not be removed\n\n!! processed by numpydoc !!\n\n\n\nappend_value(py_value: Any) -> None\n\nAdd a value to an element or appends to the last sequence of values if any.\nThis method shall NOT be used to add a single value after a multiple cycles sequence\nas it would also be repeated alongside the previous sequence.\nPrefer using append_values([py_value]) instead in such case.\n\nParameters\n\npy_value\n\nAny\n\nvalue that has a type corresponding to the element\n\nRaises\n\nScadeOneException\n\nvalue is invalid or could not be added\n\n!! processed by numpydoc !!\n\n\n\nappend_nones(count: int) -> None\n\nAdd a sequence of none values to an element (undefined cycle values)\n\nParameters\n\ncount\n\npython:int\n\nnumber of Nones to add\n\nRaises\n\nScadeOneException\n\ncannot create or append nones sequence\n\n!! processed by numpydoc !!\n\n\n\nappend_values(py_values: List[Any], repeat_factor: int | None = 1) -> None\n\nCreate a new sequence of one or multiple values.\nDo not use repeat factor for array and structure types.\nDo not use this for structure or array types that already have any value,\nuse append_value() instead in such case.\n\nParameters\n\npy_values\n\nList[Any]\n\nlist of value(s) to add\n\nrepeat_factor\n\nOptional[python:int], optional\n\nnumber of times to add, by default 1 (no repeat), do not use with non scalar values\n\nRaises\n\nScadeOneException\n\nInvalid repeat, none contained in values, invalid values, cannot create or append\nvalues sequence, used repeat factor for array or structure types\n\n!! processed by numpydoc !!\n\n\n\nread_values(start: int | None = None, n: int | None = None) -> Iterator[Value]\n\nRead element values\n\nParameters\n\nstart\n\npython:int, optional\n\nstart index for reading, beginning if not specified\n\nn\n\npython:int, optional\n\nnumber of values to read, runs until end if not specified\n\nYields\n\nIterator[Value]\n\neach value read\n\n!! processed by numpydoc !!\n\n\n\nclear_values() -> None\n\nClear all values of element\n\nRaises\n\nScadeOneException\n\nvalues could not be cleared\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.Element.add_child_element",
        "title": "Simulation data > High-level API > add_child_element",
        "section": "High-level API > add_child_element",
        "text": "add_child_element(name: str, sd_type: Type | None = None, kind: SdeKind = SdeKind.NONE) -> ElementBase\n\nAdd a child to element\n\nParameters\n\nname\n\npython:str\n\nchild element name\n\nsd_type\n\nType, optional\n\nchild element type\n\nkind\n\nElementKind, optional\n\nchild element kind\n\nReturns\n\nElementBase\n\nCreated child element\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.Element.remove_child_element",
        "title": "Simulation data > High-level API > remove_child_element",
        "section": "High-level API > remove_child_element",
        "text": "remove_child_element(element: Element) -> None\n\nRemove a child from element\n\nParameters\n\nelement\n\nElement\n\nelement to remove\n\nRaises\n\nScadeOneException\n\nchild could not be removed\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.Element.append_value",
        "title": "Simulation data > High-level API > append_value",
        "section": "High-level API > append_value",
        "text": "append_value(py_value: Any) -> None\n\nAdd a value to an element or appends to the last sequence of values if any.\nThis method shall NOT be used to add a single value after a multiple cycles sequence\nas it would also be repeated alongside the previous sequence.\nPrefer using append_values([py_value]) instead in such case.\n\nParameters\n\npy_value\n\nAny\n\nvalue that has a type corresponding to the element\n\nRaises\n\nScadeOneException\n\nvalue is invalid or could not be added\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.Element.append_nones",
        "title": "Simulation data > High-level API > append_nones",
        "section": "High-level API > append_nones",
        "text": "append_nones(count: int) -> None\n\nAdd a sequence of none values to an element (undefined cycle values)\n\nParameters\n\ncount\n\npython:int\n\nnumber of Nones to add\n\nRaises\n\nScadeOneException\n\ncannot create or append nones sequence\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.Element.append_values",
        "title": "Simulation data > High-level API > append_values",
        "section": "High-level API > append_values",
        "text": "append_values(py_values: List[Any], repeat_factor: int | None = 1) -> None\n\nCreate a new sequence of one or multiple values.\nDo not use repeat factor for array and structure types.\nDo not use this for structure or array types that already have any value,\nuse append_value() instead in such case.\n\nParameters\n\npy_values\n\nList[Any]\n\nlist of value(s) to add\n\nrepeat_factor\n\nOptional[python:int], optional\n\nnumber of times to add, by default 1 (no repeat), do not use with non scalar values\n\nRaises\n\nScadeOneException\n\nInvalid repeat, none contained in values, invalid values, cannot create or append\nvalues sequence, used repeat factor for array or structure types\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.Element.read_values",
        "title": "Simulation data > High-level API > read_values",
        "section": "High-level API > read_values",
        "text": "read_values(start: int | None = None, n: int | None = None) -> Iterator[Value]\n\nRead element values\n\nParameters\n\nstart\n\npython:int, optional\n\nstart index for reading, beginning if not specified\n\nn\n\npython:int, optional\n\nnumber of values to read, runs until end if not specified\n\nYields\n\nIterator[Value]\n\neach value read\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.Element.clear_values",
        "title": "Simulation data > High-level API > clear_values",
        "section": "High-level API > clear_values",
        "text": "clear_values() -> None\n\nClear all values of element\n\nRaises\n\nScadeOneException\n\nvalues could not be cleared\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.File",
        "title": "Simulation data > High-level API > File",
        "section": "High-level API > File",
        "text": "class ansys.scadeone.core.svc.simdata.csd.File(file_id: int)\n\nBases: FileBase\n\nSimdata files class\n\n!! processed by numpydoc !!\n\n\n\nadd_element(name: str, sd_type: Type | None = None, kind: SdeKind = SdeKind.NONE) -> ElementBase\n\nCreate and add an element to file\n\nParameters\n\nname\n\npython:str\n\nelement name\n\nsd_type\n\nType, optional\n\ntype of element\n\nkind\n\nElementKind, optional\n\nkind of element\n\nReturns\n\nElementBase\n\nThe new element that was added to file\n\n!! processed by numpydoc !!\n\n\n\nremove_element(element: Element) -> None\n\nDelete an element from file\n\nParameters\n\nelement\n\nElement\n\nelement to delete\n\nRaises\n\nScadeOneException\n\nelement could not be found or deleted\n\n!! processed by numpydoc !!\n\n\n\nget_version() -> str\n\nGet the file version\n\nReturns\n\npython:str\n\nVersion number\n\n!! processed by numpydoc !!\n\n\n\nclose() -> None\n\nClose a file\n\nRaises\n\nScadeOneException\n\nCould not close file or file was not opened\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.File.add_element",
        "title": "Simulation data > High-level API > add_element",
        "section": "High-level API > add_element",
        "text": "add_element(name: str, sd_type: Type | None = None, kind: SdeKind = SdeKind.NONE) -> ElementBase\n\nCreate and add an element to file\n\nParameters\n\nname\n\npython:str\n\nelement name\n\nsd_type\n\nType, optional\n\ntype of element\n\nkind\n\nElementKind, optional\n\nkind of element\n\nReturns\n\nElementBase\n\nThe new element that was added to file\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.File.remove_element",
        "title": "Simulation data > High-level API > remove_element",
        "section": "High-level API > remove_element",
        "text": "remove_element(element: Element) -> None\n\nDelete an element from file\n\nParameters\n\nelement\n\nElement\n\nelement to delete\n\nRaises\n\nScadeOneException\n\nelement could not be found or deleted\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.File.get_version",
        "title": "Simulation data > High-level API > get_version",
        "section": "High-level API > get_version",
        "text": "get_version() -> str\n\nGet the file version\n\nReturns\n\npython:str\n\nVersion number\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.File.close",
        "title": "Simulation data > High-level API > close",
        "section": "High-level API > close",
        "text": "close() -> None\n\nClose a file\n\nRaises\n\nScadeOneException\n\nCould not close file or file was not opened\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.open_file",
        "title": "Simulation data > High-level API > open_file",
        "section": "High-level API > open_file",
        "text": "ansys.scadeone.core.svc.simdata.csd.open_file(file_path: str) -> FileBase\n\nOpen a simdata file\n\nParameters\n\nfile_path\n\npython:str\n\npath of the file\n\nReturns\n\nFileBase\n\nThe opened file\n\nRaises\n\nScadeOneException\n\nfile could not be opened\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.create_file",
        "title": "Simulation data > High-level API > create_file",
        "section": "High-level API > create_file",
        "text": "ansys.scadeone.core.svc.simdata.csd.create_file(file_path: str) -> FileBase\n\nCreate a simdata file\n\nParameters\n\nfile_path\n\npython:str\n\npath of the file\n\nReturns\n\nFileBase\n\nThe created file\n\nRaises\n\nScadeOneException\n\nfile could not be created\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.create_struct_type",
        "title": "Simulation data > High-level API > create_struct_type",
        "section": "High-level API > create_struct_type",
        "text": "ansys.scadeone.core.svc.simdata.csd.create_struct_type(fields: List[Tuple], name: str = '') -> StructType\n\nCreate a structure type\n\nParameters\n\nfields\n\nList[Tuple]\n\nall fields of the structure\n\nname\n\npython:str, optional\n\nstructure name\n\nReturns\n\nStructType\n\nThe created structure type\n\nRaises\n\nScadeOneException\n\nstructure type could not be created,\narguments are invalid, or field names duplicate\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.create_array_type",
        "title": "Simulation data > High-level API > create_array_type",
        "section": "High-level API > create_array_type",
        "text": "ansys.scadeone.core.svc.simdata.csd.create_array_type(base_type: Type, dims: List[int], name: str = '') -> ArrayType\n\nCreate a multi dimensional array type\n\nParameters\n\nbase_type\n\nType\n\ntype of array\n\ndims\n\nList[python:int]\n\narray dimensions\n\nname\n\npython:str, optional\n\narray name\n\nReturns\n\nArrayType\n\nCreated array type\n\nRaises\n\nScadeOneException\n\narray type could not be created, argument error or none type passed\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.create_enum_type",
        "title": "Simulation data > High-level API > create_enum_type",
        "section": "High-level API > create_enum_type",
        "text": "ansys.scadeone.core.svc.simdata.csd.create_enum_type(values: List[str], name: str = '') -> EnumType\n\nCreate an enumeration type\n\nParameters\n\nvalues\n\nList[python:str]\n\nvalues of the enumeration type\n\nname\n\npython:str, optional\n\nname of enumeration type\n\nReturns\n\nEnumType\n\nCreated enumeration type\n\nRaises\n\nScadeOneException\n\ncould not create enumeration type, create a value of passed argument\nor invalid arguments in creation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.create_variant_type",
        "title": "Simulation data > High-level API > create_variant_type",
        "section": "High-level API > create_variant_type",
        "text": "ansys.scadeone.core.svc.simdata.csd.create_variant_type(constructors: List[Tuple], name: str = '') -> VariantType\n\nCreate a variant type\n\nParameters\n\nconstructors\n\nList[Tuple]\n\nconstructors of the variant type\n\nname\n\npython:str, optional\n\nname of variant type\n\nReturns\n\nVariantType\n\nCreated variant type\n\nRaises\n\nScadeOneException\n\nvariant type could not be created, invalid arguments or duplicate constructor names\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.csd.create_imported_type",
        "title": "Simulation data > High-level API > create_imported_type",
        "section": "High-level API > create_imported_type",
        "text": "ansys.scadeone.core.svc.simdata.csd.create_imported_type(mem_size: int, name: str = '') -> ImportedType\n\nCreate an imported type\n\nParameters\n\nmem_size\n\npython:int\n\nmemory size\n\nname\n\npython:str, optional\n\nimported type name\n\nReturns\n\nImportedType\n\nCreated imported type\n\nRaises\n\nScadeOneException\n\ncould not create imported type, argument type error or argument type error\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#type-definitions",
        "title": "Simulation data > Type definitions",
        "section": "Type definitions",
        "text": "Predefined swan types that shall be used for creation of\nsimple elements or user types definitions\nId\nType\n0\nChar\n3\nBool\n4\nInt8\n5\nInt16\n6\nInt32\n7\nInt64\n8\nUInt8\n9\nUInt32\n10\nUInt32\n11\nUInt64\n12\nFloat32\n13\nFloat64\nUsing a predefined type (float 32 here) for new element and custom user type\nBases: Type\nMultidimensional array type\nBases: Type\nEnumeration type defined with enumeration values\nBases: object\nEnumeration type value\nBases: Value\nValues for enumeration types\nBases: Type\nImported Types (stored as byte arrays)\nBases: Value\nValues for imported types\nBases: Value\nValues for list types\nBases: Value\nNone Values\nBases: PredefinedValue\nValues for predefined type boolean\nBases: PredefinedValue\nValues for predefined type char\nBases: PredefinedValue\nValues for predefined type float 32\nBases: PredefinedValue\nValues for predefined type float 64\nBases: PredefinedValue\nValues for predefined type int 16\nBases: PredefinedValue\nValues for predefined type int 32\nBases: PredefinedValue\nValues for predefined type int 64\nBases: PredefinedValue\nValues for predefined type int 8\nBases: Type\nPredefined Swan types are not stored in file.\nThey have hard-coded identifiers that can be used in user types definitions.\nBases: PredefinedValue\nValues for predefined type unsigned int 16\nBases: PredefinedValue\nValues for predefined type unsigned int 32\nBases: PredefinedValue\nValues for predefined type unsigned int 64\nBases: PredefinedValue\nValues for predefined type unsigned int 8\nBases: Value\nValues for predefined Swan Types\nBases: Type\nStructure type defined with structure type fields\nBases: object\nStructure type’s fields\nBases: object\nRepresents an abstract data type.\nBases: Value\nNo value to return for untyped variant constructor\nBases: object\nInterface for all element types values that shall provide a readable string representation\nBases: Type\nVariant type defined with variant type constructors\nBases: object\nVariant type constructor\nBases: Value\nValues for variant types\nType definitions\nType\nType\nobject\nValue\nType\nValue\nValue\nValue\nPredefinedValue\nPredefinedValue\nPredefinedValue\nPredefinedValue\nPredefinedValue\nPredefinedValue\nPredefinedValue\nPredefinedValue\nType\nPredefinedValue\nPredefinedValue\nPredefinedValue\nPredefinedValue\nValue\nType\nobject\nobject\nValue\nobject\nType\nobject\nValue"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.ArrayType",
        "title": "Simulation data > Type definitions > ArrayType",
        "section": "Type definitions > ArrayType",
        "text": "class ansys.scadeone.core.svc.simdata.defs.ArrayType(type_id: int, base_type: Type, dims: List[int], name: str = '')\n\nBases: Type\n\nMultidimensional array type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.EnumType",
        "title": "Simulation data > Type definitions > EnumType",
        "section": "Type definitions > EnumType",
        "text": "class ansys.scadeone.core.svc.simdata.defs.EnumType(type_id: int, base_type: PredefinedType, values: List[EnumTypeValue], name: str = '')\n\nBases: Type\n\nEnumeration type defined with enumeration values\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.EnumTypeValue",
        "title": "Simulation data > Type definitions > EnumTypeValue",
        "section": "Type definitions > EnumTypeValue",
        "text": "class ansys.scadeone.core.svc.simdata.defs.EnumTypeValue(name: str, int_value: int)\n\nBases: object\n\nEnumeration type value\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.EnumValue",
        "title": "Simulation data > Type definitions > EnumValue",
        "section": "Type definitions > EnumValue",
        "text": "class ansys.scadeone.core.svc.simdata.defs.EnumValue(name: str)\n\nBases: Value\n\nValues for enumeration types\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.ImportedType",
        "title": "Simulation data > Type definitions > ImportedType",
        "section": "Type definitions > ImportedType",
        "text": "class ansys.scadeone.core.svc.simdata.defs.ImportedType(type_id: int, mem_size: int, vsize: bool = False, pfn_vsize_get_bytes_size: ~ctypes.CFUNCTYPE.<locals>.CFunctionType | None = None, pfn_vsize_to_bytes: ~ctypes.CFUNCTYPE.<locals>.CFunctionType | None = None, name: str = '')\n\nBases: Type\n\nImported Types (stored as byte arrays)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.ImportedValue",
        "title": "Simulation data > Type definitions > ImportedValue",
        "section": "Type definitions > ImportedValue",
        "text": "class ansys.scadeone.core.svc.simdata.defs.ImportedValue(bytes_data)\n\nBases: Value\n\nValues for imported types\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.ListValue",
        "title": "Simulation data > Type definitions > ListValue",
        "section": "Type definitions > ListValue",
        "text": "class ansys.scadeone.core.svc.simdata.defs.ListValue(values: List[Value])\n\nBases: Value\n\nValues for list types\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.NoneValue",
        "title": "Simulation data > Type definitions > NoneValue",
        "section": "Type definitions > NoneValue",
        "text": "class ansys.scadeone.core.svc.simdata.defs.NoneValue\n\nBases: Value\n\nNone Values\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedBoolValue",
        "title": "Simulation data > Type definitions > PredefinedBoolValue",
        "section": "Type definitions > PredefinedBoolValue",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedBoolValue(value: c_ubyte)\n\nBases: PredefinedValue\n\nValues for predefined type boolean\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedCharValue",
        "title": "Simulation data > Type definitions > PredefinedCharValue",
        "section": "Type definitions > PredefinedCharValue",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedCharValue(value: c_ubyte)\n\nBases: PredefinedValue\n\nValues for predefined type char\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedFloat32Value",
        "title": "Simulation data > Type definitions > PredefinedFloat32Value",
        "section": "Type definitions > PredefinedFloat32Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedFloat32Value(value: c_float)\n\nBases: PredefinedValue\n\nValues for predefined type float 32\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedFloat64Value",
        "title": "Simulation data > Type definitions > PredefinedFloat64Value",
        "section": "Type definitions > PredefinedFloat64Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedFloat64Value(value: c_double)\n\nBases: PredefinedValue\n\nValues for predefined type float 64\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedInt16Value",
        "title": "Simulation data > Type definitions > PredefinedInt16Value",
        "section": "Type definitions > PredefinedInt16Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedInt16Value(value: c_short)\n\nBases: PredefinedValue\n\nValues for predefined type int 16\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedInt32Value",
        "title": "Simulation data > Type definitions > PredefinedInt32Value",
        "section": "Type definitions > PredefinedInt32Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedInt32Value(value: c_long)\n\nBases: PredefinedValue\n\nValues for predefined type int 32\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedInt64Value",
        "title": "Simulation data > Type definitions > PredefinedInt64Value",
        "section": "Type definitions > PredefinedInt64Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedInt64Value(value: c_longlong)\n\nBases: PredefinedValue\n\nValues for predefined type int 64\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedInt8Value",
        "title": "Simulation data > Type definitions > PredefinedInt8Value",
        "section": "Type definitions > PredefinedInt8Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedInt8Value(value: c_byte)\n\nBases: PredefinedValue\n\nValues for predefined type int 8\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedType",
        "title": "Simulation data > Type definitions > PredefinedType",
        "section": "Type definitions > PredefinedType",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedType(type_id: int)\n\nBases: Type\n\nPredefined Swan types are not stored in file.\nThey have hard-coded identifiers that can be used in user types definitions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedUInt16Value",
        "title": "Simulation data > Type definitions > PredefinedUInt16Value",
        "section": "Type definitions > PredefinedUInt16Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedUInt16Value(value: c_ushort)\n\nBases: PredefinedValue\n\nValues for predefined type unsigned int 16\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedUInt32Value",
        "title": "Simulation data > Type definitions > PredefinedUInt32Value",
        "section": "Type definitions > PredefinedUInt32Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedUInt32Value(value: c_ulong)\n\nBases: PredefinedValue\n\nValues for predefined type unsigned int 32\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedUInt64Value",
        "title": "Simulation data > Type definitions > PredefinedUInt64Value",
        "section": "Type definitions > PredefinedUInt64Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedUInt64Value(value: c_ulonglong)\n\nBases: PredefinedValue\n\nValues for predefined type unsigned int 64\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedUInt8Value",
        "title": "Simulation data > Type definitions > PredefinedUInt8Value",
        "section": "Type definitions > PredefinedUInt8Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedUInt8Value(value: c_ubyte)\n\nBases: PredefinedValue\n\nValues for predefined type unsigned int 8\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.PredefinedValue",
        "title": "Simulation data > Type definitions > PredefinedValue",
        "section": "Type definitions > PredefinedValue",
        "text": "class ansys.scadeone.core.svc.simdata.defs.PredefinedValue\n\nBases: Value\n\nValues for predefined Swan Types\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.StructType",
        "title": "Simulation data > Type definitions > StructType",
        "section": "Type definitions > StructType",
        "text": "class ansys.scadeone.core.svc.simdata.defs.StructType(type_id: int, fields: List[StructTypeField], name: str = '')\n\nBases: Type\n\nStructure type defined with structure type fields\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.StructTypeField",
        "title": "Simulation data > Type definitions > StructTypeField",
        "section": "Type definitions > StructTypeField",
        "text": "class ansys.scadeone.core.svc.simdata.defs.StructTypeField(name: str, offset: int, sd_type: Type)\n\nBases: object\n\nStructure type’s fields\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.Type",
        "title": "Simulation data > Type definitions > Type",
        "section": "Type definitions > Type",
        "text": "class ansys.scadeone.core.svc.simdata.defs.Type(type_id: int, name: str = '')\n\nBases: object\n\nRepresents an abstract data type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.UntypedVariantConstructorValue",
        "title": "Simulation data > Type definitions > UntypedVariantConstructorValue",
        "section": "Type definitions > UntypedVariantConstructorValue",
        "text": "class ansys.scadeone.core.svc.simdata.defs.UntypedVariantConstructorValue\n\nBases: Value\n\nNo value to return for untyped variant constructor\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.Value",
        "title": "Simulation data > Type definitions > Value",
        "section": "Type definitions > Value",
        "text": "class ansys.scadeone.core.svc.simdata.defs.Value\n\nBases: object\n\nInterface for all element types values that shall provide a readable string representation\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.VariantType",
        "title": "Simulation data > Type definitions > VariantType",
        "section": "Type definitions > VariantType",
        "text": "class ansys.scadeone.core.svc.simdata.defs.VariantType(type_id: int, constructors: List[VariantTypeConstructor], name: str = '')\n\nBases: Type\n\nVariant type defined with variant type constructors\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.VariantTypeConstructor",
        "title": "Simulation data > Type definitions > VariantTypeConstructor",
        "section": "Type definitions > VariantTypeConstructor",
        "text": "class ansys.scadeone.core.svc.simdata.defs.VariantTypeConstructor(name: str, value_type: Type | None)\n\nBases: object\n\nVariant type constructor\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/simdata",
        "href": "api/svc/simdata.html#ansys.scadeone.core.svc.simdata.defs.VariantValue",
        "title": "Simulation data > Type definitions > VariantValue",
        "section": "Type definitions > VariantValue",
        "text": "class ansys.scadeone.core.svc.simdata.defs.VariantValue(name: str, value: Value | None)\n\nBases: Value\n\nValues for variant types\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/svc/navigation/namespace",
        "href": "api/svc/navigation/namespace.html#navigation-using-names",
        "title": "Navigation using names",
        "section": "Navigation using names",
        "text": "Access to a model element by its name is done with namespace-based navigation.\nName objects are:\nGlobal: sensor, constant, type, group, or operator declaration\nLocal: input/output of an operator, a flow defined with var.\nObjects can be found in another module, or can be hidden (an input by a local flow for instance).\nThe get_declaration() function returns:\nThe global object (if any) with a given name (either an id, or module::id form), from the ModuleBody and ModuleInterface.\nThe object (if any) with a given name (either an id, or module::id form) in the current scope, or in the enclosing scope, possibly reaching the module level, from the Scope.\nSee also namespace_nav_ex for a detailed example.\nNavigation using names\nget_declaration()\nModuleBody\nModuleInterface\nScope"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#forward-expression",
        "title": "Forward expression",
        "section": "Forward expression",
        "text": "A forward expression is stored as a Forward class. The class hierarchy is given in the following pictures:\nBases: Expression\nForward expression:\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Enum\nForward state enumeration.\nBases: SwanItem\nforward construct:\nfwd_body ::= [[ unless expr ]] scope_sections [[ until expr ]]\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nForward expression\nForward\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nEnum\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.Forward",
        "title": "Forward expression > Forward expression > Forward",
        "section": "Forward expression > Forward",
        "text": "class ansys.scadeone.core.swan.Forward(state: ForwardState, dimensions: List[ForwardDim], body: ForwardBody, returns: List[ForwardReturnItem], luid: Luid | None = None)\n\nBases: Expression\n\nForward expression:\n\nfwd_expr ::= forward [[ luid]] [[ (( restart | resume )) ]] {{ dim }}+\n\nfwd_body returns ( returns_group )\n\nreturns_group ::= [[ returns_item {{ , returns_item }} ]]\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.Forward.get_full_path",
        "title": "Forward expression > Forward expression > get_full_path",
        "section": "Forward expression > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.Forward.set_owner",
        "title": "Forward expression > Forward expression > set_owner",
        "section": "Forward expression > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.Forward.is_protected",
        "title": "Forward expression > Forward expression > is_protected",
        "section": "Forward expression > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.Forward.model",
        "title": "Forward expression > Forward expression > model",
        "section": "Forward expression > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.Forward.module",
        "title": "Forward expression > Forward expression > module",
        "section": "Forward expression > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.Forward.owner",
        "title": "Forward expression > Forward expression > owner",
        "section": "Forward expression > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardState",
        "title": "Forward expression > Forward expression > ForwardState",
        "section": "Forward expression > ForwardState",
        "text": "class ansys.scadeone.core.swan.ForwardState(value)\n\nBases: Enum\n\nForward state enumeration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardBody",
        "title": "Forward expression > Forward expression > ForwardBody",
        "section": "Forward expression > ForwardBody",
        "text": "class ansys.scadeone.core.swan.ForwardBody(body: List[ScopeSection], unless_expr: Expression | None = None, until_expr: Expression | None = None)\n\nBases: SwanItem\n\nforward construct:\n\nfwd_body ::= [[ unless expr ]] scope_sections [[ until expr ]]\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardBody.get_full_path",
        "title": "Forward expression > Forward expression > get_full_path",
        "section": "Forward expression > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardBody.set_owner",
        "title": "Forward expression > Forward expression > set_owner",
        "section": "Forward expression > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardBody.is_protected",
        "title": "Forward expression > Forward expression > is_protected",
        "section": "Forward expression > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardBody.model",
        "title": "Forward expression > Forward expression > model",
        "section": "Forward expression > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardBody.module",
        "title": "Forward expression > Forward expression > module",
        "section": "Forward expression > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardBody.owner",
        "title": "Forward expression > Forward expression > owner",
        "section": "Forward expression > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#dimensions",
        "title": "Forward expression > Dimensions",
        "section": "Dimensions",
        "text": "Bases: SwanItem\nforward construct dimension:\ndim ::= << expr >> [[ with (( << id >> | current_elt )) {{ current_elt }} ]]\nNote that:\nthere may be no with part,\nor it is an ID followed by a possible empty list,\nor if no ID, at least one current_element.\nThe is_valid() method checks for that property.\nDimension expression.\nwith ID.\nwith elements part.\nContent of the dimension if it syntactically incorrect.\nIn that case, all other parameters are None.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nforward dimension ID, or None.\nforward dimension elements or None.\nforward dimension expression.\nTrue when dimension is syntactically incorrect and protected.\nReturns True when ID is given, or list of elements is not empty.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nReturns protected form as a string if dimension is syntactically invalid.\nProtected dimension content.\nBases: SwanItem\nForward current element:\ncurrent_elt ::= current_lhs = expr ;\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nCurrent element expression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nCurrent element.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nforward construct:\ncurrent_lhs ::= id | [ current_lhs ]\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue when current lhs is an ID.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturns current lhs as an Identifier or a ForwardLHS.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nDimensions\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim",
        "title": "Forward expression > Dimensions > ForwardDim",
        "section": "Dimensions > ForwardDim",
        "text": "class ansys.scadeone.core.swan.ForwardDim(expr: Expression | None = None, dim_id: Identifier | None = None, elems: List[ForwardElement] | None = None, protected: str | None = None)\n\nBases: SwanItem\n\nforward construct dimension:\n\ndim ::= << expr >> [[ with (( << id >> | current_elt )) {{ current_elt }} ]]\n\nNote that:\n\nthere may be no with part,\n\nor it is an ID followed by a possible empty list,\n\nor if no ID, at least one current_element.\n\nThe is_valid() method checks for that property.\n\nParameters\n\nexpr: common.Expression\n\nDimension expression.\n\nid: common.Identifier (optional)\n\nwith ID.\n\nelems: List[ForwardElement] (optional)\n\nwith elements part.\n\nprotected: str (optional)\n\nContent of the dimension if it syntactically incorrect.\nIn that case, all other parameters are None.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty dim_id: Identifier | None\n\nforward dimension ID, or None.\n\n!! processed by numpydoc !!\n\n\n\nproperty elems: List[ForwardElement] | None\n\nforward dimension elements or None.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nforward dimension expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTrue when dimension is syntactically incorrect and protected.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_valid: bool\n\nReturns True when ID is given, or list of elements is not empty.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty protected: str\n\nReturns protected form as a string if dimension is syntactically invalid.\n\n!! processed by numpydoc !!\n\n\n\nproperty value: str\n\nProtected dimension content.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.get_full_path",
        "title": "Forward expression > Dimensions > get_full_path",
        "section": "Dimensions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.set_owner",
        "title": "Forward expression > Dimensions > set_owner",
        "section": "Dimensions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.dim_id",
        "title": "Forward expression > Dimensions > dim_id",
        "section": "Dimensions > dim_id",
        "text": "property dim_id: Identifier | None\n\nforward dimension ID, or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.elems",
        "title": "Forward expression > Dimensions > elems",
        "section": "Dimensions > elems",
        "text": "property elems: List[ForwardElement] | None\n\nforward dimension elements or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.expr",
        "title": "Forward expression > Dimensions > expr",
        "section": "Dimensions > expr",
        "text": "property expr: Expression\n\nforward dimension expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.is_protected",
        "title": "Forward expression > Dimensions > is_protected",
        "section": "Dimensions > is_protected",
        "text": "property is_protected\n\nTrue when dimension is syntactically incorrect and protected.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.is_valid",
        "title": "Forward expression > Dimensions > is_valid",
        "section": "Dimensions > is_valid",
        "text": "property is_valid: bool\n\nReturns True when ID is given, or list of elements is not empty.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.model",
        "title": "Forward expression > Dimensions > model",
        "section": "Dimensions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.module",
        "title": "Forward expression > Dimensions > module",
        "section": "Dimensions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.owner",
        "title": "Forward expression > Dimensions > owner",
        "section": "Dimensions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.protected",
        "title": "Forward expression > Dimensions > protected",
        "section": "Dimensions > protected",
        "text": "property protected: str\n\nReturns protected form as a string if dimension is syntactically invalid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardDim.value",
        "title": "Forward expression > Dimensions > value",
        "section": "Dimensions > value",
        "text": "property value: str\n\nProtected dimension content.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardElement",
        "title": "Forward expression > Dimensions > ForwardElement",
        "section": "Dimensions > ForwardElement",
        "text": "class ansys.scadeone.core.swan.ForwardElement(lhs: ForwardLHS, expr: Expression)\n\nBases: SwanItem\n\nForward current element:\n\ncurrent_elt ::= current_lhs = expr ;\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nCurrent element expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty lhs: ForwardLHS\n\nCurrent element.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardElement.get_full_path",
        "title": "Forward expression > Dimensions > get_full_path",
        "section": "Dimensions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardElement.set_owner",
        "title": "Forward expression > Dimensions > set_owner",
        "section": "Dimensions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardElement.expr",
        "title": "Forward expression > Dimensions > expr",
        "section": "Dimensions > expr",
        "text": "property expr: Expression\n\nCurrent element expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardElement.is_protected",
        "title": "Forward expression > Dimensions > is_protected",
        "section": "Dimensions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardElement.lhs",
        "title": "Forward expression > Dimensions > lhs",
        "section": "Dimensions > lhs",
        "text": "property lhs: ForwardLHS\n\nCurrent element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardElement.model",
        "title": "Forward expression > Dimensions > model",
        "section": "Dimensions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardElement.module",
        "title": "Forward expression > Dimensions > module",
        "section": "Dimensions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardElement.owner",
        "title": "Forward expression > Dimensions > owner",
        "section": "Dimensions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLHS",
        "title": "Forward expression > Dimensions > ForwardLHS",
        "section": "Dimensions > ForwardLHS",
        "text": "class ansys.scadeone.core.swan.ForwardLHS(lhs: Identifier | Self)\n\nBases: SwanItem\n\nforward construct:\n\ncurrent_lhs ::= id | [ current_lhs ]\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_id: bool\n\nTrue when current lhs is an ID.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty lhs: Identifier | Self\n\nReturns current lhs as an Identifier or a ForwardLHS.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLHS.get_full_path",
        "title": "Forward expression > Dimensions > get_full_path",
        "section": "Dimensions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLHS.set_owner",
        "title": "Forward expression > Dimensions > set_owner",
        "section": "Dimensions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLHS.is_id",
        "title": "Forward expression > Dimensions > is_id",
        "section": "Dimensions > is_id",
        "text": "property is_id: bool\n\nTrue when current lhs is an ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLHS.is_protected",
        "title": "Forward expression > Dimensions > is_protected",
        "section": "Dimensions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLHS.lhs",
        "title": "Forward expression > Dimensions > lhs",
        "section": "Dimensions > lhs",
        "text": "property lhs: Identifier | Self\n\nReturns current lhs as an Identifier or a ForwardLHS.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLHS.model",
        "title": "Forward expression > Dimensions > model",
        "section": "Dimensions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLHS.module",
        "title": "Forward expression > Dimensions > module",
        "section": "Dimensions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLHS.owner",
        "title": "Forward expression > Dimensions > owner",
        "section": "Dimensions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#return",
        "title": "Forward expression > Return",
        "section": "Return",
        "text": "Bases: SwanItem\nBase class for returns_item.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: ProtectedItem, ForwardReturnItem\nforward construct: protected returns_item with {syntax% … %syntax} markup.\nFull path of Swan construct.\nCheck if protected data has the specified markup.\nString markup.\nTrue when instance markup is same as parameter.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nProtected data between markups.\nProtected data.\nTell if item is syntactically protected and provided as a string.\nProtection markup.\nMarkup string.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nReturn\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nProtectedItem\nForwardReturnItem\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\npython:str\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItem",
        "title": "Forward expression > Return > ForwardReturnItem",
        "section": "Return > ForwardReturnItem",
        "text": "class ansys.scadeone.core.swan.ForwardReturnItem\n\nBases: SwanItem\n\nBase class for returns_item.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItem.get_full_path",
        "title": "Forward expression > Return > get_full_path",
        "section": "Return > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItem.set_owner",
        "title": "Forward expression > Return > set_owner",
        "section": "Return > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItem.is_protected",
        "title": "Forward expression > Return > is_protected",
        "section": "Return > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItem.model",
        "title": "Forward expression > Return > model",
        "section": "Return > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItem.module",
        "title": "Forward expression > Return > module",
        "section": "Return > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItem.owner",
        "title": "Forward expression > Return > owner",
        "section": "Return > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ProtectedForwardReturnItem",
        "title": "Forward expression > Return > ProtectedForwardReturnItem",
        "section": "Return > ProtectedForwardReturnItem",
        "text": "class ansys.scadeone.core.swan.ProtectedForwardReturnItem(data: str)\n\nBases: ProtectedItem, ForwardReturnItem\n\nforward construct: protected returns_item with {syntax% … %syntax} markup.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nhas_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ProtectedForwardReturnItem.get_full_path",
        "title": "Forward expression > Return > get_full_path",
        "section": "Return > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ProtectedForwardReturnItem.has_markup",
        "title": "Forward expression > Return > has_markup",
        "section": "Return > has_markup",
        "text": "has_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ProtectedForwardReturnItem.set_owner",
        "title": "Forward expression > Return > set_owner",
        "section": "Return > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ProtectedForwardReturnItem.data",
        "title": "Forward expression > Return > data",
        "section": "Return > data",
        "text": "property data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ProtectedForwardReturnItem.is_protected",
        "title": "Forward expression > Return > is_protected",
        "section": "Return > is_protected",
        "text": "property is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ProtectedForwardReturnItem.markup",
        "title": "Forward expression > Return > markup",
        "section": "Return > markup",
        "text": "property markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ProtectedForwardReturnItem.model",
        "title": "Forward expression > Return > model",
        "section": "Return > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ProtectedForwardReturnItem.module",
        "title": "Forward expression > Return > module",
        "section": "Return > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ProtectedForwardReturnItem.owner",
        "title": "Forward expression > Return > owner",
        "section": "Return > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#item-clause",
        "title": "Forward expression > Item clause",
        "section": "Item clause",
        "text": "Bases: ForwardReturnItem\nforward construct: returns_item ::= item_clause.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nItem clause.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nforward construct:\nitem_clause ::= id [[ : last_default ]]\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nItem_clause identifier.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nItem_clause last default.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nforward construct: last_default.\nlast expression.\ndefault expression.\nlast and default share the same expression.\nshared cannot be used with last or default.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturns default expression or shared one.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when last = default = expr.\nReturns last expression or shared one.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nReturn shared expression.\nItem clause\nForwardReturnItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItemClause",
        "title": "Forward expression > Item clause > ForwardReturnItemClause",
        "section": "Item clause > ForwardReturnItemClause",
        "text": "class ansys.scadeone.core.swan.ForwardReturnItemClause(item_clause: ForwardItemClause)\n\nBases: ForwardReturnItem\n\nforward construct: returns_item ::= item_clause.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty item_clause: ForwardItemClause\n\nItem clause.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItemClause.get_full_path",
        "title": "Forward expression > Item clause > get_full_path",
        "section": "Item clause > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItemClause.set_owner",
        "title": "Forward expression > Item clause > set_owner",
        "section": "Item clause > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItemClause.is_protected",
        "title": "Forward expression > Item clause > is_protected",
        "section": "Item clause > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItemClause.item_clause",
        "title": "Forward expression > Item clause > item_clause",
        "section": "Item clause > item_clause",
        "text": "property item_clause: ForwardItemClause\n\nItem clause.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItemClause.model",
        "title": "Forward expression > Item clause > model",
        "section": "Item clause > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItemClause.module",
        "title": "Forward expression > Item clause > module",
        "section": "Item clause > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnItemClause.owner",
        "title": "Forward expression > Item clause > owner",
        "section": "Item clause > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardItemClause",
        "title": "Forward expression > Item clause > ForwardItemClause",
        "section": "Item clause > ForwardItemClause",
        "text": "class ansys.scadeone.core.swan.ForwardItemClause(id: Identifier, last_default: ForwardLastDefault | None = None)\n\nBases: SwanItem\n\nforward construct:\n\nitem_clause ::= id [[ : last_default ]]\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nItem_clause identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty last_default: ForwardLastDefault | None\n\nItem_clause last default.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardItemClause.get_full_path",
        "title": "Forward expression > Item clause > get_full_path",
        "section": "Item clause > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardItemClause.set_owner",
        "title": "Forward expression > Item clause > set_owner",
        "section": "Item clause > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardItemClause.id",
        "title": "Forward expression > Item clause > id",
        "section": "Item clause > id",
        "text": "property id: Identifier\n\nItem_clause identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardItemClause.is_protected",
        "title": "Forward expression > Item clause > is_protected",
        "section": "Item clause > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardItemClause.last_default",
        "title": "Forward expression > Item clause > last_default",
        "section": "Item clause > last_default",
        "text": "property last_default: ForwardLastDefault | None\n\nItem_clause last default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardItemClause.model",
        "title": "Forward expression > Item clause > model",
        "section": "Item clause > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardItemClause.module",
        "title": "Forward expression > Item clause > module",
        "section": "Item clause > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardItemClause.owner",
        "title": "Forward expression > Item clause > owner",
        "section": "Item clause > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault",
        "title": "Forward expression > Item clause > ForwardLastDefault",
        "section": "Item clause > ForwardLastDefault",
        "text": "class ansys.scadeone.core.swan.ForwardLastDefault(last: Expression | None = None, default: Expression | None = None, shared: Expression | None = None)\n\nBases: SwanItem\n\nforward construct: last_default.\n\nlast_default ::= last = expr\n\ndefault = expr\n\nlast = expr default = expr\n\nlast = default = expr\n\nParameters\n\nlast: common.Expression (optional)\n\nlast expression.\n\ndefault: common.Expression (optional)\n\ndefault expression.\n\nshared: common.Expression (optional)\n\nlast and default share the same expression.\nshared cannot be used with last or default.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty default: Expression | None\n\nReturns default expression or shared one.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_shared: bool\n\nTrue when last = default = expr.\n\n!! processed by numpydoc !!\n\n\n\nproperty last: Expression | None\n\nReturns last expression or shared one.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty shared: Expression | None\n\nReturn shared expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault.get_full_path",
        "title": "Forward expression > Item clause > get_full_path",
        "section": "Item clause > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault.set_owner",
        "title": "Forward expression > Item clause > set_owner",
        "section": "Item clause > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault.default",
        "title": "Forward expression > Item clause > default",
        "section": "Item clause > default",
        "text": "property default: Expression | None\n\nReturns default expression or shared one.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault.is_protected",
        "title": "Forward expression > Item clause > is_protected",
        "section": "Item clause > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault.is_shared",
        "title": "Forward expression > Item clause > is_shared",
        "section": "Item clause > is_shared",
        "text": "property is_shared: bool\n\nTrue when last = default = expr.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault.last",
        "title": "Forward expression > Item clause > last",
        "section": "Item clause > last",
        "text": "property last: Expression | None\n\nReturns last expression or shared one.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault.model",
        "title": "Forward expression > Item clause > model",
        "section": "Item clause > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault.module",
        "title": "Forward expression > Item clause > module",
        "section": "Item clause > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault.owner",
        "title": "Forward expression > Item clause > owner",
        "section": "Item clause > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardLastDefault.shared",
        "title": "Forward expression > Item clause > shared",
        "section": "Item clause > shared",
        "text": "property shared: Expression | None\n\nReturn shared expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#array-clause",
        "title": "Forward expression > Array clause",
        "section": "Array clause",
        "text": "Bases: ForwardReturnItem\nforward construct:\nreturns_item ::= [[ id = ]] array_clause\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nArray clause.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nIdentifier of clause, or None.\nBases: SwanItem\nforward construct:\nreturns_clause ::= (( item_clause | array_clause ))\narray_clause ::= [ returns_clause ]\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nReturn array_clause content.\nArray clause\nForwardReturnItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnArrayClause",
        "title": "Forward expression > Array clause > ForwardReturnArrayClause",
        "section": "Array clause > ForwardReturnArrayClause",
        "text": "class ansys.scadeone.core.swan.ForwardReturnArrayClause(array_clause: ForwardArrayClause, return_id: Identifier | None = None)\n\nBases: ForwardReturnItem\n\nforward construct:\n\nreturns_item ::= [[ id = ]] array_clause\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty array_clause: ForwardArrayClause\n\nArray clause.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty return_id: Identifier | None\n\nIdentifier of clause, or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnArrayClause.get_full_path",
        "title": "Forward expression > Array clause > get_full_path",
        "section": "Array clause > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnArrayClause.set_owner",
        "title": "Forward expression > Array clause > set_owner",
        "section": "Array clause > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnArrayClause.array_clause",
        "title": "Forward expression > Array clause > array_clause",
        "section": "Array clause > array_clause",
        "text": "property array_clause: ForwardArrayClause\n\nArray clause.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnArrayClause.is_protected",
        "title": "Forward expression > Array clause > is_protected",
        "section": "Array clause > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnArrayClause.model",
        "title": "Forward expression > Array clause > model",
        "section": "Array clause > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnArrayClause.module",
        "title": "Forward expression > Array clause > module",
        "section": "Array clause > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnArrayClause.owner",
        "title": "Forward expression > Array clause > owner",
        "section": "Array clause > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardReturnArrayClause.return_id",
        "title": "Forward expression > Array clause > return_id",
        "section": "Array clause > return_id",
        "text": "property return_id: Identifier | None\n\nIdentifier of clause, or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardArrayClause",
        "title": "Forward expression > Array clause > ForwardArrayClause",
        "section": "Array clause > ForwardArrayClause",
        "text": "class ansys.scadeone.core.swan.ForwardArrayClause(return_clause: ForwardItemClause | Self)\n\nBases: SwanItem\n\nforward construct:\n\nreturns_clause ::= (( item_clause | array_clause ))\narray_clause ::= [ returns_clause ]\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty return_clause: ForwardItemClause | Self\n\nReturn array_clause content.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardArrayClause.get_full_path",
        "title": "Forward expression > Array clause > get_full_path",
        "section": "Array clause > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardArrayClause.set_owner",
        "title": "Forward expression > Array clause > set_owner",
        "section": "Array clause > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardArrayClause.is_protected",
        "title": "Forward expression > Array clause > is_protected",
        "section": "Array clause > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardArrayClause.model",
        "title": "Forward expression > Array clause > model",
        "section": "Array clause > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardArrayClause.module",
        "title": "Forward expression > Array clause > module",
        "section": "Array clause > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardArrayClause.owner",
        "title": "Forward expression > Array clause > owner",
        "section": "Array clause > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/forward",
        "href": "api/language/expressions/forward.html#ansys.scadeone.core.swan.ForwardArrayClause.return_clause",
        "title": "Forward expression > Array clause > return_clause",
        "section": "Array clause > return_clause",
        "text": "property return_clause: ForwardItemClause | Self\n\nReturn array_clause content.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#common-classes",
        "title": "Common classes",
        "section": "Common classes",
        "text": "Common classes"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#exception",
        "title": "Common classes > Exception",
        "section": "Exception",
        "text": "The class ScadeOneException is used to raise an exception.\nThe message passed when raising the exception is passed to the\nScade One logger ansys.scadeone.core.common.logger.ScadeOneLogger.\nBases: Exception\nScadeOne API Exception. When raising a ScadeOneException\nit is automatically logged.\nSee ansys.scadeone.core.common.logger.ScadeOneLogger for more.\nException.with_traceback(tb) –\nset self.__traceback__ to tb and return self.\nException\nScadeOneException\nansys.scadeone.core.common.logger.ScadeOneLogger\nException\nScadeOneException\nansys.scadeone.core.common.logger.ScadeOneLogger"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.exception.ScadeOneException",
        "title": "Common classes > Exception > ScadeOneException",
        "section": "Exception > ScadeOneException",
        "text": "exception ansys.scadeone.core.common.exception.ScadeOneException(message: str, exc_info: bool = False)\n\nBases: Exception\n\nScadeOne API Exception. When raising a ScadeOneException\nit is automatically logged.\nSee ansys.scadeone.core.common.logger.ScadeOneLogger for more.\n\n!! processed by numpydoc !!\n\n\n\nwith_traceback()\n\nException.with_traceback(tb) –\nset self.__traceback__ to tb and return self.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.exception.ScadeOneException.with_traceback",
        "title": "Common classes > Exception > with_traceback",
        "section": "Exception > with_traceback",
        "text": "with_traceback()\n\nException.with_traceback(tb) –\nset self.__traceback__ to tb and return self.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#logging",
        "title": "Common classes > Logging",
        "section": "Logging",
        "text": "The ScadeOneLogger class is a subclass of the logging.Logger class.\nAs a singleton, the ScadeOneLogger class is initialized once and used\nthroughout the application using the logger.LOGGER object or the logger\napplication attribute.\nThe default logger is set to log to a file named pyscadeone.log and to\nthe console. The log level is set to DEBUG.\nOne can set the logger to a different logger by setting the logger attribute\nas in the following example:\nBases: object\nClass handling the singleton logger.\nLog a message with severity CRITICAL on the logger.\nLog a message with severity DEBUG on the logger.\nLog an error message with severity ERROR on the logger.\nLog an exception message with severity ERROR on the logger.\nLog a message with severity INFO on the logger.\nLog a message with severity WARNING on the logger.\nReturn the logger instance. The internal logger can be set\nby setting the logger attribute.\nLogging\nScadeOneLogger\nobject"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.logger.ScadeOneLogger",
        "title": "Common classes > Logging > ScadeOneLogger",
        "section": "Logging > ScadeOneLogger",
        "text": "class ansys.scadeone.core.common.logger.ScadeOneLogger\n\nBases: object\n\nClass handling the singleton logger.\n\n!! processed by numpydoc !!\n\n\n\ncritical(msg: str, *args, **kwargs) -> None\n\nLog a message with severity CRITICAL on the logger.\n\n!! processed by numpydoc !!\n\n\n\ndebug(msg: str, *args, **kwargs) -> None\n\nLog a message with severity DEBUG on the logger.\n\n!! processed by numpydoc !!\n\n\n\nerror(msg: str, *args, **kwargs) -> None\n\nLog an error message with severity ERROR on the logger.\n\n!! processed by numpydoc !!\n\n\n\nexception(msg: str, *args, **kwargs) -> None\n\nLog an exception message with severity ERROR on the logger.\n\n!! processed by numpydoc !!\n\n\n\ninfo(msg: str, *args, **kwargs) -> None\n\nLog a message with severity INFO on the logger.\n\n!! processed by numpydoc !!\n\n\n\nwarning(msg: str, *args, **kwargs) -> None\n\nLog a message with severity WARNING on the logger.\n\n!! processed by numpydoc !!\n\n\n\nproperty logger: Logger\n\nReturn the logger instance. The internal logger can be set\nby setting the logger attribute.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.logger.ScadeOneLogger.critical",
        "title": "Common classes > Logging > critical",
        "section": "Logging > critical",
        "text": "critical(msg: str, *args, **kwargs) -> None\n\nLog a message with severity CRITICAL on the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.logger.ScadeOneLogger.debug",
        "title": "Common classes > Logging > debug",
        "section": "Logging > debug",
        "text": "debug(msg: str, *args, **kwargs) -> None\n\nLog a message with severity DEBUG on the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.logger.ScadeOneLogger.error",
        "title": "Common classes > Logging > error",
        "section": "Logging > error",
        "text": "error(msg: str, *args, **kwargs) -> None\n\nLog an error message with severity ERROR on the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.logger.ScadeOneLogger.exception",
        "title": "Common classes > Logging > exception",
        "section": "Logging > exception",
        "text": "exception(msg: str, *args, **kwargs) -> None\n\nLog an exception message with severity ERROR on the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.logger.ScadeOneLogger.info",
        "title": "Common classes > Logging > info",
        "section": "Logging > info",
        "text": "info(msg: str, *args, **kwargs) -> None\n\nLog a message with severity INFO on the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.logger.ScadeOneLogger.warning",
        "title": "Common classes > Logging > warning",
        "section": "Logging > warning",
        "text": "warning(msg: str, *args, **kwargs) -> None\n\nLog a message with severity WARNING on the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.logger.ScadeOneLogger.logger",
        "title": "Common classes > Logging > logger",
        "section": "Logging > logger",
        "text": "property logger: Logger\n\nReturn the logger instance. The internal logger can be set\nby setting the logger attribute.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#versioning",
        "title": "Common classes > Versioning",
        "section": "Versioning",
        "text": "The versioning module contains the version manager for the Scade One formats.\nBases: object\nClass managing the versions for the Scade One tools formats.\nThe version manager is used through the singleton FormatVersions instance.\nCheck if the version is supported for the format.\nFormat name\nVersion to be checked\nIf the version is not supported for the format.\nGet the description for the format.\nFormat name\nDescription\nGet the versions as a document string.\nString containing the versions\nLoad the versions from the json file file.\nJSON file containing the versions\nIf the file is not found or if the file is not valid.\nGet the version for the format.\nFormat name\nVersion\nGet the formats as a set of strings.\nVersioning\nobject\npython:str\npython:str\nScadeOneException\npython:str\npython:str\npython:str\nPath\nScadeOneException\npython:str\npython:str"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.versioning.VersionManager",
        "title": "Common classes > Versioning > VersionManager",
        "section": "Versioning > VersionManager",
        "text": "class ansys.scadeone.core.common.versioning.VersionManager\n\nBases: object\n\nClass managing the versions for the Scade One tools formats.\n\nThe version manager is used through the singleton FormatVersions instance.\n\n!! processed by numpydoc !!\n\n\n\ncheck(format: str, version: str)\n\nCheck if the version is supported for the format.\n\nParameters\n\nformat\n\npython:str\n\nFormat name\n\nversion\n\npython:str\n\nVersion to be checked\n\nRaises\n\nScadeOneException\n\nIf the version is not supported for the format.\n\n!! processed by numpydoc !!\n\n\n\ndescription(format: str)\n\nGet the description for the format.\n\nParameters\n\nformat\n\npython:str\n\nFormat name\n\nReturns\n\npython:str\n\nDescription\n\n!! processed by numpydoc !!\n\n\n\nget_versions() -> str\n\nGet the versions as a document string.\n\nReturns\n\npython:str\n\nString containing the versions\n\n!! processed by numpydoc !!\n\n\n\nload_versions(version_file: Path)\n\nLoad the versions from the json file file.\n\nParameters\n\nversion_file\n\nPath\n\nJSON file containing the versions\n\nRaises\n\nScadeOneException\n\nIf the file is not found or if the file is not valid.\n\n!! processed by numpydoc !!\n\n\n\nversion(format: str)\n\nGet the version for the format.\n\nParameters\n\nformat\n\npython:str\n\nFormat name\n\nReturns\n\npython:str\n\nVersion\n\n!! processed by numpydoc !!\n\n\n\nproperty formats: set\n\nGet the formats as a set of strings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.versioning.VersionManager.check",
        "title": "Common classes > Versioning > check",
        "section": "Versioning > check",
        "text": "check(format: str, version: str)\n\nCheck if the version is supported for the format.\n\nParameters\n\nformat\n\npython:str\n\nFormat name\n\nversion\n\npython:str\n\nVersion to be checked\n\nRaises\n\nScadeOneException\n\nIf the version is not supported for the format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.versioning.VersionManager.description",
        "title": "Common classes > Versioning > description",
        "section": "Versioning > description",
        "text": "description(format: str)\n\nGet the description for the format.\n\nParameters\n\nformat\n\npython:str\n\nFormat name\n\nReturns\n\npython:str\n\nDescription\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.versioning.VersionManager.get_versions",
        "title": "Common classes > Versioning > get_versions",
        "section": "Versioning > get_versions",
        "text": "get_versions() -> str\n\nGet the versions as a document string.\n\nReturns\n\npython:str\n\nString containing the versions\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.versioning.VersionManager.load_versions",
        "title": "Common classes > Versioning > load_versions",
        "section": "Versioning > load_versions",
        "text": "load_versions(version_file: Path)\n\nLoad the versions from the json file file.\n\nParameters\n\nversion_file\n\nPath\n\nJSON file containing the versions\n\nRaises\n\nScadeOneException\n\nIf the file is not found or if the file is not valid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.versioning.VersionManager.version",
        "title": "Common classes > Versioning > version",
        "section": "Versioning > version",
        "text": "version(format: str)\n\nGet the version for the format.\n\nParameters\n\nformat\n\npython:str\n\nFormat name\n\nReturns\n\npython:str\n\nVersion\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utils",
        "href": "api/utils.html#ansys.scadeone.core.common.versioning.VersionManager.formats",
        "title": "Common classes > Versioning > formats",
        "section": "Versioning > formats",
        "text": "property formats: set\n\nGet the formats as a set of strings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#operator-declaration",
        "title": "Operator declaration",
        "section": "Operator declaration",
        "text": "Operator declaration"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#signature",
        "title": "Operator declaration > Signature",
        "section": "Signature",
        "text": "Operator interface declaration, found in module interface.\nBases: Declaration, ModuleItem\nOperator signature, without a body.\nUsed in interfaces.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturn constraints as a generator.\nTrue when operator is marked for inlining.\nLanguage item identifier.\nReturns inputs as a generator.\nTrue when operator is a node.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nReturn outputs as a generator.\nOwner of current Swan construct.\nReturn pragmas as a generator.\nReturn sizes as a generator.\nReturn specialization path_id or None.\nSignature\nDeclaration\nModuleItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature",
        "title": "Operator declaration > Signature > Signature",
        "section": "Signature > Signature",
        "text": "class ansys.scadeone.core.swan.Signature(id: Identifier, has_inline: bool, is_node: bool, inputs: List[Variable], outputs: List[Variable], sizes: List[Identifier] | None = None, constraints: List[TypeConstraint] | None = None, specialization: PathIdentifier | None = None, pragmas: List[Pragma] | None = None)\n\nBases: Declaration, ModuleItem\n\nOperator signature, without a body.\n\nUsed in interfaces.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty constraints: Generator[TypeConstraint, None, None]\n\nReturn constraints as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty has_inline: bool\n\nTrue when operator is marked for inlining.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty inputs: Generator[Variable, None, None]\n\nReturns inputs as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_node: bool\n\nTrue when operator is a node.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty outputs: Generator[Variable, None, None]\n\nReturn outputs as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: Generator[Pragma, None, None]\n\nReturn pragmas as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty sizes: Generator[Identifier, None, None]\n\nReturn sizes as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty specialization: PathIdentifier | None\n\nReturn specialization path_id or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.get_full_path",
        "title": "Operator declaration > Signature > get_full_path",
        "section": "Signature > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.set_owner",
        "title": "Operator declaration > Signature > set_owner",
        "section": "Signature > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.constraints",
        "title": "Operator declaration > Signature > constraints",
        "section": "Signature > constraints",
        "text": "property constraints: Generator[TypeConstraint, None, None]\n\nReturn constraints as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.has_inline",
        "title": "Operator declaration > Signature > has_inline",
        "section": "Signature > has_inline",
        "text": "property has_inline: bool\n\nTrue when operator is marked for inlining.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.id",
        "title": "Operator declaration > Signature > id",
        "section": "Signature > id",
        "text": "property id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.inputs",
        "title": "Operator declaration > Signature > inputs",
        "section": "Signature > inputs",
        "text": "property inputs: Generator[Variable, None, None]\n\nReturns inputs as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.is_node",
        "title": "Operator declaration > Signature > is_node",
        "section": "Signature > is_node",
        "text": "property is_node: bool\n\nTrue when operator is a node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.is_protected",
        "title": "Operator declaration > Signature > is_protected",
        "section": "Signature > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.model",
        "title": "Operator declaration > Signature > model",
        "section": "Signature > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.module",
        "title": "Operator declaration > Signature > module",
        "section": "Signature > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.outputs",
        "title": "Operator declaration > Signature > outputs",
        "section": "Signature > outputs",
        "text": "property outputs: Generator[Variable, None, None]\n\nReturn outputs as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.owner",
        "title": "Operator declaration > Signature > owner",
        "section": "Signature > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.pragmas",
        "title": "Operator declaration > Signature > pragmas",
        "section": "Signature > pragmas",
        "text": "property pragmas: Generator[Pragma, None, None]\n\nReturn pragmas as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.sizes",
        "title": "Operator declaration > Signature > sizes",
        "section": "Signature > sizes",
        "text": "property sizes: Generator[Identifier, None, None]\n\nReturn sizes as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Signature.specialization",
        "title": "Operator declaration > Signature > specialization",
        "section": "Signature > specialization",
        "text": "property specialization: PathIdentifier | None\n\nReturn specialization path_id or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#operator",
        "title": "Operator declaration > Operator",
        "section": "Operator",
        "text": "Operator definition, found in module body.\nBases: Signature\nOperator definition, with a body.\nUsed in modules. The body may not bet yet defined.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nOperator body: a scope, an equation, or None.\nReturn constraints as a generator.\nReturn a generator on diagram declarations.\nTrue when operator has a body.\nTrue when operator is marked for inlining.\nLanguage item identifier.\nReturns inputs as a generator.\nTrue when body is reduced to a single equation.\nTrue when operator is a node.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when operator is given from {text%…%text} markup.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nReturn outputs as a generator.\nOwner of current Swan construct.\nReturn pragmas as a generator.\nReturn operator signature.\nReturn sizes as a generator.\nReturn specialization path_id or None.\nOperator\nSignature\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator",
        "title": "Operator declaration > Operator > Operator",
        "section": "Operator > Operator",
        "text": "class ansys.scadeone.core.swan.Operator(id: Identifier, has_inline: bool, is_node: bool, inputs: List[Variable], outputs: List[Variable], body: Scope | Equation | None | Callable, sizes: List[Identifier] | None = None, constraints: List[TypeConstraint] | None = None, specialization: PathIdentifier | None = None, pragmas: List[Pragma] | None = None)\n\nBases: Signature\n\nOperator definition, with a body.\n\nUsed in modules. The body may not bet yet defined.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty body: Scope | Equation | None\n\nOperator body: a scope, an equation, or None.\n\n!! processed by numpydoc !!\n\n\n\nproperty constraints: Generator[TypeConstraint, None, None]\n\nReturn constraints as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty diagrams: Generator[Diagram, None, None]\n\nReturn a generator on diagram declarations.\n\n!! processed by numpydoc !!\n\n\n\nproperty has_body: bool\n\nTrue when operator has a body.\n\n!! processed by numpydoc !!\n\n\n\nproperty has_inline: bool\n\nTrue when operator is marked for inlining.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty inputs: Generator[Variable, None, None]\n\nReturns inputs as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_equation_body: bool\n\nTrue when body is reduced to a single equation.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_node: bool\n\nTrue when operator is a node.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_text: bool\n\nTrue when operator is given from {text%…%text} markup.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty outputs: Generator[Variable, None, None]\n\nReturn outputs as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: Generator[Pragma, None, None]\n\nReturn pragmas as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty signature: Signature\n\nReturn operator signature.\n\n!! processed by numpydoc !!\n\n\n\nproperty sizes: Generator[Identifier, None, None]\n\nReturn sizes as a generator.\n\n!! processed by numpydoc !!\n\n\n\nproperty specialization: PathIdentifier | None\n\nReturn specialization path_id or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.get_full_path",
        "title": "Operator declaration > Operator > get_full_path",
        "section": "Operator > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.set_owner",
        "title": "Operator declaration > Operator > set_owner",
        "section": "Operator > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.body",
        "title": "Operator declaration > Operator > body",
        "section": "Operator > body",
        "text": "property body: Scope | Equation | None\n\nOperator body: a scope, an equation, or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.constraints",
        "title": "Operator declaration > Operator > constraints",
        "section": "Operator > constraints",
        "text": "property constraints: Generator[TypeConstraint, None, None]\n\nReturn constraints as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.diagrams",
        "title": "Operator declaration > Operator > diagrams",
        "section": "Operator > diagrams",
        "text": "property diagrams: Generator[Diagram, None, None]\n\nReturn a generator on diagram declarations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.has_body",
        "title": "Operator declaration > Operator > has_body",
        "section": "Operator > has_body",
        "text": "property has_body: bool\n\nTrue when operator has a body.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.has_inline",
        "title": "Operator declaration > Operator > has_inline",
        "section": "Operator > has_inline",
        "text": "property has_inline: bool\n\nTrue when operator is marked for inlining.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.id",
        "title": "Operator declaration > Operator > id",
        "section": "Operator > id",
        "text": "property id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.inputs",
        "title": "Operator declaration > Operator > inputs",
        "section": "Operator > inputs",
        "text": "property inputs: Generator[Variable, None, None]\n\nReturns inputs as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.is_equation_body",
        "title": "Operator declaration > Operator > is_equation_body",
        "section": "Operator > is_equation_body",
        "text": "property is_equation_body: bool\n\nTrue when body is reduced to a single equation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.is_node",
        "title": "Operator declaration > Operator > is_node",
        "section": "Operator > is_node",
        "text": "property is_node: bool\n\nTrue when operator is a node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.is_protected",
        "title": "Operator declaration > Operator > is_protected",
        "section": "Operator > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.is_text",
        "title": "Operator declaration > Operator > is_text",
        "section": "Operator > is_text",
        "text": "property is_text: bool\n\nTrue when operator is given from {text%…%text} markup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.model",
        "title": "Operator declaration > Operator > model",
        "section": "Operator > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.module",
        "title": "Operator declaration > Operator > module",
        "section": "Operator > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.outputs",
        "title": "Operator declaration > Operator > outputs",
        "section": "Operator > outputs",
        "text": "property outputs: Generator[Variable, None, None]\n\nReturn outputs as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.owner",
        "title": "Operator declaration > Operator > owner",
        "section": "Operator > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.pragmas",
        "title": "Operator declaration > Operator > pragmas",
        "section": "Operator > pragmas",
        "text": "property pragmas: Generator[Pragma, None, None]\n\nReturn pragmas as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.signature",
        "title": "Operator declaration > Operator > signature",
        "section": "Operator > signature",
        "text": "property signature: Signature\n\nReturn operator signature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.sizes",
        "title": "Operator declaration > Operator > sizes",
        "section": "Operator > sizes",
        "text": "property sizes: Generator[Identifier, None, None]\n\nReturn sizes as a generator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Operator.specialization",
        "title": "Operator declaration > Operator > specialization",
        "section": "Operator > specialization",
        "text": "property specialization: PathIdentifier | None\n\nReturn specialization path_id or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#constraints",
        "title": "Operator declaration > Constraints",
        "section": "Constraints",
        "text": "Constraint that can be applied to generic types.\nBases: SwanItem\nType constraint for operator. A constraint is:\nwhere_decl ::= where typevar {{ , typevar }} numeric_kind\nThe typevar list can be protected and represented with string.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue when types are protected.\nConstraint numeric kind.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nReturns type variable names of constraints.\nReturns the list of type names, if not protected, or\nthe constraint names as a string.\nBases: Enum\nNumeric kinds for generic type constraints.\nfloat\ninteger\nnumeric\nsigned\nunsigned\nConstraints\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nUnion\nList\nVariableTypeExpression\npython:str\nEnum"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.TypeConstraint",
        "title": "Operator declaration > Constraints > TypeConstraint",
        "section": "Constraints > TypeConstraint",
        "text": "class ansys.scadeone.core.swan.TypeConstraint(type_vars: List[VariableTypeExpression] | str, kind: NumericKind)\n\nBases: SwanItem\n\nType constraint for operator. A constraint is:\n\nwhere_decl ::= where typevar {{ , typevar }} numeric_kind\n\nThe typevar list can be protected and represented with string.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTrue when types are protected.\n\n!! processed by numpydoc !!\n\n\n\nproperty kind: NumericKind\n\nConstraint numeric kind.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty type_vars: List[VariableTypeExpression] | str\n\nReturns type variable names of constraints.\n\nReturns\n\nUnion[List[VariableTypeExpression], python:str]\n\nReturns the list of type names, if not protected, or\nthe constraint names as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.TypeConstraint.get_full_path",
        "title": "Operator declaration > Constraints > get_full_path",
        "section": "Constraints > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.TypeConstraint.set_owner",
        "title": "Operator declaration > Constraints > set_owner",
        "section": "Constraints > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.TypeConstraint.is_protected",
        "title": "Operator declaration > Constraints > is_protected",
        "section": "Constraints > is_protected",
        "text": "property is_protected: bool\n\nTrue when types are protected.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.TypeConstraint.kind",
        "title": "Operator declaration > Constraints > kind",
        "section": "Constraints > kind",
        "text": "property kind: NumericKind\n\nConstraint numeric kind.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.TypeConstraint.model",
        "title": "Operator declaration > Constraints > model",
        "section": "Constraints > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.TypeConstraint.module",
        "title": "Operator declaration > Constraints > module",
        "section": "Constraints > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.TypeConstraint.owner",
        "title": "Operator declaration > Constraints > owner",
        "section": "Constraints > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.TypeConstraint.type_vars",
        "title": "Operator declaration > Constraints > type_vars",
        "section": "Constraints > type_vars",
        "text": "property type_vars: List[VariableTypeExpression] | str\n\nReturns type variable names of constraints.\n\nReturns\n\nUnion[List[VariableTypeExpression], python:str]\n\nReturns the list of type names, if not protected, or\nthe constraint names as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.NumericKind",
        "title": "Operator declaration > Constraints > NumericKind",
        "section": "Constraints > NumericKind",
        "text": "class ansys.scadeone.core.swan.NumericKind(value)\n\nBases: Enum\n\nNumeric kinds for generic type constraints.\n\n!! processed by numpydoc !!\n\n\n\nFloat = 5\n\nfloat\n\n!! processed by numpydoc !!\n\n\n\nInteger = 2\n\ninteger\n\n!! processed by numpydoc !!\n\n\n\nNumeric = 1\n\nnumeric\n\n!! processed by numpydoc !!\n\n\n\nSigned = 3\n\nsigned\n\n!! processed by numpydoc !!\n\n\n\nUnsigned = 4\n\nunsigned\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.NumericKind.Float",
        "title": "Operator declaration > Constraints > Float",
        "section": "Constraints > Float",
        "text": "Float = 5\n\nfloat\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.NumericKind.Integer",
        "title": "Operator declaration > Constraints > Integer",
        "section": "Constraints > Integer",
        "text": "Integer = 2\n\ninteger\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.NumericKind.Numeric",
        "title": "Operator declaration > Constraints > Numeric",
        "section": "Constraints > Numeric",
        "text": "Numeric = 1\n\nnumeric\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.NumericKind.Signed",
        "title": "Operator declaration > Constraints > Signed",
        "section": "Constraints > Signed",
        "text": "Signed = 3\n\nsigned\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.NumericKind.Unsigned",
        "title": "Operator declaration > Constraints > Unsigned",
        "section": "Constraints > Unsigned",
        "text": "Unsigned = 4\n\nunsigned\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#scopes",
        "title": "Operator declaration > Scopes",
        "section": "Scopes",
        "text": "Scope contains scope sections which define variables, equations,\ndiagrams and  other sections.\nBases: SwanItem, PragmaBase\nScope definition:\nReturns the type, global, operator or variable declaration searching by namespace.\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nScope sections.\nBases: SwanItem\nBase class for scopes.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when section is given from {text%…%text} markup.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: ScopeSection, ProtectedItem\nProtected section, meaning a syntactically incorrect section construct.\nFull path of Swan construct.\nCheck if protected data has the specified markup.\nString markup.\nTrue when instance markup is same as parameter.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nPrint section name with its list of items, one per line,\nended with sep string.\nProtected data between markups.\nProtected data.\nTell if item is syntactically protected and provided as a string.\nTrue when section is given from {text%…%text} markup.\nProtection markup.\nMarkup string.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nScopes\nSwanItem\nPragmaBase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nScopeSection\nProtectedItem\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\npython:str\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope",
        "title": "Operator declaration > Scopes > Scope",
        "section": "Scopes > Scope",
        "text": "class ansys.scadeone.core.swan.Scope(sections: List[ScopeSection], pragmas: List[Pragma] | None = None)\n\nBases: SwanItem, PragmaBase\n\nScope definition:\n\ndata_def ::= scope\n\nscope ::= { {{scope_section}} }\n\n!! processed by numpydoc !!\n\n\n\nget_declaration(name: str)\n\nReturns the type, global, operator or variable declaration searching by namespace.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty sections: List[ScopeSection]\n\nScope sections.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope.get_declaration",
        "title": "Operator declaration > Scopes > get_declaration",
        "section": "Scopes > get_declaration",
        "text": "get_declaration(name: str)\n\nReturns the type, global, operator or variable declaration searching by namespace.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope.get_full_path",
        "title": "Operator declaration > Scopes > get_full_path",
        "section": "Scopes > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope.pragma_str",
        "title": "Operator declaration > Scopes > pragma_str",
        "section": "Scopes > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope.set_owner",
        "title": "Operator declaration > Scopes > set_owner",
        "section": "Scopes > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope.is_protected",
        "title": "Operator declaration > Scopes > is_protected",
        "section": "Scopes > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope.model",
        "title": "Operator declaration > Scopes > model",
        "section": "Scopes > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope.module",
        "title": "Operator declaration > Scopes > module",
        "section": "Scopes > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope.owner",
        "title": "Operator declaration > Scopes > owner",
        "section": "Scopes > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope.pragmas",
        "title": "Operator declaration > Scopes > pragmas",
        "section": "Scopes > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.Scope.sections",
        "title": "Operator declaration > Scopes > sections",
        "section": "Scopes > sections",
        "text": "property sections: List[ScopeSection]\n\nScope sections.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ScopeSection",
        "title": "Operator declaration > Scopes > ScopeSection",
        "section": "Scopes > ScopeSection",
        "text": "class ansys.scadeone.core.swan.ScopeSection\n\nBases: SwanItem\n\nBase class for scopes.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ScopeSection.get_full_path",
        "title": "Operator declaration > Scopes > get_full_path",
        "section": "Scopes > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ScopeSection.set_owner",
        "title": "Operator declaration > Scopes > set_owner",
        "section": "Scopes > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ScopeSection.is_protected",
        "title": "Operator declaration > Scopes > is_protected",
        "section": "Scopes > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ScopeSection.is_text",
        "title": "Operator declaration > Scopes > is_text",
        "section": "Scopes > is_text",
        "text": "property is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ScopeSection.model",
        "title": "Operator declaration > Scopes > model",
        "section": "Scopes > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ScopeSection.module",
        "title": "Operator declaration > Scopes > module",
        "section": "Scopes > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ScopeSection.owner",
        "title": "Operator declaration > Scopes > owner",
        "section": "Scopes > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection",
        "title": "Operator declaration > Scopes > ProtectedSection",
        "section": "Scopes > ProtectedSection",
        "text": "class ansys.scadeone.core.swan.ProtectedSection(data: str)\n\nBases: ScopeSection, ProtectedItem\n\nProtected section, meaning a syntactically incorrect section construct.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nhas_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nclassmethod to_str(section: str, items: List[Any], end: str | None = ';') -> str\n\nPrint section name with its list of items, one per line,\nended with sep string.\n\n!! processed by numpydoc !!\n\n\n\nproperty data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!\n\n\n\nproperty markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.get_full_path",
        "title": "Operator declaration > Scopes > get_full_path",
        "section": "Scopes > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.has_markup",
        "title": "Operator declaration > Scopes > has_markup",
        "section": "Scopes > has_markup",
        "text": "has_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.set_owner",
        "title": "Operator declaration > Scopes > set_owner",
        "section": "Scopes > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.to_str",
        "title": "Operator declaration > Scopes > to_str",
        "section": "Scopes > to_str",
        "text": "classmethod to_str(section: str, items: List[Any], end: str | None = ';') -> str\n\nPrint section name with its list of items, one per line,\nended with sep string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.data",
        "title": "Operator declaration > Scopes > data",
        "section": "Scopes > data",
        "text": "property data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.is_protected",
        "title": "Operator declaration > Scopes > is_protected",
        "section": "Scopes > is_protected",
        "text": "property is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.is_text",
        "title": "Operator declaration > Scopes > is_text",
        "section": "Scopes > is_text",
        "text": "property is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.markup",
        "title": "Operator declaration > Scopes > markup",
        "section": "Scopes > markup",
        "text": "property markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.model",
        "title": "Operator declaration > Scopes > model",
        "section": "Scopes > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.module",
        "title": "Operator declaration > Scopes > module",
        "section": "Scopes > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/operator",
        "href": "api/language/operator/operator.html#ansys.scadeone.core.swan.ProtectedSection.owner",
        "title": "Operator declaration > Scopes > owner",
        "section": "Scopes > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#assumeguarantee---emission",
        "title": "Assume/guarantee - emission",
        "section": "Assume/guarantee - emission",
        "text": "Assume/guarantee - emission"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#assume-guarantee-sections",
        "title": "Assume/guarantee - emission > Assume guarantee sections",
        "section": "Assume guarantee sections",
        "text": "Bases: SwanItem\nAssume or Guarantee expression.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nProperty expression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nProperty identifier.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: ScopeSection\nImplements Assume section:\nassume {{LUID: expr ;}}\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nHypotheses of Assume.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when section is given from {text%…%text} markup.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: ScopeSection\nImplements Guarantee section:\nguarantee {{LUID: expr ;}}\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nGuarantees of Guarantee.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when section is given from {text%…%text} markup.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nAssume guarantee sections\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nScopeSection\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nScopeSection\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.FormalProperty",
        "title": "Assume/guarantee - emission > Assume guarantee sections > FormalProperty",
        "section": "Assume guarantee sections > FormalProperty",
        "text": "class ansys.scadeone.core.swan.FormalProperty(luid: Luid, expr: Expression)\n\nBases: SwanItem\n\nAssume or Guarantee expression.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nProperty expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid\n\nProperty identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.FormalProperty.get_full_path",
        "title": "Assume/guarantee - emission > Assume guarantee sections > get_full_path",
        "section": "Assume guarantee sections > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.FormalProperty.set_owner",
        "title": "Assume/guarantee - emission > Assume guarantee sections > set_owner",
        "section": "Assume guarantee sections > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.FormalProperty.expr",
        "title": "Assume/guarantee - emission > Assume guarantee sections > expr",
        "section": "Assume guarantee sections > expr",
        "text": "property expr: Expression\n\nProperty expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.FormalProperty.is_protected",
        "title": "Assume/guarantee - emission > Assume guarantee sections > is_protected",
        "section": "Assume guarantee sections > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.FormalProperty.luid",
        "title": "Assume/guarantee - emission > Assume guarantee sections > luid",
        "section": "Assume guarantee sections > luid",
        "text": "property luid: Luid\n\nProperty identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.FormalProperty.model",
        "title": "Assume/guarantee - emission > Assume guarantee sections > model",
        "section": "Assume guarantee sections > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.FormalProperty.module",
        "title": "Assume/guarantee - emission > Assume guarantee sections > module",
        "section": "Assume guarantee sections > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.FormalProperty.owner",
        "title": "Assume/guarantee - emission > Assume guarantee sections > owner",
        "section": "Assume guarantee sections > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.AssumeSection",
        "title": "Assume/guarantee - emission > Assume guarantee sections > AssumeSection",
        "section": "Assume guarantee sections > AssumeSection",
        "text": "class ansys.scadeone.core.swan.AssumeSection(hypotheses: List[FormalProperty])\n\nBases: ScopeSection\n\nImplements Assume section:\n\nassume {{LUID: expr ;}}\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty hypotheses: List[FormalProperty]\n\nHypotheses of Assume.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.AssumeSection.get_full_path",
        "title": "Assume/guarantee - emission > Assume guarantee sections > get_full_path",
        "section": "Assume guarantee sections > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.AssumeSection.set_owner",
        "title": "Assume/guarantee - emission > Assume guarantee sections > set_owner",
        "section": "Assume guarantee sections > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.AssumeSection.hypotheses",
        "title": "Assume/guarantee - emission > Assume guarantee sections > hypotheses",
        "section": "Assume guarantee sections > hypotheses",
        "text": "property hypotheses: List[FormalProperty]\n\nHypotheses of Assume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.AssumeSection.is_protected",
        "title": "Assume/guarantee - emission > Assume guarantee sections > is_protected",
        "section": "Assume guarantee sections > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.AssumeSection.is_text",
        "title": "Assume/guarantee - emission > Assume guarantee sections > is_text",
        "section": "Assume guarantee sections > is_text",
        "text": "property is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.AssumeSection.model",
        "title": "Assume/guarantee - emission > Assume guarantee sections > model",
        "section": "Assume guarantee sections > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.AssumeSection.module",
        "title": "Assume/guarantee - emission > Assume guarantee sections > module",
        "section": "Assume guarantee sections > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.AssumeSection.owner",
        "title": "Assume/guarantee - emission > Assume guarantee sections > owner",
        "section": "Assume guarantee sections > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.GuaranteeSection",
        "title": "Assume/guarantee - emission > Assume guarantee sections > GuaranteeSection",
        "section": "Assume guarantee sections > GuaranteeSection",
        "text": "class ansys.scadeone.core.swan.GuaranteeSection(guarantees: List[FormalProperty])\n\nBases: ScopeSection\n\nImplements Guarantee section:\n\nguarantee {{LUID: expr ;}}\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty guarantees: List[FormalProperty]\n\nGuarantees of Guarantee.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.GuaranteeSection.get_full_path",
        "title": "Assume/guarantee - emission > Assume guarantee sections > get_full_path",
        "section": "Assume guarantee sections > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.GuaranteeSection.set_owner",
        "title": "Assume/guarantee - emission > Assume guarantee sections > set_owner",
        "section": "Assume guarantee sections > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.GuaranteeSection.guarantees",
        "title": "Assume/guarantee - emission > Assume guarantee sections > guarantees",
        "section": "Assume guarantee sections > guarantees",
        "text": "property guarantees: List[FormalProperty]\n\nGuarantees of Guarantee.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.GuaranteeSection.is_protected",
        "title": "Assume/guarantee - emission > Assume guarantee sections > is_protected",
        "section": "Assume guarantee sections > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.GuaranteeSection.is_text",
        "title": "Assume/guarantee - emission > Assume guarantee sections > is_text",
        "section": "Assume guarantee sections > is_text",
        "text": "property is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.GuaranteeSection.model",
        "title": "Assume/guarantee - emission > Assume guarantee sections > model",
        "section": "Assume guarantee sections > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.GuaranteeSection.module",
        "title": "Assume/guarantee - emission > Assume guarantee sections > module",
        "section": "Assume guarantee sections > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.GuaranteeSection.owner",
        "title": "Assume/guarantee - emission > Assume guarantee sections > owner",
        "section": "Assume guarantee sections > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#emissions",
        "title": "Assume/guarantee - emission > Emissions",
        "section": "Emissions",
        "text": "Bases: SwanItem\nImplements an emission:\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nEmission condition if exists, else None.\nEmitted flows.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nEmission identifier if exists, else None.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: ScopeSection\nImplements an Emit section:\nemit {{emission_body ;}}\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nList of emissions.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when section is given from {text%…%text} markup.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nEmissions\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nScopeSection\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmissionBody",
        "title": "Assume/guarantee - emission > Emissions > EmissionBody",
        "section": "Emissions > EmissionBody",
        "text": "class ansys.scadeone.core.swan.EmissionBody(flows: List[Identifier], condition: Expression | None = None, luid: Luid | None = None)\n\nBases: SwanItem\n\nImplements an emission:\n\nemission_body ::= flow_names [[ if expr ]]\n\nflow_names ::= NAME {{ , NAME }}\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty condition: Expression | None\n\nEmission condition if exists, else None.\n\n!! processed by numpydoc !!\n\n\n\nproperty flows: List[Identifier]\n\nEmitted flows.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nEmission identifier if exists, else None.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmissionBody.get_full_path",
        "title": "Assume/guarantee - emission > Emissions > get_full_path",
        "section": "Emissions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmissionBody.set_owner",
        "title": "Assume/guarantee - emission > Emissions > set_owner",
        "section": "Emissions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmissionBody.condition",
        "title": "Assume/guarantee - emission > Emissions > condition",
        "section": "Emissions > condition",
        "text": "property condition: Expression | None\n\nEmission condition if exists, else None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmissionBody.flows",
        "title": "Assume/guarantee - emission > Emissions > flows",
        "section": "Emissions > flows",
        "text": "property flows: List[Identifier]\n\nEmitted flows.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmissionBody.is_protected",
        "title": "Assume/guarantee - emission > Emissions > is_protected",
        "section": "Emissions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmissionBody.luid",
        "title": "Assume/guarantee - emission > Emissions > luid",
        "section": "Emissions > luid",
        "text": "property luid: Luid | None\n\nEmission identifier if exists, else None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmissionBody.model",
        "title": "Assume/guarantee - emission > Emissions > model",
        "section": "Emissions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmissionBody.module",
        "title": "Assume/guarantee - emission > Emissions > module",
        "section": "Emissions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmissionBody.owner",
        "title": "Assume/guarantee - emission > Emissions > owner",
        "section": "Emissions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmitSection",
        "title": "Assume/guarantee - emission > Emissions > EmitSection",
        "section": "Emissions > EmitSection",
        "text": "class ansys.scadeone.core.swan.EmitSection(emissions: List[EmissionBody])\n\nBases: ScopeSection\n\nImplements an Emit section:\n\nemit {{emission_body ;}}\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty emissions: List[EmissionBody]\n\nList of emissions.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmitSection.get_full_path",
        "title": "Assume/guarantee - emission > Emissions > get_full_path",
        "section": "Emissions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmitSection.set_owner",
        "title": "Assume/guarantee - emission > Emissions > set_owner",
        "section": "Emissions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmitSection.emissions",
        "title": "Assume/guarantee - emission > Emissions > emissions",
        "section": "Emissions > emissions",
        "text": "property emissions: List[EmissionBody]\n\nList of emissions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmitSection.is_protected",
        "title": "Assume/guarantee - emission > Emissions > is_protected",
        "section": "Emissions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmitSection.is_text",
        "title": "Assume/guarantee - emission > Emissions > is_text",
        "section": "Emissions > is_text",
        "text": "property is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmitSection.model",
        "title": "Assume/guarantee - emission > Emissions > model",
        "section": "Emissions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmitSection.module",
        "title": "Assume/guarantee - emission > Emissions > module",
        "section": "Emissions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/other_sections",
        "href": "api/language/operator/other_sections.html#ansys.scadeone.core.swan.EmitSection.owner",
        "title": "Assume/guarantee - emission > Emissions > owner",
        "section": "Emissions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#state-machines",
        "title": "State machines",
        "section": "State machines",
        "text": "The Swan language has two syntax to express state machines:\na state machine is a collection of states, each state having strong and weak transitions;\na state machine is a collection of:\nstates, where states do not have transitions;\ntransition declarations, which describe the transitions as separate items.\nA StateMachine contains therefore a list of states and possibly transition declarations, all\nas instances of StateMachineItem.\nThe following figure shows the classes hierarchy when one uses states with transitions syntax.\nThe following figure shows the classes hierarchy when one uses states without transitions and\nseparate transition declaration syntax.\nBoth representations are not exclusive, though it is not expected to have a mixed definition of\na state machine with states and their transitions, and separate transitions.\nBases: DefByCase\nState machine definition.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue when the object is an equation.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTransitions and states of the state machine.\nLeft-hand side of the equation, may be None.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nReturn name or None if no name.\nOwner of current Swan construct.\nBases: SwanItem, ABC\nBase class for state machine items (states and transitions).\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nState machines\nStateMachine\nStateMachineItem\nDefByCase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nABC\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine",
        "title": "State machines > State machines > StateMachine",
        "section": "State machines > StateMachine",
        "text": "class ansys.scadeone.core.swan.StateMachine(lhs: EquationLHS | None = None, items: List[StateMachineItem] | None = None, name: Luid | None = None, is_equation: bool = False)\n\nBases: DefByCase\n\nState machine definition.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_equation: bool\n\nTrue when the object is an equation.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty items: List[StateMachineItem]\n\nTransitions and states of the state machine.\n\n!! processed by numpydoc !!\n\n\n\nproperty lhs: EquationLHS | None\n\nLeft-hand side of the equation, may be None.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty name: Luid | None\n\nReturn name or None if no name.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine.get_full_path",
        "title": "State machines > State machines > get_full_path",
        "section": "State machines > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine.set_owner",
        "title": "State machines > State machines > set_owner",
        "section": "State machines > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine.is_equation",
        "title": "State machines > State machines > is_equation",
        "section": "State machines > is_equation",
        "text": "property is_equation: bool\n\nTrue when the object is an equation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine.is_protected",
        "title": "State machines > State machines > is_protected",
        "section": "State machines > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine.items",
        "title": "State machines > State machines > items",
        "section": "State machines > items",
        "text": "property items: List[StateMachineItem]\n\nTransitions and states of the state machine.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine.lhs",
        "title": "State machines > State machines > lhs",
        "section": "State machines > lhs",
        "text": "property lhs: EquationLHS | None\n\nLeft-hand side of the equation, may be None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine.model",
        "title": "State machines > State machines > model",
        "section": "State machines > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine.module",
        "title": "State machines > State machines > module",
        "section": "State machines > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine.name",
        "title": "State machines > State machines > name",
        "section": "State machines > name",
        "text": "property name: Luid | None\n\nReturn name or None if no name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachine.owner",
        "title": "State machines > State machines > owner",
        "section": "State machines > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachineItem",
        "title": "State machines > State machines > StateMachineItem",
        "section": "State machines > StateMachineItem",
        "text": "class ansys.scadeone.core.swan.StateMachineItem\n\nBases: SwanItem, ABC\n\nBase class for state machine items (states and transitions).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachineItem.get_full_path",
        "title": "State machines > State machines > get_full_path",
        "section": "State machines > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachineItem.set_owner",
        "title": "State machines > State machines > set_owner",
        "section": "State machines > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachineItem.is_protected",
        "title": "State machines > State machines > is_protected",
        "section": "State machines > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachineItem.model",
        "title": "State machines > State machines > model",
        "section": "State machines > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachineItem.module",
        "title": "State machines > State machines > module",
        "section": "State machines > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateMachineItem.owner",
        "title": "State machines > State machines > owner",
        "section": "State machines > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#states",
        "title": "State machines > States",
        "section": "States",
        "text": "Bases: StateMachineItem, PragmaBase\nState definition.\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue when state has a body, namely scope sections.\nTrue when state has strong transitions.\nTrue when state has weak transitions.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nBases: SwanItem\nState identification:\nstate_ref ::= ID | LUNUM\nThe class is also used for transition declaration or target\n(restart/resume) where one has either an ID or a LUNUM.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nId part, possible None.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLunum part, possible None.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nStates\nStateMachineItem\nPragmaBase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State",
        "title": "State machines > States > State",
        "section": "States > State",
        "text": "class ansys.scadeone.core.swan.State(id: Identifier | None = None, lunum: Lunum | None = None, strong_transitions: List[Transition] | None = None, sections: List[ScopeSection] | None = None, weak_transitions: List[Transition] | None = None, is_initial: bool | None = False, pragmas: List[Pragma] | None = None)\n\nBases: StateMachineItem, PragmaBase\n\nState definition.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty has_body: bool\n\nTrue when state has a body, namely scope sections.\n\n!! processed by numpydoc !!\n\n\n\nproperty has_strong_transition: bool\n\nTrue when state has strong transitions.\n\n!! processed by numpydoc !!\n\n\n\nproperty has_weak_transition: bool\n\nTrue when state has weak transitions.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.get_full_path",
        "title": "State machines > States > get_full_path",
        "section": "States > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.pragma_str",
        "title": "State machines > States > pragma_str",
        "section": "States > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.set_owner",
        "title": "State machines > States > set_owner",
        "section": "States > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.has_body",
        "title": "State machines > States > has_body",
        "section": "States > has_body",
        "text": "property has_body: bool\n\nTrue when state has a body, namely scope sections.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.has_strong_transition",
        "title": "State machines > States > has_strong_transition",
        "section": "States > has_strong_transition",
        "text": "property has_strong_transition: bool\n\nTrue when state has strong transitions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.has_weak_transition",
        "title": "State machines > States > has_weak_transition",
        "section": "States > has_weak_transition",
        "text": "property has_weak_transition: bool\n\nTrue when state has weak transitions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.is_protected",
        "title": "State machines > States > is_protected",
        "section": "States > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.model",
        "title": "State machines > States > model",
        "section": "States > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.module",
        "title": "State machines > States > module",
        "section": "States > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.owner",
        "title": "State machines > States > owner",
        "section": "States > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.State.pragmas",
        "title": "State machines > States > pragmas",
        "section": "States > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateRef",
        "title": "State machines > States > StateRef",
        "section": "States > StateRef",
        "text": "class ansys.scadeone.core.swan.StateRef(lunum: Lunum | None = None, id: Identifier | None = None)\n\nBases: SwanItem\n\nState identification:\n\nstate_ref ::= ID | LUNUM\n\nThe class is also used for transition declaration or target\n(restart/resume) where one has either an ID or a LUNUM.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier | None\n\nId part, possible None.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty lunum: Luid | None\n\nLunum part, possible None.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateRef.get_full_path",
        "title": "State machines > States > get_full_path",
        "section": "States > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateRef.set_owner",
        "title": "State machines > States > set_owner",
        "section": "States > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateRef.id",
        "title": "State machines > States > id",
        "section": "States > id",
        "text": "property id: Identifier | None\n\nId part, possible None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateRef.is_protected",
        "title": "State machines > States > is_protected",
        "section": "States > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateRef.lunum",
        "title": "State machines > States > lunum",
        "section": "States > lunum",
        "text": "property lunum: Luid | None\n\nLunum part, possible None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateRef.model",
        "title": "State machines > States > model",
        "section": "States > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateRef.module",
        "title": "State machines > States > module",
        "section": "States > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.StateRef.owner",
        "title": "State machines > States > owner",
        "section": "States > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#transitions",
        "title": "State machines > Transitions",
        "section": "Transitions",
        "text": "Bases: StateMachineItem\nDeclaration of state machine transition:\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when strong transition, else weak transition.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nTransition priority.\nTransition data.\nBases: SwanItem, PragmaBase\nState machine transition:\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTransition arrow.\nTrue when arrow is guarded.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nBases: SwanItem\nEncode an arrow, with or without guard:\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nArrow action or None.\nArrow fork.\nArrow guard or None.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nCheck whether the arrow has a target or a fork.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nArrow target.\nBases: SwanItem\nArrow target as a state reference and kind.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when is restart, else resume.\nTrue when is resume, else restart.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nTarget reference\nTransitions\nStateMachineItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nPragmaBase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.TransitionDecl",
        "title": "State machines > Transitions > TransitionDecl",
        "section": "Transitions > TransitionDecl",
        "text": "class ansys.scadeone.core.swan.TransitionDecl(priority: Literal | None, transition: Transition, is_strong: bool, state_ref: StateRef)\n\nBases: StateMachineItem\n\nDeclaration of state machine transition:\n\ntransition_decl ::= priority [[ state_ref ]]\n\n(( unless | until )) transition\n\npriority ::= : [[ INTEGER ]] :\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_strong: bool\n\nTrue when strong transition, else weak transition.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty priority: Literal | None\n\nTransition priority.\n\n!! processed by numpydoc !!\n\n\n\nproperty transition: Transition\n\nTransition data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.TransitionDecl.get_full_path",
        "title": "State machines > Transitions > get_full_path",
        "section": "Transitions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.TransitionDecl.set_owner",
        "title": "State machines > Transitions > set_owner",
        "section": "Transitions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.TransitionDecl.is_protected",
        "title": "State machines > Transitions > is_protected",
        "section": "Transitions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.TransitionDecl.is_strong",
        "title": "State machines > Transitions > is_strong",
        "section": "Transitions > is_strong",
        "text": "property is_strong: bool\n\nTrue when strong transition, else weak transition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.TransitionDecl.model",
        "title": "State machines > Transitions > model",
        "section": "Transitions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.TransitionDecl.module",
        "title": "State machines > Transitions > module",
        "section": "Transitions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.TransitionDecl.owner",
        "title": "State machines > Transitions > owner",
        "section": "Transitions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.TransitionDecl.priority",
        "title": "State machines > Transitions > priority",
        "section": "Transitions > priority",
        "text": "property priority: Literal | None\n\nTransition priority.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.TransitionDecl.transition",
        "title": "State machines > Transitions > transition",
        "section": "Transitions > transition",
        "text": "property transition: Transition\n\nTransition data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition",
        "title": "State machines > Transitions > Transition",
        "section": "Transitions > Transition",
        "text": "class ansys.scadeone.core.swan.Transition(arrow: Arrow, pragmas: List[Pragma] | None = None)\n\nBases: SwanItem, PragmaBase\n\nState machine transition:\n\ntransition ::= if guarded_arrow ;\n\n| [[ scope ]] target ;\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty arrow: Arrow\n\nTransition arrow.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_guarded: bool\n\nTrue when arrow is guarded.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition.get_full_path",
        "title": "State machines > Transitions > get_full_path",
        "section": "Transitions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition.pragma_str",
        "title": "State machines > Transitions > pragma_str",
        "section": "Transitions > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition.set_owner",
        "title": "State machines > Transitions > set_owner",
        "section": "Transitions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition.arrow",
        "title": "State machines > Transitions > arrow",
        "section": "Transitions > arrow",
        "text": "property arrow: Arrow\n\nTransition arrow.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition.is_guarded",
        "title": "State machines > Transitions > is_guarded",
        "section": "Transitions > is_guarded",
        "text": "property is_guarded: bool\n\nTrue when arrow is guarded.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition.is_protected",
        "title": "State machines > Transitions > is_protected",
        "section": "Transitions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition.model",
        "title": "State machines > Transitions > model",
        "section": "Transitions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition.module",
        "title": "State machines > Transitions > module",
        "section": "Transitions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition.owner",
        "title": "State machines > Transitions > owner",
        "section": "Transitions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Transition.pragmas",
        "title": "State machines > Transitions > pragmas",
        "section": "Transitions > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow",
        "title": "State machines > Transitions > Arrow",
        "section": "Transitions > Arrow",
        "text": "class ansys.scadeone.core.swan.Arrow(guard: Expression | None, action: Scope | None, target: Target | None = None, fork: Fork | None = None)\n\nBases: SwanItem\n\nEncode an arrow, with or without guard:\n\nguarded_arrow ::= ( expr ) arrow\n\narrow ::= [[ scope ]] (( target | fork ))\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty action: Scope | None\n\nArrow action or None.\n\n!! processed by numpydoc !!\n\n\n\nproperty fork: Fork | None\n\nArrow fork.\n\n!! processed by numpydoc !!\n\n\n\nproperty guard: Scope | None\n\nArrow guard or None.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_valid\n\nCheck whether the arrow has a target or a fork.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty target: Target | None\n\nArrow target.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.get_full_path",
        "title": "State machines > Transitions > get_full_path",
        "section": "Transitions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.set_owner",
        "title": "State machines > Transitions > set_owner",
        "section": "Transitions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.action",
        "title": "State machines > Transitions > action",
        "section": "Transitions > action",
        "text": "property action: Scope | None\n\nArrow action or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.fork",
        "title": "State machines > Transitions > fork",
        "section": "Transitions > fork",
        "text": "property fork: Fork | None\n\nArrow fork.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.guard",
        "title": "State machines > Transitions > guard",
        "section": "Transitions > guard",
        "text": "property guard: Scope | None\n\nArrow guard or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.is_protected",
        "title": "State machines > Transitions > is_protected",
        "section": "Transitions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.is_valid",
        "title": "State machines > Transitions > is_valid",
        "section": "Transitions > is_valid",
        "text": "property is_valid\n\nCheck whether the arrow has a target or a fork.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.model",
        "title": "State machines > Transitions > model",
        "section": "Transitions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.module",
        "title": "State machines > Transitions > module",
        "section": "Transitions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.owner",
        "title": "State machines > Transitions > owner",
        "section": "Transitions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Arrow.target",
        "title": "State machines > Transitions > target",
        "section": "Transitions > target",
        "text": "property target: Target | None\n\nArrow target.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Target",
        "title": "State machines > Transitions > Target",
        "section": "Transitions > Target",
        "text": "class ansys.scadeone.core.swan.Target(target: StateRef, is_resume: bool | None = False)\n\nBases: SwanItem\n\nArrow target as a state reference and kind.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_restart: bool\n\nTrue when is restart, else resume.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_resume: bool\n\nTrue when is resume, else restart.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty target: StateRef\n\nTarget reference\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Target.get_full_path",
        "title": "State machines > Transitions > get_full_path",
        "section": "Transitions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Target.set_owner",
        "title": "State machines > Transitions > set_owner",
        "section": "Transitions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Target.is_protected",
        "title": "State machines > Transitions > is_protected",
        "section": "Transitions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Target.is_restart",
        "title": "State machines > Transitions > is_restart",
        "section": "Transitions > is_restart",
        "text": "property is_restart: bool\n\nTrue when is restart, else resume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Target.is_resume",
        "title": "State machines > Transitions > is_resume",
        "section": "Transitions > is_resume",
        "text": "property is_resume: bool\n\nTrue when is resume, else restart.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Target.model",
        "title": "State machines > Transitions > model",
        "section": "Transitions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Target.module",
        "title": "State machines > Transitions > module",
        "section": "Transitions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Target.owner",
        "title": "State machines > Transitions > owner",
        "section": "Transitions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.Target.target",
        "title": "State machines > Transitions > target",
        "section": "Transitions > target",
        "text": "property target: StateRef\n\nTarget reference\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#forks",
        "title": "State machines > Forks",
        "section": "Forks",
        "text": "Forks are transitions which split into several branches.\nForks"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#state-with-transitions",
        "title": "State machines > State with transitions",
        "section": "State with transitions",
        "text": "A fork a succession of if then else with Arrow.\nBases: Fork\nFork as a tree of arrows:\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nElse arrow.\nElsif arrows list.\nStart arrow.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nState with transitions\nArrow\nFork\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkTree",
        "title": "State machines > State with transitions > ForkTree",
        "section": "State with transitions > ForkTree",
        "text": "class ansys.scadeone.core.swan.ForkTree(if_arrow: Arrow, elsif_arrows: List[Arrow] | None = None, else_arrow: Arrow | None = None)\n\nBases: Fork\n\nFork as a tree of arrows:\n\nfork ::= if guarded_arrow\n\n{{ elsif guarded_arrow }}\n\n[[ else arrow ]]\n\nend\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty else_arrow: Arrow | None\n\nElse arrow.\n\n!! processed by numpydoc !!\n\n\n\nproperty elsif_arrows: List[Arrow]\n\nElsif arrows list.\n\n!! processed by numpydoc !!\n\n\n\nproperty if_arrow: Arrow\n\nStart arrow.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkTree.get_full_path",
        "title": "State machines > State with transitions > get_full_path",
        "section": "State with transitions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkTree.set_owner",
        "title": "State machines > State with transitions > set_owner",
        "section": "State with transitions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkTree.else_arrow",
        "title": "State machines > State with transitions > else_arrow",
        "section": "State with transitions > else_arrow",
        "text": "property else_arrow: Arrow | None\n\nElse arrow.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkTree.elsif_arrows",
        "title": "State machines > State with transitions > elsif_arrows",
        "section": "State with transitions > elsif_arrows",
        "text": "property elsif_arrows: List[Arrow]\n\nElsif arrows list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkTree.if_arrow",
        "title": "State machines > State with transitions > if_arrow",
        "section": "State with transitions > if_arrow",
        "text": "property if_arrow: Arrow\n\nStart arrow.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkTree.is_protected",
        "title": "State machines > State with transitions > is_protected",
        "section": "State with transitions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkTree.model",
        "title": "State machines > State with transitions > model",
        "section": "State with transitions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkTree.module",
        "title": "State machines > State with transitions > module",
        "section": "State with transitions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkTree.owner",
        "title": "State machines > State with transitions > owner",
        "section": "State with transitions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#separate-transitions",
        "title": "State machines > Separate transitions",
        "section": "Separate transitions",
        "text": "Fork is a list of if and one else arrows with priorities.\nBases: SwanItem\nFork as a priority fork declaration:\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nFor arrow.\nTrue when fork is priority if guarded_arrow,\nFalse if fork is priority else arrow.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nCheck if fork is either an if with a guarded_arrow, or\nan else with an arrow.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nFork priority.\nBases: Fork\nList of ForkWithPriority.\nfork ::=  {{ fork_priority }} end\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of fork with priority.\nSeparate transitions\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nFork\nForkWithPriority\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority",
        "title": "State machines > Separate transitions > ForkWithPriority",
        "section": "Separate transitions > ForkWithPriority",
        "text": "class ansys.scadeone.core.swan.ForkWithPriority(priority: Literal | None, arrow: Arrow, is_if_arrow: bool)\n\nBases: SwanItem\n\nFork as a priority fork declaration:\n\nfork_priority ::= priority if guarded_arrow\n\n| priority **else* arrow\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty arrow: Arrow\n\nFor arrow.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_if_arrow: bool\n\nTrue when fork is priority if guarded_arrow,\nFalse if fork is priority else arrow.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_valid: bool\n\nCheck if fork is either an if with a guarded_arrow, or\nan else with an arrow.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty priority: Literal | None\n\nFork priority.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority.get_full_path",
        "title": "State machines > Separate transitions > get_full_path",
        "section": "Separate transitions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority.set_owner",
        "title": "State machines > Separate transitions > set_owner",
        "section": "Separate transitions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority.arrow",
        "title": "State machines > Separate transitions > arrow",
        "section": "Separate transitions > arrow",
        "text": "property arrow: Arrow\n\nFor arrow.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority.is_if_arrow",
        "title": "State machines > Separate transitions > is_if_arrow",
        "section": "Separate transitions > is_if_arrow",
        "text": "property is_if_arrow: bool\n\nTrue when fork is priority if guarded_arrow,\nFalse if fork is priority else arrow.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority.is_protected",
        "title": "State machines > Separate transitions > is_protected",
        "section": "Separate transitions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority.is_valid",
        "title": "State machines > Separate transitions > is_valid",
        "section": "Separate transitions > is_valid",
        "text": "property is_valid: bool\n\nCheck if fork is either an if with a guarded_arrow, or\nan else with an arrow.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority.model",
        "title": "State machines > Separate transitions > model",
        "section": "Separate transitions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority.module",
        "title": "State machines > Separate transitions > module",
        "section": "Separate transitions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority.owner",
        "title": "State machines > Separate transitions > owner",
        "section": "Separate transitions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkWithPriority.priority",
        "title": "State machines > Separate transitions > priority",
        "section": "Separate transitions > priority",
        "text": "property priority: Literal | None\n\nFork priority.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkPriorityList",
        "title": "State machines > Separate transitions > ForkPriorityList",
        "section": "Separate transitions > ForkPriorityList",
        "text": "class ansys.scadeone.core.swan.ForkPriorityList(prio_forks: List[ForkWithPriority])\n\nBases: Fork\n\nList of ForkWithPriority.\n\nfork ::=  {{ fork_priority }} end\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty prio_forks: List[ForkWithPriority]\n\nList of fork with priority.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkPriorityList.get_full_path",
        "title": "State machines > Separate transitions > get_full_path",
        "section": "Separate transitions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkPriorityList.set_owner",
        "title": "State machines > Separate transitions > set_owner",
        "section": "Separate transitions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkPriorityList.is_protected",
        "title": "State machines > Separate transitions > is_protected",
        "section": "Separate transitions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkPriorityList.model",
        "title": "State machines > Separate transitions > model",
        "section": "Separate transitions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkPriorityList.module",
        "title": "State machines > Separate transitions > module",
        "section": "Separate transitions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkPriorityList.owner",
        "title": "State machines > Separate transitions > owner",
        "section": "Separate transitions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/automaton",
        "href": "api/language/operator/automaton.html#ansys.scadeone.core.swan.ForkPriorityList.prio_forks",
        "title": "State machines > Separate transitions > prio_forks",
        "section": "Separate transitions > prio_forks",
        "text": "property prio_forks: List[ForkWithPriority]\n\nList of fork with priority.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes PyScadeOne core classes, methods, and functions\nfor Scade One app and modules. Use the search feature or click links\nto consult the API documentation.\nUML class diagrams are used in some places. These diagrams do not give in full extent the content of the classes,\nbut rather show an overview of the hierarchy when it has some complexity. Reference remains the classes documentation.\nAPI reference"
    },
    {
        "objectID": "api/svc/navigation/visitor",
        "href": "api/svc/navigation/visitor.html#swan-model-visitor",
        "title": "Swan model visitor",
        "section": "Swan model visitor",
        "text": "The visitor pattern is a design pattern allowing to separate algorithm and object structure.\nData structure objects have an accept method, which has the visitor object as argument.\nIn turn, the visitor object does some process onto the calling object. By deriving the\nvisitor class, different algorithms can be implemented. In that scheme, the data structure\nis responsible for the traversal.\nThe Swan visitor works a little differently. The visitor knows about the Swan objects tree\nand is responsible for the tree traversal. There is no accept method for the Swan classes.\nThe advantage is that the traversal can be controlled by a derived visitor class.\nFor a complete code example, see ref_visitor_example.\nSwan model visitor\naccept\naccept"
    },
    {
        "objectID": "api/svc/navigation/visitor",
        "href": "api/svc/navigation/visitor.html#overview",
        "title": "Swan model visitor > Overview",
        "section": "Overview",
        "text": "The SwanVisitor implements the base visitor. It provides:\nThe SwanVisitor.visit() which is the entry point to start visiting an object.\nThe methods SwanVisitor.visit_<class_name>(swan_obj: object, owner: object, property: str). There\nis one such method for each Swan classes. The SwanVisitor.visit() method calls the\nprivate SwanVisitor._visit() method which dispatches the Swan object argument to the\nproper SwanVisitor.visit_<class_name> method. Arguments of SwanVisitor.visit_<class_name> are:\nswan_obj: the visited object.\nowner: when an object is visited, the default visitor traverses the objects referenced by the properties\nset by the constructor. The owner is the owner of the property. The owner is None for the root\nvisited object.\nproperty: when visiting a property, its name is given to that parameter to know about the visit context.\nFor instance, if one visits an ArrayRepetition object, there are two properties with the same\nExpression type. The corresponding default visitor method is:\nVisiting the expr and the size may lead to the call of the same visitor method. Therefore,\nthe property argument discriminates the context together with the owner.\nNote that the base class Expression is visited first.\nOverview\nSwanVisitor\nSwanVisitor.visit()\nSwanVisitor.visit()\nSwanVisitor._visit()\nArrayRepetition\nExpression\nexpr\nsize\nowner\nExpression"
    },
    {
        "objectID": "api/svc/navigation/visitor",
        "href": "api/svc/navigation/visitor.html#usage",
        "title": "Swan model visitor > Usage",
        "section": "Usage",
        "text": "The default visitor does nothing but tree traversal. Therefore, one needs to derive\na visitor with some meaningful operation.\nThe methods of SwanVisitor can be overridden as needed. If one wants to perform a systematic\naction while visiting an item, override the SwanVisitor._visit() method:\nOverride any method for which an action is required. Example for a sensor:\nOr one can take the default code and write specific processing. Example for an operator:\nThe visitor defines also some specific functions that have no specific behavior:\nSwanVisitor.visit_builtin(): this method is called for an object of type str, bool, int, float.\nSwanVisitor.visit_SwanItem(): this method is called when visiting a SwanItem, which is the base class of\nmost of the Swan classes. If it has an action, it will be done for all instances derived from a SwanItem.\nUsage\nSwanVisitor\nSwanVisitor._visit()\nSwanVisitor.visit_builtin()\nstr\nbool\nint\nfloat\nSwanVisitor.visit_SwanItem()"
    },
    {
        "objectID": "api/svc/navigation/visitor",
        "href": "api/svc/navigation/visitor.html#visitor-api",
        "title": "Swan model visitor > Visitor API",
        "section": "Visitor API",
        "text": "This section describes all the methods of the SwanVisitor.\nVisitor API\nSwanVisitor"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#common-classes",
        "title": "Common classes",
        "section": "Common classes",
        "text": "This section contains the description of classes that are\ncommonly used by other classes.\nCommon classes"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#swanitem-class",
        "title": "Common classes > SwanItem class",
        "section": "SwanItem class",
        "text": "The SwanItem is the top-level class for all constructs.\nBase class for Scade objects.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nSwanItem class\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanItem",
        "title": "Common classes > SwanItem class > SwanItem",
        "section": "SwanItem class > SwanItem",
        "text": "class ansys.scadeone.core.swan.SwanItem\n\nBase class for Scade objects.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanItem.get_full_path",
        "title": "Common classes > SwanItem class > get_full_path",
        "section": "SwanItem class > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanItem.set_owner",
        "title": "Common classes > SwanItem class > set_owner",
        "section": "SwanItem class > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanItem.is_protected",
        "title": "Common classes > SwanItem class > is_protected",
        "section": "SwanItem class > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanItem.model",
        "title": "Common classes > SwanItem class > model",
        "section": "SwanItem class > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanItem.module",
        "title": "Common classes > SwanItem class > module",
        "section": "SwanItem class > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanItem.owner",
        "title": "Common classes > SwanItem class > owner",
        "section": "SwanItem class > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#identifier-classes",
        "title": "Common classes > Identifier classes",
        "section": "Identifier classes",
        "text": "Swan identifiers are represented by the following classes with a simple identifier or\na path identifier, which is a list of identifiers separated by ‘::’.\nA luid is used to identify diagram blocks, connections, but also to name instances\nof operators, or parts of automata.\nBases: SwanItem, PragmaBase\nClass for identifier.\nAn Identifier can be invalid if it was protected while saving it\nfor some reason. In that case, the property _is_valid_ is set to True.\nThe class stores the pragmas associated with the Identifier.\nFull path of Swan construct.\nReturn a string with all pragmas.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nComment part string.\nReturn true when Identifier is a name.\nReturn true when Identifier is protected.\nReturn true when Identifier is valid.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nList of pragmas.\nIdentifier as a string.\nBases: SwanItem\nClass for path identifiers, i.e: P1::Id.\nThe class manipulates the PathIdentifier as separate items.\nIf the original path was protected (given as a string), the property is_valid\nis False, and the path is considered to be a single string and is_protected is True.\npath_id argument is:\na list of identifiers, for a valid path.\na string if the path was protected.\nCreate a PathIdentifier from a string.\nString containing the path identifier.\nPathIdentifier instance.\nFull path of Swan construct.\nCheck if path is a valid file path identifier, i.e.\nid {- id}, with no possible spaces around ‘-‘.\nThe path string is the basename of a module or an instance file.\nString containing the path identifier.\nTrue when path is valid.\nCheck if path is a valid path identifier, i.e.\nid {:: id}, with possible spaces around ‘::’.\nString containing the path identifier.\nTrue when path is valid.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nSplit a path into path::name.\nPath string.\npath, name.\nCompute name by joining name parts with ‘::’.\nTrue when path is from a protected source, i.e., a string.\nTrue when path is a sequence of Identifier.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nPathId as a list of Identifier, or a string if protected.\nList of Pragma associated with the path_id.\nBases: SwanItem\nClass for LUID support.\nThe ‘$’ prefix is not saved (potentially removed at creation).\nLuid value with ‘$ prefix.\nFull path of Swan construct.\nTrue when a luid is a valid LUID.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nLuid value.\nIdentifier classes\nSwanItem\nPragmaBase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\npython:str\nPathIdentifier\npython:str\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\nTuple\npython:str\npython:str\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier",
        "title": "Common classes > Identifier classes > Identifier",
        "section": "Identifier classes > Identifier",
        "text": "class ansys.scadeone.core.swan.Identifier(value: str, pragmas: List[Pragma] | None = None, comment: str | None = None, is_name: bool | None = False)\n\nBases: SwanItem, PragmaBase\n\nClass for identifier.\n\nAn Identifier can be invalid if it was protected while saving it\nfor some reason. In that case, the property _is_valid_ is set to True.\n\nThe class stores the pragmas associated with the Identifier.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\npragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty comment: str\n\nComment part string.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_name: bool\n\nReturn true when Identifier is a name.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nReturn true when Identifier is protected.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_valid: bool\n\nReturn true when Identifier is valid.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!\n\n\n\nproperty value: str\n\nIdentifier as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.get_full_path",
        "title": "Common classes > Identifier classes > get_full_path",
        "section": "Identifier classes > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.pragma_str",
        "title": "Common classes > Identifier classes > pragma_str",
        "section": "Identifier classes > pragma_str",
        "text": "pragma_str() -> str\n\nReturn a string with all pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.set_owner",
        "title": "Common classes > Identifier classes > set_owner",
        "section": "Identifier classes > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.comment",
        "title": "Common classes > Identifier classes > comment",
        "section": "Identifier classes > comment",
        "text": "property comment: str\n\nComment part string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.is_name",
        "title": "Common classes > Identifier classes > is_name",
        "section": "Identifier classes > is_name",
        "text": "property is_name: bool\n\nReturn true when Identifier is a name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.is_protected",
        "title": "Common classes > Identifier classes > is_protected",
        "section": "Identifier classes > is_protected",
        "text": "property is_protected: bool\n\nReturn true when Identifier is protected.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.is_valid",
        "title": "Common classes > Identifier classes > is_valid",
        "section": "Identifier classes > is_valid",
        "text": "property is_valid: bool\n\nReturn true when Identifier is valid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.model",
        "title": "Common classes > Identifier classes > model",
        "section": "Identifier classes > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.module",
        "title": "Common classes > Identifier classes > module",
        "section": "Identifier classes > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.owner",
        "title": "Common classes > Identifier classes > owner",
        "section": "Identifier classes > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.pragmas",
        "title": "Common classes > Identifier classes > pragmas",
        "section": "Identifier classes > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of pragmas.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Identifier.value",
        "title": "Common classes > Identifier classes > value",
        "section": "Identifier classes > value",
        "text": "property value: str\n\nIdentifier as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier",
        "title": "Common classes > Identifier classes > PathIdentifier",
        "section": "Identifier classes > PathIdentifier",
        "text": "class ansys.scadeone.core.swan.PathIdentifier(path_id: List[Identifier] | str)\n\nBases: SwanItem\n\nClass for path identifiers, i.e: P1::Id.\n\nThe class manipulates the PathIdentifier as separate items.\n\nIf the original path was protected (given as a string), the property is_valid\nis False, and the path is considered to be a single string and is_protected is True.\n\npath_id argument is:\n\na list of identifiers, for a valid path.\n\na string if the path was protected.\n\n!! processed by numpydoc !!\n\n\n\nstatic from_string(path: str) -> PathIdentifier\n\nCreate a PathIdentifier from a string.\n\nParameters\n\npath\n\npython:str\n\nString containing the path identifier.\n\nReturns\n\nPathIdentifier\n\nPathIdentifier instance.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nclassmethod is_valid_file_path(path: str) -> bool\n\nCheck if path is a valid file path identifier, i.e.\nid {- id}, with no possible spaces around ‘-‘.\n\nThe path string is the basename of a module or an instance file.\n\nParameters\n\npath\n\npython:str\n\nString containing the path identifier.\n\nReturns\n\nbool\n\nTrue when path is valid.\n\n!! processed by numpydoc !!\n\n\n\nclassmethod is_valid_path(path: str) -> bool\n\nCheck if path is a valid path identifier, i.e.\nid {:: id}, with possible spaces around ‘::’.\n\nParameters\n\npath\n\npython:str\n\nString containing the path identifier.\n\nReturns\n\nbool\n\nTrue when path is valid.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nstatic split(path: str) -> Tuple[str, str]\n\nSplit a path into path::name.\n\nParameters\n\npath\n\npython:str\n\nPath string.\n\nReturns\n\nTuple[python:str, python:str]\n\npath, name.\n\n!! processed by numpydoc !!\n\n\n\nproperty as_string: str\n\nCompute name by joining name parts with ‘::’.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTrue when path is from a protected source, i.e., a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_valid: bool\n\nTrue when path is a sequence of Identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty path_id: List[Identifier] | str\n\nPathId as a list of Identifier, or a string if protected.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragmas: List[Pragma]\n\nList of Pragma associated with the path_id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.from_string",
        "title": "Common classes > Identifier classes > from_string",
        "section": "Identifier classes > from_string",
        "text": "static from_string(path: str) -> PathIdentifier\n\nCreate a PathIdentifier from a string.\n\nParameters\n\npath\n\npython:str\n\nString containing the path identifier.\n\nReturns\n\nPathIdentifier\n\nPathIdentifier instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.get_full_path",
        "title": "Common classes > Identifier classes > get_full_path",
        "section": "Identifier classes > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.is_valid_file_path",
        "title": "Common classes > Identifier classes > is_valid_file_path",
        "section": "Identifier classes > is_valid_file_path",
        "text": "classmethod is_valid_file_path(path: str) -> bool\n\nCheck if path is a valid file path identifier, i.e.\nid {- id}, with no possible spaces around ‘-‘.\n\nThe path string is the basename of a module or an instance file.\n\nParameters\n\npath\n\npython:str\n\nString containing the path identifier.\n\nReturns\n\nbool\n\nTrue when path is valid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.is_valid_path",
        "title": "Common classes > Identifier classes > is_valid_path",
        "section": "Identifier classes > is_valid_path",
        "text": "classmethod is_valid_path(path: str) -> bool\n\nCheck if path is a valid path identifier, i.e.\nid {:: id}, with possible spaces around ‘::’.\n\nParameters\n\npath\n\npython:str\n\nString containing the path identifier.\n\nReturns\n\nbool\n\nTrue when path is valid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.set_owner",
        "title": "Common classes > Identifier classes > set_owner",
        "section": "Identifier classes > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.split",
        "title": "Common classes > Identifier classes > split",
        "section": "Identifier classes > split",
        "text": "static split(path: str) -> Tuple[str, str]\n\nSplit a path into path::name.\n\nParameters\n\npath\n\npython:str\n\nPath string.\n\nReturns\n\nTuple[python:str, python:str]\n\npath, name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.as_string",
        "title": "Common classes > Identifier classes > as_string",
        "section": "Identifier classes > as_string",
        "text": "property as_string: str\n\nCompute name by joining name parts with ‘::’.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.is_protected",
        "title": "Common classes > Identifier classes > is_protected",
        "section": "Identifier classes > is_protected",
        "text": "property is_protected: bool\n\nTrue when path is from a protected source, i.e., a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.is_valid",
        "title": "Common classes > Identifier classes > is_valid",
        "section": "Identifier classes > is_valid",
        "text": "property is_valid: bool\n\nTrue when path is a sequence of Identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.model",
        "title": "Common classes > Identifier classes > model",
        "section": "Identifier classes > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.module",
        "title": "Common classes > Identifier classes > module",
        "section": "Identifier classes > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.owner",
        "title": "Common classes > Identifier classes > owner",
        "section": "Identifier classes > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.path_id",
        "title": "Common classes > Identifier classes > path_id",
        "section": "Identifier classes > path_id",
        "text": "property path_id: List[Identifier] | str\n\nPathId as a list of Identifier, or a string if protected.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.PathIdentifier.pragmas",
        "title": "Common classes > Identifier classes > pragmas",
        "section": "Identifier classes > pragmas",
        "text": "property pragmas: List[Pragma]\n\nList of Pragma associated with the path_id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Luid",
        "title": "Common classes > Identifier classes > Luid",
        "section": "Identifier classes > Luid",
        "text": "class ansys.scadeone.core.swan.Luid(value: str)\n\nBases: SwanItem\n\nClass for LUID support.\nThe ‘$’ prefix is not saved (potentially removed at creation).\n\n!! processed by numpydoc !!\n\n\n\nas_luid() -> str\n\nLuid value with ‘$ prefix.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic is_valid(luid: str) -> bool\n\nTrue when a luid is a valid LUID.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty value: str\n\nLuid value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Luid.as_luid",
        "title": "Common classes > Identifier classes > as_luid",
        "section": "Identifier classes > as_luid",
        "text": "as_luid() -> str\n\nLuid value with ‘$ prefix.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Luid.get_full_path",
        "title": "Common classes > Identifier classes > get_full_path",
        "section": "Identifier classes > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Luid.is_valid",
        "title": "Common classes > Identifier classes > is_valid",
        "section": "Identifier classes > is_valid",
        "text": "static is_valid(luid: str) -> bool\n\nTrue when a luid is a valid LUID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Luid.set_owner",
        "title": "Common classes > Identifier classes > set_owner",
        "section": "Identifier classes > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Luid.is_protected",
        "title": "Common classes > Identifier classes > is_protected",
        "section": "Identifier classes > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Luid.model",
        "title": "Common classes > Identifier classes > model",
        "section": "Identifier classes > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Luid.module",
        "title": "Common classes > Identifier classes > module",
        "section": "Identifier classes > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Luid.owner",
        "title": "Common classes > Identifier classes > owner",
        "section": "Identifier classes > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Luid.value",
        "title": "Common classes > Identifier classes > value",
        "section": "Identifier classes > value",
        "text": "property value: str\n\nLuid value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#pragma-class",
        "title": "Common classes > Pragma class",
        "section": "Pragma class",
        "text": "The Pragma stores a pragma information given in the code.\nBases: object\nStores a pragma.\nExtract pragma information as a tuple\nif pragma is valid, namely: #pragma key value#end.\nThe Tuple (pragma name, pragma value) if pragma is valid, None else.\nFilter a list of pragmas with/without a given key.\nList of pragmas\nKey to filter\nTrue when pragmas with the key are selected, False when without the key, by default True\nList of pragmas with the given key.\nFull pragma string\nPragma string\nPragma class\nPragma\nobject\npython:tuple\npython:None\nList\nPragma\npython:str\noptional\nList\nPragma\npython:str"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Pragma",
        "title": "Common classes > Pragma class > Pragma",
        "section": "Pragma class > Pragma",
        "text": "class ansys.scadeone.core.swan.Pragma(pragma: str)\n\nBases: object\n\nStores a pragma.\n\n!! processed by numpydoc !!\n\n\n\nextract() -> dict | None\n\nExtract pragma information as a tuple\nif pragma is valid, namely: #pragma key value#end.\n\nReturns\n\npython:tuple | python:None\n\nThe Tuple (pragma name, pragma value) if pragma is valid, None else.\n\n!! processed by numpydoc !!\n\n\n\nstatic filter(pragmas: List[Pragma], key: str, with_key: bool = True) -> List[Pragma]\n\nFilter a list of pragmas with/without a given key.\n\nParameters\n\npragmas\n\nList[Pragma]\n\nList of pragmas\n\nkey\n\npython:str\n\nKey to filter\n\nwith_key\n\nbool, optional\n\nTrue when pragmas with the key are selected, False when without the key, by default True\n\nReturns\n\nList[Pragma]\n\nList of pragmas with the given key.\n\n!! processed by numpydoc !!\n\n\n\nproperty pragma: str\n\nFull pragma string\n\nReturns\n\npython:str\n\nPragma string\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Pragma.extract",
        "title": "Common classes > Pragma class > extract",
        "section": "Pragma class > extract",
        "text": "extract() -> dict | None\n\nExtract pragma information as a tuple\nif pragma is valid, namely: #pragma key value#end.\n\nReturns\n\npython:tuple | python:None\n\nThe Tuple (pragma name, pragma value) if pragma is valid, None else.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Pragma.filter",
        "title": "Common classes > Pragma class > filter",
        "section": "Pragma class > filter",
        "text": "static filter(pragmas: List[Pragma], key: str, with_key: bool = True) -> List[Pragma]\n\nFilter a list of pragmas with/without a given key.\n\nParameters\n\npragmas\n\nList[Pragma]\n\nList of pragmas\n\nkey\n\npython:str\n\nKey to filter\n\nwith_key\n\nbool, optional\n\nTrue when pragmas with the key are selected, False when without the key, by default True\n\nReturns\n\nList[Pragma]\n\nList of pragmas with the given key.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Pragma.pragma",
        "title": "Common classes > Pragma class > pragma",
        "section": "Pragma class > pragma",
        "text": "property pragma: str\n\nFull pragma string\n\nReturns\n\npython:str\n\nPragma string\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#protection-class",
        "title": "Common classes > Protection class",
        "section": "Protection class",
        "text": "User code may be syntactically incorrect in a model, but must be\nsaved and read without errors by the parser. Such invalid code\nis protected by markups. Other markups are used by the serialization\nmechanism of the editor.\nSuch piece of code is represented with a ProtectedItem (or\nderived class) instance, which stores the code text and the markup.\nBases: SwanItem\nBase class for protected data. A protected data\nis a piece of Swan code enclosed between markups, mostly to store\nsyntactically incorrect code. A protected data is enclosed within the pair\n{markup% .. %markup}, where markup is defined by the\nregular expression: [‘a’-‘z’ ‘A’-‘Z’ 0-9 _]*.\nSee Markup for existing markups.\nFull path of Swan construct.\nCheck if protected data has the specified markup.\nString markup.\nTrue when instance markup is same as parameter.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nProtected data between markups.\nProtected data.\nTell if item is syntactically protected and provided as a string.\nProtection markup.\nMarkup string.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: object\nClass defining the markups used by the Swan serialization.\nReturn text as the protected string {markup%text%markup} if required.\nText to protect\nTrue when text shall be protected, by default True\nMarkup to use, by default None, resulting in using Markup.Syntax\nProtected string {markup%text%markup} if is_protected is True, else text.\nIncorrect const declaration.\nIncorrect forward dimension.\nEmpty instance block body. This is an invalid construct, but it is needed for the editor.\nIncorrect group declaration.\nProtected instance id.\nOperator expression. Specific markup for the editor. The content is re-parsed by the API.\nIncorrect sensor declaration.\nIncorrect operator signature in interface.\nGeneral syntax error.\nTextual operator with syntax error.\nTextual operator or generic operator content. The content is re-parsed by the API.\nIncorrect type declaration.\nIncorrect use declaration.\nIncorrect variable declaration.\nProtection class\nProtectedItem\nSwanItem\n{markup%\n%markup}\nMarkup\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\npython:str\nModuleBody\nModuleInterface\nobject\npython:str\noptional\npython:str\noptional\npython:str"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.ProtectedItem",
        "title": "Common classes > Protection class > ProtectedItem",
        "section": "Protection class > ProtectedItem",
        "text": "class ansys.scadeone.core.swan.ProtectedItem(data: str, markup: str | None = 'syntax')\n\nBases: SwanItem\n\nBase class for protected data. A protected data\nis a piece of Swan code enclosed between markups, mostly to store\nsyntactically incorrect code. A protected data is enclosed within the pair\n{markup% .. %markup}, where markup is defined by the\nregular expression: [‘a’-‘z’ ‘A’-‘Z’ 0-9 _]*.\n\nSee Markup for existing markups.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nhas_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.ProtectedItem.get_full_path",
        "title": "Common classes > Protection class > get_full_path",
        "section": "Protection class > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.ProtectedItem.has_markup",
        "title": "Common classes > Protection class > has_markup",
        "section": "Protection class > has_markup",
        "text": "has_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.ProtectedItem.set_owner",
        "title": "Common classes > Protection class > set_owner",
        "section": "Protection class > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.ProtectedItem.data",
        "title": "Common classes > Protection class > data",
        "section": "Protection class > data",
        "text": "property data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.ProtectedItem.is_protected",
        "title": "Common classes > Protection class > is_protected",
        "section": "Protection class > is_protected",
        "text": "property is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.ProtectedItem.markup",
        "title": "Common classes > Protection class > markup",
        "section": "Protection class > markup",
        "text": "property markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.ProtectedItem.model",
        "title": "Common classes > Protection class > model",
        "section": "Protection class > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.ProtectedItem.module",
        "title": "Common classes > Protection class > module",
        "section": "Protection class > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.ProtectedItem.owner",
        "title": "Common classes > Protection class > owner",
        "section": "Protection class > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup",
        "title": "Common classes > Protection class > Markup",
        "section": "Protection class > Markup",
        "text": "class ansys.scadeone.core.swan.Markup\n\nBases: object\n\nClass defining the markups used by the Swan serialization.\n\n!! processed by numpydoc !!\n\n\n\nstatic to_str(text: str, is_protected: bool = True, markup: str | None = None) -> str\n\nReturn text as the protected string {markup%text%markup} if required.\n\nParameters\n\ntext\n\npython:str\n\nText to protect\n\nis_protected\n\nbool, optional\n\nTrue when text shall be protected, by default True\n\nmarkup\n\npython:str, optional\n\nMarkup to use, by default None, resulting in using Markup.Syntax\n\nReturns\n\npython:str\n\nProtected string {markup%text%markup} if is_protected is True, else text.\n\n!! processed by numpydoc !!\n\n\n\nConst = 'const'\n\nIncorrect const declaration.\n\n!! processed by numpydoc !!\n\n\n\nDim = 'dim'\n\nIncorrect forward dimension.\n\n!! processed by numpydoc !!\n\n\n\nEmpty = 'empty'\n\nEmpty instance block body. This is an invalid construct, but it is needed for the editor.\n\n!! processed by numpydoc !!\n\n\n\nGroup = 'group'\n\nIncorrect group declaration.\n\n!! processed by numpydoc !!\n\n\n\nLuid = 'luid'\n\nProtected instance id.\n\n!! processed by numpydoc !!\n\n\n\nOpExpr = 'op_expr'\n\nOperator expression. Specific markup for the editor. The content is re-parsed by the API.\n\n!! processed by numpydoc !!\n\n\n\nSensor = 'sensor'\n\nIncorrect sensor declaration.\n\n!! processed by numpydoc !!\n\n\n\nSignature = 'signature'\n\nIncorrect operator signature in interface.\n\n!! processed by numpydoc !!\n\n\n\nSyntax = 'syntax'\n\nGeneral syntax error.\n\n!! processed by numpydoc !!\n\n\n\nSyntaxText = 'syntax_text'\n\nTextual operator with syntax error.\n\n!! processed by numpydoc !!\n\n\n\nText = 'text'\n\nTextual operator or generic operator content. The content is re-parsed by the API.\n\n!! processed by numpydoc !!\n\n\n\nType = 'type'\n\nIncorrect type declaration.\n\n!! processed by numpydoc !!\n\n\n\nUse = 'use'\n\nIncorrect use declaration.\n\n!! processed by numpydoc !!\n\n\n\nVar = 'var'\n\nIncorrect variable declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.to_str",
        "title": "Common classes > Protection class > to_str",
        "section": "Protection class > to_str",
        "text": "static to_str(text: str, is_protected: bool = True, markup: str | None = None) -> str\n\nReturn text as the protected string {markup%text%markup} if required.\n\nParameters\n\ntext\n\npython:str\n\nText to protect\n\nis_protected\n\nbool, optional\n\nTrue when text shall be protected, by default True\n\nmarkup\n\npython:str, optional\n\nMarkup to use, by default None, resulting in using Markup.Syntax\n\nReturns\n\npython:str\n\nProtected string {markup%text%markup} if is_protected is True, else text.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Const",
        "title": "Common classes > Protection class > Const",
        "section": "Protection class > Const",
        "text": "Const = 'const'\n\nIncorrect const declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Dim",
        "title": "Common classes > Protection class > Dim",
        "section": "Protection class > Dim",
        "text": "Dim = 'dim'\n\nIncorrect forward dimension.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Empty",
        "title": "Common classes > Protection class > Empty",
        "section": "Protection class > Empty",
        "text": "Empty = 'empty'\n\nEmpty instance block body. This is an invalid construct, but it is needed for the editor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Group",
        "title": "Common classes > Protection class > Group",
        "section": "Protection class > Group",
        "text": "Group = 'group'\n\nIncorrect group declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Luid",
        "title": "Common classes > Protection class > Luid",
        "section": "Protection class > Luid",
        "text": "Luid = 'luid'\n\nProtected instance id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.OpExpr",
        "title": "Common classes > Protection class > OpExpr",
        "section": "Protection class > OpExpr",
        "text": "OpExpr = 'op_expr'\n\nOperator expression. Specific markup for the editor. The content is re-parsed by the API.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Sensor",
        "title": "Common classes > Protection class > Sensor",
        "section": "Protection class > Sensor",
        "text": "Sensor = 'sensor'\n\nIncorrect sensor declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Signature",
        "title": "Common classes > Protection class > Signature",
        "section": "Protection class > Signature",
        "text": "Signature = 'signature'\n\nIncorrect operator signature in interface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Syntax",
        "title": "Common classes > Protection class > Syntax",
        "section": "Protection class > Syntax",
        "text": "Syntax = 'syntax'\n\nGeneral syntax error.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.SyntaxText",
        "title": "Common classes > Protection class > SyntaxText",
        "section": "Protection class > SyntaxText",
        "text": "SyntaxText = 'syntax_text'\n\nTextual operator with syntax error.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Text",
        "title": "Common classes > Protection class > Text",
        "section": "Protection class > Text",
        "text": "Text = 'text'\n\nTextual operator or generic operator content. The content is re-parsed by the API.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Type",
        "title": "Common classes > Protection class > Type",
        "section": "Protection class > Type",
        "text": "Type = 'type'\n\nIncorrect type declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Use",
        "title": "Common classes > Protection class > Use",
        "section": "Protection class > Use",
        "text": "Use = 'use'\n\nIncorrect use declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.Markup.Var",
        "title": "Common classes > Protection class > Var",
        "section": "Protection class > Var",
        "text": "Var = 'var'\n\nIncorrect variable declaration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#miscellaneous",
        "title": "Common classes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "The following class is a helper for Swan literal expressions.\nBases: object\nContainer of compiled regular expressions. These expressions can be matched with\nsome strings. Some regular expressions use groups to extract parts.\nAttributes:\nInteger part is in the value group, type in the type group,\nand size in the size group.\nMantissa is in the mantissa group, exponent in the exp group,\ntype in the type group, and size in the size group.\nCheck whether a string is a Swan boolean value.\nString to check.\nTrue if string is a Swan char value\nCheck whether a string is a Swan char value.\nString to check.\nTrue if string is a Swan char value.\nCheck whether a string is a Swan integer.\nInteger value, as decimal, bin, octal, or hexadecimal, with\nor without type information.\nTrue when string is an integer.\nCheck whether a string is a Swan integer.\nInteger value, as decimal, bin, octal, or hexadecimal, with\nor without type information.\nTrue when string is an integer.\nCheck whether a string is a Swan numeric value,\nthat is, an integer of float value.\nString to check.\nTrue if string is a Swan numeric value.\nMatch a string representing a float and return\na description of that float as a FloatTuple.\nString representing a float, with or without type information.\nTrue when the value is preceded with a ‘-’ minus operator.\nIf the string value matches SwanRE.TypedFloat pattern, a\nFloatTuple is returned. It is a namedtuple with fields:\nvalue: computed value\nmantissa: the mantissa part\nexp: the exponent part\nsize: the size part\nNote: if there is no type information, type is _f32.\nMatch a string representing an integer and returns\na description of that integer as an IntegerTuple.\nString representing an integer, with or without type information.\nTrue when the value is preceded with a ‘-’ minus operator.\nIf the string value matches SwanRE.TypedInteger pattern, an\nIntegerTuple is returned. It is a namedtuple with fields:\nvalue: computed value\nis_bin, is_oct, is_hex, is_dec: flags set according to found type\nis_signed: True when integer is signed\nsize: the size part\nNote: if there is no type information, type is _i32.\nMiscellaneous\nobject\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\nFloatTuple\npython:None\npython:str\nIntegerTuple\npython:None"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanRE",
        "title": "Common classes > Miscellaneous > SwanRE",
        "section": "Miscellaneous > SwanRE",
        "text": "class ansys.scadeone.core.swan.SwanRE\n\nBases: object\n\nContainer of compiled regular expressions. These expressions can be matched with\nsome strings. Some regular expressions use groups to extract parts.\n\nAttributes:\n\nTypedInteger: regular expressions for integers with post type (_i, _ui).\n\nInteger part is in the value group, type in the type group,\nand size in the size group.\n\nTypeFloat: regular expression for floats with post type (_f).\n\nMantissa is in the mantissa group, exponent in the exp group,\ntype in the type group, and size in the size group.\n\n!! processed by numpydoc !!\n\n\n\nclassmethod is_bool(string: str) -> bool\n\nCheck whether a string is a Swan boolean value.\n\nParameters\n\nstring\n\npython:str\n\nString to check.\n\nReturns\n\nbool\n\nTrue if string is a Swan char value\n\n!! processed by numpydoc !!\n\n\n\nclassmethod is_char(string: str) -> bool\n\nCheck whether a string is a Swan char value.\n\nParameters\n\nstring\n\npython:str\n\nString to check.\n\nReturns\n\nbool\n\nTrue if string is a Swan char value.\n\n!! processed by numpydoc !!\n\n\n\nclassmethod is_float(string: str) -> bool\n\nCheck whether a string is a Swan integer.\n\nParameters\n\nstring\n\npython:str\n\nInteger value, as decimal, bin, octal, or hexadecimal, with\nor without type information.\n\nReturns\n\nbool\n\nTrue when string is an integer.\n\n!! processed by numpydoc !!\n\n\n\nclassmethod is_integer(string: str) -> bool\n\nCheck whether a string is a Swan integer.\n\nParameters\n\nstring\n\npython:str\n\nInteger value, as decimal, bin, octal, or hexadecimal, with\nor without type information.\n\nReturns\n\nbool\n\nTrue when string is an integer.\n\n!! processed by numpydoc !!\n\n\n\nclassmethod is_numeric(string: str) -> bool\n\nCheck whether a string is a Swan numeric value,\nthat is, an integer of float value.\n\nParameters\n\nstring\n\npython:str\n\nString to check.\n\nReturns\n\nbool\n\nTrue if string is a Swan numeric value.\n\n!! processed by numpydoc !!\n\n\n\nclassmethod parse_float(string: str, minus: bool = False) -> FloatTuple | None\n\nMatch a string representing a float and return\na description of that float as a FloatTuple.\n\nParameters\n\nstring\n\npython:str\n\nString representing a float, with or without type information.\n\nminus\n\nbool\n\nTrue when the value is preceded with a ‘-’ minus operator.\n\nReturns\n\nFloatTuple or python:None\n\nIf the string value matches SwanRE.TypedFloat pattern, a\nFloatTuple is returned. It is a namedtuple with fields:\n\nvalue: computed value\n\nmantissa: the mantissa part\n\nexp: the exponent part\n\nsize: the size part\n\nNote: if there is no type information, type is _f32.\n\n!! processed by numpydoc !!\n\n\n\nclassmethod parse_integer(string: str, minus: bool = False) -> IntegerTuple | None\n\nMatch a string representing an integer and returns\na description of that integer as an IntegerTuple.\n\nParameters\n\nstring\n\npython:str\n\nString representing an integer, with or without type information.\n\nminus\n\nbool\n\nTrue when the value is preceded with a ‘-’ minus operator.\n\nReturns\n\nIntegerTuple or python:None\n\nIf the string value matches SwanRE.TypedInteger pattern, an\nIntegerTuple is returned. It is a namedtuple with fields:\n\nvalue: computed value\n\nis_bin, is_oct, is_hex, is_dec: flags set according to found type\n\nis_signed: True when integer is signed\n\nsize: the size part\n\nNote: if there is no type information, type is _i32.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanRE.is_bool",
        "title": "Common classes > Miscellaneous > is_bool",
        "section": "Miscellaneous > is_bool",
        "text": "classmethod is_bool(string: str) -> bool\n\nCheck whether a string is a Swan boolean value.\n\nParameters\n\nstring\n\npython:str\n\nString to check.\n\nReturns\n\nbool\n\nTrue if string is a Swan char value\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanRE.is_char",
        "title": "Common classes > Miscellaneous > is_char",
        "section": "Miscellaneous > is_char",
        "text": "classmethod is_char(string: str) -> bool\n\nCheck whether a string is a Swan char value.\n\nParameters\n\nstring\n\npython:str\n\nString to check.\n\nReturns\n\nbool\n\nTrue if string is a Swan char value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanRE.is_float",
        "title": "Common classes > Miscellaneous > is_float",
        "section": "Miscellaneous > is_float",
        "text": "classmethod is_float(string: str) -> bool\n\nCheck whether a string is a Swan integer.\n\nParameters\n\nstring\n\npython:str\n\nInteger value, as decimal, bin, octal, or hexadecimal, with\nor without type information.\n\nReturns\n\nbool\n\nTrue when string is an integer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanRE.is_integer",
        "title": "Common classes > Miscellaneous > is_integer",
        "section": "Miscellaneous > is_integer",
        "text": "classmethod is_integer(string: str) -> bool\n\nCheck whether a string is a Swan integer.\n\nParameters\n\nstring\n\npython:str\n\nInteger value, as decimal, bin, octal, or hexadecimal, with\nor without type information.\n\nReturns\n\nbool\n\nTrue when string is an integer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanRE.is_numeric",
        "title": "Common classes > Miscellaneous > is_numeric",
        "section": "Miscellaneous > is_numeric",
        "text": "classmethod is_numeric(string: str) -> bool\n\nCheck whether a string is a Swan numeric value,\nthat is, an integer of float value.\n\nParameters\n\nstring\n\npython:str\n\nString to check.\n\nReturns\n\nbool\n\nTrue if string is a Swan numeric value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanRE.parse_float",
        "title": "Common classes > Miscellaneous > parse_float",
        "section": "Miscellaneous > parse_float",
        "text": "classmethod parse_float(string: str, minus: bool = False) -> FloatTuple | None\n\nMatch a string representing a float and return\na description of that float as a FloatTuple.\n\nParameters\n\nstring\n\npython:str\n\nString representing a float, with or without type information.\n\nminus\n\nbool\n\nTrue when the value is preceded with a ‘-’ minus operator.\n\nReturns\n\nFloatTuple or python:None\n\nIf the string value matches SwanRE.TypedFloat pattern, a\nFloatTuple is returned. It is a namedtuple with fields:\n\nvalue: computed value\n\nmantissa: the mantissa part\n\nexp: the exponent part\n\nsize: the size part\n\nNote: if there is no type information, type is _f32.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/common",
        "href": "api/language/declarations/common.html#ansys.scadeone.core.swan.SwanRE.parse_integer",
        "title": "Common classes > Miscellaneous > parse_integer",
        "section": "Miscellaneous > parse_integer",
        "text": "classmethod parse_integer(string: str, minus: bool = False) -> IntegerTuple | None\n\nMatch a string representing an integer and returns\na description of that integer as an IntegerTuple.\n\nParameters\n\nstring\n\npython:str\n\nString representing an integer, with or without type information.\n\nminus\n\nbool\n\nTrue when the value is preceded with a ‘-’ minus operator.\n\nReturns\n\nIntegerTuple or python:None\n\nIf the string value matches SwanRE.TypedInteger pattern, an\nIntegerTuple is returned. It is a namedtuple with fields:\n\nvalue: computed value\n\nis_bin, is_oct, is_hex, is_dec: flags set according to found type\n\nis_signed: True when integer is signed\n\nsize: the size part\n\nNote: if there is no type information, type is _i32.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#group",
        "title": "Group",
        "section": "Group",
        "text": "Groups can be declared using the group declaration.\nGroups are used either as a list of group items or as adaptation of an expression\nmay for groups.\nGroup"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#group-construction",
        "title": "Group > Group construction",
        "section": "Group construction",
        "text": "Group constructor is : ( group ). A group is itself a list of group items.\nBases: Expression\nA group expression:\ngroup_expr ::= (*group).\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nGroup item as a list of GroupItem.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nGroup items.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nItem of a group expression: group_item ::= [[ label : ]] expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nExpression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nGroup item label.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nGroup construction\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupConstructor",
        "title": "Group > Group construction > GroupConstructor",
        "section": "Group construction > GroupConstructor",
        "text": "class ansys.scadeone.core.swan.GroupConstructor(group: Group)\n\nBases: Expression\n\nA group expression:\ngroup_expr ::= (*group).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupConstructor.get_full_path",
        "title": "Group > Group construction > get_full_path",
        "section": "Group construction > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupConstructor.set_owner",
        "title": "Group > Group construction > set_owner",
        "section": "Group construction > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupConstructor.is_protected",
        "title": "Group > Group construction > is_protected",
        "section": "Group construction > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupConstructor.model",
        "title": "Group > Group construction > model",
        "section": "Group construction > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupConstructor.module",
        "title": "Group > Group construction > module",
        "section": "Group construction > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupConstructor.owner",
        "title": "Group > Group construction > owner",
        "section": "Group construction > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.Group",
        "title": "Group > Group construction > Group",
        "section": "Group construction > Group",
        "text": "class ansys.scadeone.core.swan.Group(items: List[GroupItem])\n\nBases: SwanItem\n\nGroup item as a list of GroupItem.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty items: List[GroupItem]\n\nGroup items.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.Group.get_full_path",
        "title": "Group > Group construction > get_full_path",
        "section": "Group construction > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.Group.set_owner",
        "title": "Group > Group construction > set_owner",
        "section": "Group construction > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.Group.is_protected",
        "title": "Group > Group construction > is_protected",
        "section": "Group construction > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.Group.items",
        "title": "Group > Group construction > items",
        "section": "Group construction > items",
        "text": "property items: List[GroupItem]\n\nGroup items.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.Group.model",
        "title": "Group > Group construction > model",
        "section": "Group construction > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.Group.module",
        "title": "Group > Group construction > module",
        "section": "Group construction > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.Group.owner",
        "title": "Group > Group construction > owner",
        "section": "Group construction > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupItem",
        "title": "Group > Group construction > GroupItem",
        "section": "Group construction > GroupItem",
        "text": "class ansys.scadeone.core.swan.GroupItem(expr: Expression, label: Identifier | None = None)\n\nBases: SwanItem\n\nItem of a group expression: group_item ::= [[ label : ]] expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty label: Identifier | None\n\nGroup item label.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupItem.get_full_path",
        "title": "Group > Group construction > get_full_path",
        "section": "Group construction > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupItem.set_owner",
        "title": "Group > Group construction > set_owner",
        "section": "Group construction > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupItem.expr",
        "title": "Group > Group construction > expr",
        "section": "Group construction > expr",
        "text": "property expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupItem.is_protected",
        "title": "Group > Group construction > is_protected",
        "section": "Group construction > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupItem.label",
        "title": "Group > Group construction > label",
        "section": "Group construction > label",
        "text": "property label: Identifier | None\n\nGroup item label.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupItem.model",
        "title": "Group > Group construction > model",
        "section": "Group construction > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupItem.module",
        "title": "Group > Group construction > module",
        "section": "Group construction > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupItem.owner",
        "title": "Group > Group construction > owner",
        "section": "Group construction > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#group-projection-and-renaming",
        "title": "Group > Group projection and renaming",
        "section": "Group projection and renaming",
        "text": "A group projection accesses to fields in a group and returns a group\nof the matching fields, using renaming.\nThe syntax is: expr .( group_renaming ) where .( group_renaming )\nis a group adaptation, also used for Connection in diagrams.\nBases: Expression\nGroup projection: group_expr ::= expr group_adaptation.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nExpression group adaptation.\nAdapted expression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nGroup adaptation: group_adaptation ::= . ( group_renamings ).\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nRenaming list of group adaptation.\nBases: SwanItem\nGroup renaming: (( Id | Integer)) [: [Id]].\nRenaming source index as Id or Integer, either a name or a position. For example: a or 2.\nOptional renaming target index:\nNo index\nRenaming as : Id, for example: a : b, 2 : b\nShortcut, example a : means a : a\nSource index.\nRenaming as an Identifier.\nRenaming is a shortcut of the form ID.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue when access by name.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when renaming is a shortcut.\nTrue when renaming is a shortcut with no renaming, or a renaming with no shortcut.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nRenaming in new group. None if no renaming.\nSource selection in group.\nBases: GroupRenaming, ProtectedItem\nSpecific class when a renaming is protected for syntax error.\nSource is an adaptation such as: .( {syntax%renaming%syntax} ).\nFull path of Swan construct.\nCheck if protected data has the specified markup.\nString markup.\nTrue when instance markup is same as parameter.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nProtected data between markups.\nProtected data.\nTrue when access by name.\nTell if item is syntactically protected and provided as a string.\nTrue when renaming is a shortcut.\nTrue when renaming is a shortcut with no renaming, or a renaming with no shortcut.\nProtection markup.\nMarkup string.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nRenaming in new group. None if no renaming.\nSource selection in group.\nGroup projection and renaming\nConnection\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nGroupRenaming\nProtectedItem\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\npython:str\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupProjection",
        "title": "Group > Group projection and renaming > GroupProjection",
        "section": "Group projection and renaming > GroupProjection",
        "text": "class ansys.scadeone.core.swan.GroupProjection(expr: Expression, adaptation: GroupAdaptation)\n\nBases: Expression\n\nGroup projection: group_expr ::= expr group_adaptation.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty adaptation: GroupAdaptation\n\nExpression group adaptation.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nAdapted expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupProjection.get_full_path",
        "title": "Group > Group projection and renaming > get_full_path",
        "section": "Group projection and renaming > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupProjection.set_owner",
        "title": "Group > Group projection and renaming > set_owner",
        "section": "Group projection and renaming > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupProjection.adaptation",
        "title": "Group > Group projection and renaming > adaptation",
        "section": "Group projection and renaming > adaptation",
        "text": "property adaptation: GroupAdaptation\n\nExpression group adaptation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupProjection.expr",
        "title": "Group > Group projection and renaming > expr",
        "section": "Group projection and renaming > expr",
        "text": "property expr: Expression\n\nAdapted expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupProjection.is_protected",
        "title": "Group > Group projection and renaming > is_protected",
        "section": "Group projection and renaming > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupProjection.model",
        "title": "Group > Group projection and renaming > model",
        "section": "Group projection and renaming > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupProjection.module",
        "title": "Group > Group projection and renaming > module",
        "section": "Group projection and renaming > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupProjection.owner",
        "title": "Group > Group projection and renaming > owner",
        "section": "Group projection and renaming > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupAdaptation",
        "title": "Group > Group projection and renaming > GroupAdaptation",
        "section": "Group projection and renaming > GroupAdaptation",
        "text": "class ansys.scadeone.core.swan.GroupAdaptation(renamings: List[GroupRenaming])\n\nBases: SwanItem\n\nGroup adaptation: group_adaptation ::= . ( group_renamings ).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty renamings: List[GroupRenaming]\n\nRenaming list of group adaptation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupAdaptation.get_full_path",
        "title": "Group > Group projection and renaming > get_full_path",
        "section": "Group projection and renaming > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupAdaptation.set_owner",
        "title": "Group > Group projection and renaming > set_owner",
        "section": "Group projection and renaming > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupAdaptation.is_protected",
        "title": "Group > Group projection and renaming > is_protected",
        "section": "Group projection and renaming > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupAdaptation.model",
        "title": "Group > Group projection and renaming > model",
        "section": "Group projection and renaming > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupAdaptation.module",
        "title": "Group > Group projection and renaming > module",
        "section": "Group projection and renaming > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupAdaptation.owner",
        "title": "Group > Group projection and renaming > owner",
        "section": "Group projection and renaming > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupAdaptation.renamings",
        "title": "Group > Group projection and renaming > renamings",
        "section": "Group projection and renaming > renamings",
        "text": "property renamings: List[GroupRenaming]\n\nRenaming list of group adaptation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming",
        "title": "Group > Group projection and renaming > GroupRenaming",
        "section": "Group projection and renaming > GroupRenaming",
        "text": "class ansys.scadeone.core.swan.GroupRenaming(source: Identifier | Literal, renaming: Identifier | None = None, is_shortcut: bool | None = False)\n\nBases: SwanItem\n\nGroup renaming: (( Id | Integer)) [: [Id]].\n\nRenaming source index as Id or Integer, either a name or a position. For example: a or 2.\n\nOptional renaming target index:\n\nNo index\n\nRenaming as : Id, for example: a : b, 2 : b\n\nShortcut, example a : means a : a\n\nParameters\n\nsource: common.Identifier | LiteralExpr\n\nSource index.\n\nrenaming: common.Identifier  (optional)\n\nRenaming as an Identifier.\n\nis_shortcut: bool (optional)\n\nRenaming is a shortcut of the form ID.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_by_name: bool\n\nTrue when access by name.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_shortcut: bool\n\nTrue when renaming is a shortcut.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_valid: bool\n\nTrue when renaming is a shortcut with no renaming, or a renaming with no shortcut.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty renaming: Identifier | None\n\nRenaming in new group. None if no renaming.\n\n!! processed by numpydoc !!\n\n\n\nproperty source: Identifier | Literal\n\nSource selection in group.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.get_full_path",
        "title": "Group > Group projection and renaming > get_full_path",
        "section": "Group projection and renaming > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.set_owner",
        "title": "Group > Group projection and renaming > set_owner",
        "section": "Group projection and renaming > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.is_by_name",
        "title": "Group > Group projection and renaming > is_by_name",
        "section": "Group projection and renaming > is_by_name",
        "text": "property is_by_name: bool\n\nTrue when access by name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.is_protected",
        "title": "Group > Group projection and renaming > is_protected",
        "section": "Group projection and renaming > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.is_shortcut",
        "title": "Group > Group projection and renaming > is_shortcut",
        "section": "Group projection and renaming > is_shortcut",
        "text": "property is_shortcut: bool\n\nTrue when renaming is a shortcut.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.is_valid",
        "title": "Group > Group projection and renaming > is_valid",
        "section": "Group projection and renaming > is_valid",
        "text": "property is_valid: bool\n\nTrue when renaming is a shortcut with no renaming, or a renaming with no shortcut.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.model",
        "title": "Group > Group projection and renaming > model",
        "section": "Group projection and renaming > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.module",
        "title": "Group > Group projection and renaming > module",
        "section": "Group projection and renaming > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.owner",
        "title": "Group > Group projection and renaming > owner",
        "section": "Group projection and renaming > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.renaming",
        "title": "Group > Group projection and renaming > renaming",
        "section": "Group projection and renaming > renaming",
        "text": "property renaming: Identifier | None\n\nRenaming in new group. None if no renaming.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.GroupRenaming.source",
        "title": "Group > Group projection and renaming > source",
        "section": "Group projection and renaming > source",
        "text": "property source: Identifier | Literal\n\nSource selection in group.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming",
        "title": "Group > Group projection and renaming > ProtectedGroupRenaming",
        "section": "Group projection and renaming > ProtectedGroupRenaming",
        "text": "class ansys.scadeone.core.swan.ProtectedGroupRenaming(data: str, markup: str | None = 'syntax')\n\nBases: GroupRenaming, ProtectedItem\n\nSpecific class when a renaming is protected for syntax error.\n\nSource is an adaptation such as: .( {syntax%renaming%syntax} ).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nhas_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_by_name: bool\n\nTrue when access by name.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_shortcut: bool\n\nTrue when renaming is a shortcut.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_valid: bool\n\nTrue when renaming is a shortcut with no renaming, or a renaming with no shortcut.\n\n!! processed by numpydoc !!\n\n\n\nproperty markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty renaming: Identifier | None\n\nRenaming in new group. None if no renaming.\n\n!! processed by numpydoc !!\n\n\n\nproperty source: None\n\nSource selection in group.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.get_full_path",
        "title": "Group > Group projection and renaming > get_full_path",
        "section": "Group projection and renaming > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.has_markup",
        "title": "Group > Group projection and renaming > has_markup",
        "section": "Group projection and renaming > has_markup",
        "text": "has_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.set_owner",
        "title": "Group > Group projection and renaming > set_owner",
        "section": "Group projection and renaming > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.data",
        "title": "Group > Group projection and renaming > data",
        "section": "Group projection and renaming > data",
        "text": "property data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.is_by_name",
        "title": "Group > Group projection and renaming > is_by_name",
        "section": "Group projection and renaming > is_by_name",
        "text": "property is_by_name: bool\n\nTrue when access by name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.is_protected",
        "title": "Group > Group projection and renaming > is_protected",
        "section": "Group projection and renaming > is_protected",
        "text": "property is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.is_shortcut",
        "title": "Group > Group projection and renaming > is_shortcut",
        "section": "Group projection and renaming > is_shortcut",
        "text": "property is_shortcut: bool\n\nTrue when renaming is a shortcut.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.is_valid",
        "title": "Group > Group projection and renaming > is_valid",
        "section": "Group projection and renaming > is_valid",
        "text": "property is_valid: bool\n\nTrue when renaming is a shortcut with no renaming, or a renaming with no shortcut.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.markup",
        "title": "Group > Group projection and renaming > markup",
        "section": "Group projection and renaming > markup",
        "text": "property markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.model",
        "title": "Group > Group projection and renaming > model",
        "section": "Group projection and renaming > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.module",
        "title": "Group > Group projection and renaming > module",
        "section": "Group projection and renaming > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.owner",
        "title": "Group > Group projection and renaming > owner",
        "section": "Group projection and renaming > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.renaming",
        "title": "Group > Group projection and renaming > renaming",
        "section": "Group projection and renaming > renaming",
        "text": "property renaming: Identifier | None\n\nRenaming in new group. None if no renaming.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/group",
        "href": "api/language/group.html#ansys.scadeone.core.swan.ProtectedGroupRenaming.source",
        "title": "Group > Group projection and renaming > source",
        "section": "Group projection and renaming > source",
        "text": "property source: None\n\nSource selection in group.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#type-declarations",
        "title": "Type declarations",
        "section": "Type declarations",
        "text": "A type declaration is a type name and its optional definition.\nType definitions are type expressions, enumerations, variants, and structures.\nBases: Declaration\nType declaration with its name and optional definition:\ntype_decl ::= id [[ = type_def ]].\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nLanguage item identifier.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nType declarations\nDeclaration\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDecl",
        "title": "Type declarations > Type declarations > TypeDecl",
        "section": "Type declarations > TypeDecl",
        "text": "class ansys.scadeone.core.swan.TypeDecl(id: Identifier, definition: TypeDefinition | None = None)\n\nBases: Declaration\n\nType declaration with its name and optional definition:\ntype_decl ::= id [[ = type_def ]].\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDecl.get_full_path",
        "title": "Type declarations > Type declarations > get_full_path",
        "section": "Type declarations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDecl.set_owner",
        "title": "Type declarations > Type declarations > set_owner",
        "section": "Type declarations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDecl.id",
        "title": "Type declarations > Type declarations > id",
        "section": "Type declarations > id",
        "text": "property id: Identifier\n\nLanguage item identifier.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDecl.is_protected",
        "title": "Type declarations > Type declarations > is_protected",
        "section": "Type declarations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDecl.model",
        "title": "Type declarations > Type declarations > model",
        "section": "Type declarations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDecl.module",
        "title": "Type declarations > Type declarations > module",
        "section": "Type declarations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDecl.owner",
        "title": "Type declarations > Type declarations > owner",
        "section": "Type declarations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#type-definitions",
        "title": "Type declarations > Type definitions",
        "section": "Type definitions",
        "text": "The class hierarchy of type definition is shown in the next figure:\nBases: SwanItem\nBase class for type definition classes.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: TypeDefinition\nType definition as a type expression: type_def ::= type_expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nType definitions\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nTypeDefinition\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDefinition",
        "title": "Type declarations > Type definitions > TypeDefinition",
        "section": "Type definitions > TypeDefinition",
        "text": "class ansys.scadeone.core.swan.TypeDefinition\n\nBases: SwanItem\n\nBase class for type definition classes.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDefinition.get_full_path",
        "title": "Type declarations > Type definitions > get_full_path",
        "section": "Type definitions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDefinition.set_owner",
        "title": "Type declarations > Type definitions > set_owner",
        "section": "Type definitions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDefinition.is_protected",
        "title": "Type declarations > Type definitions > is_protected",
        "section": "Type definitions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDefinition.model",
        "title": "Type declarations > Type definitions > model",
        "section": "Type definitions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDefinition.module",
        "title": "Type declarations > Type definitions > module",
        "section": "Type definitions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeDefinition.owner",
        "title": "Type declarations > Type definitions > owner",
        "section": "Type definitions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ExprTypeDefinition",
        "title": "Type declarations > Type definitions > ExprTypeDefinition",
        "section": "Type definitions > ExprTypeDefinition",
        "text": "class ansys.scadeone.core.swan.ExprTypeDefinition(type: TypeExpression)\n\nBases: TypeDefinition\n\nType definition as a type expression: type_def ::= type_expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ExprTypeDefinition.get_full_path",
        "title": "Type declarations > Type definitions > get_full_path",
        "section": "Type definitions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ExprTypeDefinition.set_owner",
        "title": "Type declarations > Type definitions > set_owner",
        "section": "Type definitions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ExprTypeDefinition.is_protected",
        "title": "Type declarations > Type definitions > is_protected",
        "section": "Type definitions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ExprTypeDefinition.model",
        "title": "Type declarations > Type definitions > model",
        "section": "Type definitions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ExprTypeDefinition.module",
        "title": "Type declarations > Type definitions > module",
        "section": "Type definitions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ExprTypeDefinition.owner",
        "title": "Type declarations > Type definitions > owner",
        "section": "Type definitions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#enumeration",
        "title": "Type declarations > Enumeration",
        "section": "Enumeration",
        "text": "Bases: TypeDefinition\nType definition as an enumeration: type_def ::= enum { id {{ , id }} }.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nEnumeration\nTypeDefinition\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.EnumTypeDefinition",
        "title": "Type declarations > Enumeration > EnumTypeDefinition",
        "section": "Enumeration > EnumTypeDefinition",
        "text": "class ansys.scadeone.core.swan.EnumTypeDefinition(tags: List[Identifier])\n\nBases: TypeDefinition\n\nType definition as an enumeration: type_def ::= enum { id {{ , id }} }.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.EnumTypeDefinition.get_full_path",
        "title": "Type declarations > Enumeration > get_full_path",
        "section": "Enumeration > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.EnumTypeDefinition.set_owner",
        "title": "Type declarations > Enumeration > set_owner",
        "section": "Enumeration > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.EnumTypeDefinition.is_protected",
        "title": "Type declarations > Enumeration > is_protected",
        "section": "Enumeration > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.EnumTypeDefinition.model",
        "title": "Type declarations > Enumeration > model",
        "section": "Enumeration > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.EnumTypeDefinition.module",
        "title": "Type declarations > Enumeration > module",
        "section": "Enumeration > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.EnumTypeDefinition.owner",
        "title": "Type declarations > Enumeration > owner",
        "section": "Enumeration > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#variant",
        "title": "Type declarations > Variant",
        "section": "Variant",
        "text": "A variant is represented by a VariantTypeDefinition instance which contains\na list of VariantComponent instances representing the variant cases:\na simple tag\na tag with a type expression\na complex tag with a list of fields\nBases: TypeDefinition\nType definition as a variant: type_def ::= variant {{ | variant }}.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nVariant component: variant ::= id variant_type_expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nVariant tag.\nBases: VariantComponent\nSimple Variant\nvariant ::= ID {}\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nVariant tag.\nBases: VariantComponent\nVariant type expression:\nvariant ::= ID { type_expr }\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nVariant tag.\nVariant type expression.\nBases: VariantComponent\nVariant structure expression:\nvariant ::= ID struct_texpr\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nVariant structure fields.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nVariant tag.\nVariant\nVariantTypeDefinition\nVariantComponent\nTypeDefinition\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nVariantComponent\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nVariantComponent\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nVariantComponent\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeDefinition",
        "title": "Type declarations > Variant > VariantTypeDefinition",
        "section": "Variant > VariantTypeDefinition",
        "text": "class ansys.scadeone.core.swan.VariantTypeDefinition(tags: List[VariantComponent])\n\nBases: TypeDefinition\n\nType definition as a variant: type_def ::= variant {{ | variant }}.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeDefinition.get_full_path",
        "title": "Type declarations > Variant > get_full_path",
        "section": "Variant > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeDefinition.set_owner",
        "title": "Type declarations > Variant > set_owner",
        "section": "Variant > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeDefinition.is_protected",
        "title": "Type declarations > Variant > is_protected",
        "section": "Variant > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeDefinition.model",
        "title": "Type declarations > Variant > model",
        "section": "Variant > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeDefinition.module",
        "title": "Type declarations > Variant > module",
        "section": "Variant > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeDefinition.owner",
        "title": "Type declarations > Variant > owner",
        "section": "Variant > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantComponent",
        "title": "Type declarations > Variant > VariantComponent",
        "section": "Variant > VariantComponent",
        "text": "class ansys.scadeone.core.swan.VariantComponent(tag: Identifier)\n\nBases: SwanItem\n\nVariant component: variant ::= id variant_type_expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty tag\n\nVariant tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantComponent.get_full_path",
        "title": "Type declarations > Variant > get_full_path",
        "section": "Variant > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantComponent.set_owner",
        "title": "Type declarations > Variant > set_owner",
        "section": "Variant > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantComponent.is_protected",
        "title": "Type declarations > Variant > is_protected",
        "section": "Variant > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantComponent.model",
        "title": "Type declarations > Variant > model",
        "section": "Variant > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantComponent.module",
        "title": "Type declarations > Variant > module",
        "section": "Variant > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantComponent.owner",
        "title": "Type declarations > Variant > owner",
        "section": "Variant > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantComponent.tag",
        "title": "Type declarations > Variant > tag",
        "section": "Variant > tag",
        "text": "property tag\n\nVariant tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantSimple",
        "title": "Type declarations > Variant > VariantSimple",
        "section": "Variant > VariantSimple",
        "text": "class ansys.scadeone.core.swan.VariantSimple(tag: Identifier)\n\nBases: VariantComponent\n\nSimple Variant\n\nvariant ::= ID {}\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty tag\n\nVariant tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantSimple.get_full_path",
        "title": "Type declarations > Variant > get_full_path",
        "section": "Variant > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantSimple.set_owner",
        "title": "Type declarations > Variant > set_owner",
        "section": "Variant > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantSimple.is_protected",
        "title": "Type declarations > Variant > is_protected",
        "section": "Variant > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantSimple.model",
        "title": "Type declarations > Variant > model",
        "section": "Variant > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantSimple.module",
        "title": "Type declarations > Variant > module",
        "section": "Variant > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantSimple.owner",
        "title": "Type declarations > Variant > owner",
        "section": "Variant > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantSimple.tag",
        "title": "Type declarations > Variant > tag",
        "section": "Variant > tag",
        "text": "property tag\n\nVariant tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeExpr",
        "title": "Type declarations > Variant > VariantTypeExpr",
        "section": "Variant > VariantTypeExpr",
        "text": "class ansys.scadeone.core.swan.VariantTypeExpr(tag: Identifier, type: TypeExpression)\n\nBases: VariantComponent\n\nVariant type expression:\n\nvariant ::= ID { type_expr }\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty tag\n\nVariant tag.\n\n!! processed by numpydoc !!\n\n\n\nproperty type: TypeExpression\n\nVariant type expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeExpr.get_full_path",
        "title": "Type declarations > Variant > get_full_path",
        "section": "Variant > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeExpr.set_owner",
        "title": "Type declarations > Variant > set_owner",
        "section": "Variant > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeExpr.is_protected",
        "title": "Type declarations > Variant > is_protected",
        "section": "Variant > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeExpr.model",
        "title": "Type declarations > Variant > model",
        "section": "Variant > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeExpr.module",
        "title": "Type declarations > Variant > module",
        "section": "Variant > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeExpr.owner",
        "title": "Type declarations > Variant > owner",
        "section": "Variant > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeExpr.tag",
        "title": "Type declarations > Variant > tag",
        "section": "Variant > tag",
        "text": "property tag\n\nVariant tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantTypeExpr.type",
        "title": "Type declarations > Variant > type",
        "section": "Variant > type",
        "text": "property type: TypeExpression\n\nVariant type expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantStruct",
        "title": "Type declarations > Variant > VariantStruct",
        "section": "Variant > VariantStruct",
        "text": "class ansys.scadeone.core.swan.VariantStruct(tag: Identifier, fields: list[StructField])\n\nBases: VariantComponent\n\nVariant structure expression:\n\nvariant ::= ID struct_texpr\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty fields: list[StructField]\n\nVariant structure fields.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty tag\n\nVariant tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantStruct.get_full_path",
        "title": "Type declarations > Variant > get_full_path",
        "section": "Variant > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantStruct.set_owner",
        "title": "Type declarations > Variant > set_owner",
        "section": "Variant > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantStruct.fields",
        "title": "Type declarations > Variant > fields",
        "section": "Variant > fields",
        "text": "property fields: list[StructField]\n\nVariant structure fields.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantStruct.is_protected",
        "title": "Type declarations > Variant > is_protected",
        "section": "Variant > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantStruct.model",
        "title": "Type declarations > Variant > model",
        "section": "Variant > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantStruct.module",
        "title": "Type declarations > Variant > module",
        "section": "Variant > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantStruct.owner",
        "title": "Type declarations > Variant > owner",
        "section": "Variant > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariantStruct.tag",
        "title": "Type declarations > Variant > tag",
        "section": "Variant > tag",
        "text": "property tag\n\nVariant tag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#structures",
        "title": "Type declarations > Structures",
        "section": "Structures",
        "text": "Bases: TypeDefinition\nType definition as a structure: type_expr ::= { field_decl {{, field_decl}}}.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nList of fields.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nStructure field as: ID : type_expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nField name.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nField type.\nStructures\nTypeDefinition\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructTypeDefinition",
        "title": "Type declarations > Structures > StructTypeDefinition",
        "section": "Structures > StructTypeDefinition",
        "text": "class ansys.scadeone.core.swan.StructTypeDefinition(fields: List[StructField])\n\nBases: TypeDefinition\n\nType definition as a structure: type_expr ::= { field_decl {{, field_decl}}}.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty fields: List[StructField]\n\nList of fields.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructTypeDefinition.get_full_path",
        "title": "Type declarations > Structures > get_full_path",
        "section": "Structures > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructTypeDefinition.set_owner",
        "title": "Type declarations > Structures > set_owner",
        "section": "Structures > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructTypeDefinition.fields",
        "title": "Type declarations > Structures > fields",
        "section": "Structures > fields",
        "text": "property fields: List[StructField]\n\nList of fields.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructTypeDefinition.is_protected",
        "title": "Type declarations > Structures > is_protected",
        "section": "Structures > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructTypeDefinition.model",
        "title": "Type declarations > Structures > model",
        "section": "Structures > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructTypeDefinition.module",
        "title": "Type declarations > Structures > module",
        "section": "Structures > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructTypeDefinition.owner",
        "title": "Type declarations > Structures > owner",
        "section": "Structures > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructField",
        "title": "Type declarations > Structures > StructField",
        "section": "Structures > StructField",
        "text": "class ansys.scadeone.core.swan.StructField(id: Identifier, type: TypeExpression)\n\nBases: SwanItem\n\nStructure field as: ID : type_expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier\n\nField name.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty type: TypeExpression\n\nField type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructField.get_full_path",
        "title": "Type declarations > Structures > get_full_path",
        "section": "Structures > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructField.set_owner",
        "title": "Type declarations > Structures > set_owner",
        "section": "Structures > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructField.id",
        "title": "Type declarations > Structures > id",
        "section": "Structures > id",
        "text": "property id: Identifier\n\nField name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructField.is_protected",
        "title": "Type declarations > Structures > is_protected",
        "section": "Structures > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructField.model",
        "title": "Type declarations > Structures > model",
        "section": "Structures > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructField.module",
        "title": "Type declarations > Structures > module",
        "section": "Structures > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructField.owner",
        "title": "Type declarations > Structures > owner",
        "section": "Structures > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.StructField.type",
        "title": "Type declarations > Structures > type",
        "section": "Structures > type",
        "text": "property type: TypeExpression\n\nField type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#type-expressions",
        "title": "Type declarations > Type expressions",
        "section": "Type expressions",
        "text": "A type defined by a type expression has its definition stored as\na ExprTypeDefinition instance which contains the type expression\nas a TypeExpression instance. The TypeExpression is the\nbase class for the type expressions given by the following figure:\nBases: SwanItem\nBase class for type expressions.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue if type expression is a predefined type.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nType expressions\nExprTypeDefinition\nTypeExpression\nTypeExpression\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeExpression",
        "title": "Type declarations > Type expressions > TypeExpression",
        "section": "Type expressions > TypeExpression",
        "text": "class ansys.scadeone.core.swan.TypeExpression\n\nBases: SwanItem\n\nBase class for type expressions.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeExpression.get_full_path",
        "title": "Type declarations > Type expressions > get_full_path",
        "section": "Type expressions > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeExpression.set_owner",
        "title": "Type declarations > Type expressions > set_owner",
        "section": "Type expressions > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeExpression.is_defined",
        "title": "Type declarations > Type expressions > is_defined",
        "section": "Type expressions > is_defined",
        "text": "property is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeExpression.is_protected",
        "title": "Type declarations > Type expressions > is_protected",
        "section": "Type expressions > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeExpression.model",
        "title": "Type declarations > Type expressions > model",
        "section": "Type expressions > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeExpression.module",
        "title": "Type declarations > Type expressions > module",
        "section": "Type expressions > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeExpression.owner",
        "title": "Type declarations > Type expressions > owner",
        "section": "Type expressions > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#predefined-types",
        "title": "Type declarations > Predefined types",
        "section": "Predefined types",
        "text": "PredefinedType class is the base class for the classes:\nInt8Type, Int16Type, Int32Type, Int64Type\nUint8Type, Uint16Type, Uint32Type, Uint64Type\nFloat32Type, Float64Type\nBoolType, CharType\nBases: TypeExpression\nPredefined types.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue if type expression is a predefined type.\nTrue if type is predefined\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nName of a predefined type from its class.\nOwner of current Swan construct.\nPredefined types\nPredefinedType\nTypeExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.PredefinedType",
        "title": "Type declarations > Predefined types > PredefinedType",
        "section": "Predefined types > PredefinedType",
        "text": "class ansys.scadeone.core.swan.PredefinedType\n\nBases: TypeExpression\n\nPredefined types.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_predefined: bool\n\nTrue if type is predefined\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty name: str\n\nName of a predefined type from its class.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.PredefinedType.get_full_path",
        "title": "Type declarations > Predefined types > get_full_path",
        "section": "Predefined types > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.PredefinedType.set_owner",
        "title": "Type declarations > Predefined types > set_owner",
        "section": "Predefined types > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.PredefinedType.is_defined",
        "title": "Type declarations > Predefined types > is_defined",
        "section": "Predefined types > is_defined",
        "text": "property is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.PredefinedType.is_predefined",
        "title": "Type declarations > Predefined types > is_predefined",
        "section": "Predefined types > is_predefined",
        "text": "property is_predefined: bool\n\nTrue if type is predefined\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.PredefinedType.is_protected",
        "title": "Type declarations > Predefined types > is_protected",
        "section": "Predefined types > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.PredefinedType.model",
        "title": "Type declarations > Predefined types > model",
        "section": "Predefined types > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.PredefinedType.module",
        "title": "Type declarations > Predefined types > module",
        "section": "Predefined types > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.PredefinedType.name",
        "title": "Type declarations > Predefined types > name",
        "section": "Predefined types > name",
        "text": "property name: str\n\nName of a predefined type from its class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.PredefinedType.owner",
        "title": "Type declarations > Predefined types > owner",
        "section": "Predefined types > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#sized-types",
        "title": "Type declarations > Sized types",
        "section": "Sized types",
        "text": "Definition of types like T = signed<<42>> or T = unsigned<<42>>.\nBases: TypeExpression\nType with a size expression:\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue if type expression is a predefined type.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nSized types\nT = signed<<42>>\nT = unsigned<<42>>\nTypeExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.SizedTypeExpression",
        "title": "Type declarations > Sized types > SizedTypeExpression",
        "section": "Sized types > SizedTypeExpression",
        "text": "class ansys.scadeone.core.swan.SizedTypeExpression(size: Expression, is_signed: bool)\n\nBases: TypeExpression\n\nType with a size expression:\n\ntype_expr ::= signed << expr >>\n\n| unsigned << expr >>\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.SizedTypeExpression.get_full_path",
        "title": "Type declarations > Sized types > get_full_path",
        "section": "Sized types > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.SizedTypeExpression.set_owner",
        "title": "Type declarations > Sized types > set_owner",
        "section": "Sized types > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.SizedTypeExpression.is_defined",
        "title": "Type declarations > Sized types > is_defined",
        "section": "Sized types > is_defined",
        "text": "property is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.SizedTypeExpression.is_protected",
        "title": "Type declarations > Sized types > is_protected",
        "section": "Sized types > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.SizedTypeExpression.model",
        "title": "Type declarations > Sized types > model",
        "section": "Sized types > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.SizedTypeExpression.module",
        "title": "Type declarations > Sized types > module",
        "section": "Sized types > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.SizedTypeExpression.owner",
        "title": "Type declarations > Sized types > owner",
        "section": "Sized types > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#reference-to-other-types-and-generic-types",
        "title": "Type declarations > Reference to other types and generic types",
        "section": "Reference to other types and generic types",
        "text": "Bases: TypeExpression\nType reference to another type: type_expr ::= path_id.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturns aliased type name.\nTrue if type expression is a predefined type.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: TypeExpression\nType variable expression:\ntype_expr ::= ‘Id\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue if type expression is a predefined type.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nName of variable.\nOwner of current Swan construct.\nReference to other types and generic types\nTypeExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nTypeExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeReferenceExpression",
        "title": "Type declarations > Reference to other types and generic types > TypeReferenceExpression",
        "section": "Reference to other types and generic types > TypeReferenceExpression",
        "text": "class ansys.scadeone.core.swan.TypeReferenceExpression(alias: PathIdentifier)\n\nBases: TypeExpression\n\nType reference to another type: type_expr ::= path_id.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty alias: PathIdentifier\n\nReturns aliased type name.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeReferenceExpression.get_full_path",
        "title": "Type declarations > Reference to other types and generic types > get_full_path",
        "section": "Reference to other types and generic types > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeReferenceExpression.set_owner",
        "title": "Type declarations > Reference to other types and generic types > set_owner",
        "section": "Reference to other types and generic types > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeReferenceExpression.alias",
        "title": "Type declarations > Reference to other types and generic types > alias",
        "section": "Reference to other types and generic types > alias",
        "text": "property alias: PathIdentifier\n\nReturns aliased type name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeReferenceExpression.is_defined",
        "title": "Type declarations > Reference to other types and generic types > is_defined",
        "section": "Reference to other types and generic types > is_defined",
        "text": "property is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeReferenceExpression.is_protected",
        "title": "Type declarations > Reference to other types and generic types > is_protected",
        "section": "Reference to other types and generic types > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeReferenceExpression.model",
        "title": "Type declarations > Reference to other types and generic types > model",
        "section": "Reference to other types and generic types > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeReferenceExpression.module",
        "title": "Type declarations > Reference to other types and generic types > module",
        "section": "Reference to other types and generic types > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.TypeReferenceExpression.owner",
        "title": "Type declarations > Reference to other types and generic types > owner",
        "section": "Reference to other types and generic types > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariableTypeExpression",
        "title": "Type declarations > Reference to other types and generic types > VariableTypeExpression",
        "section": "Reference to other types and generic types > VariableTypeExpression",
        "text": "class ansys.scadeone.core.swan.VariableTypeExpression(name: Identifier)\n\nBases: TypeExpression\n\nType variable expression:\ntype_expr ::= ‘Id\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty name: Identifier\n\nName of variable.\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariableTypeExpression.get_full_path",
        "title": "Type declarations > Reference to other types and generic types > get_full_path",
        "section": "Reference to other types and generic types > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariableTypeExpression.set_owner",
        "title": "Type declarations > Reference to other types and generic types > set_owner",
        "section": "Reference to other types and generic types > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariableTypeExpression.is_defined",
        "title": "Type declarations > Reference to other types and generic types > is_defined",
        "section": "Reference to other types and generic types > is_defined",
        "text": "property is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariableTypeExpression.is_protected",
        "title": "Type declarations > Reference to other types and generic types > is_protected",
        "section": "Reference to other types and generic types > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariableTypeExpression.model",
        "title": "Type declarations > Reference to other types and generic types > model",
        "section": "Reference to other types and generic types > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariableTypeExpression.module",
        "title": "Type declarations > Reference to other types and generic types > module",
        "section": "Reference to other types and generic types > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariableTypeExpression.name",
        "title": "Type declarations > Reference to other types and generic types > name",
        "section": "Reference to other types and generic types > name",
        "text": "property name: Identifier\n\nName of variable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.VariableTypeExpression.owner",
        "title": "Type declarations > Reference to other types and generic types > owner",
        "section": "Reference to other types and generic types > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#arrays",
        "title": "Type declarations > Arrays",
        "section": "Arrays",
        "text": "Bases: TypeExpression\nArray type expression: type_expr := type_expr ^ expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue if type expression is a predefined type.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nArray size.\nArray cell type.\nArrays\nTypeExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ArrayTypeExpression",
        "title": "Type declarations > Arrays > ArrayTypeExpression",
        "section": "Arrays > ArrayTypeExpression",
        "text": "class ansys.scadeone.core.swan.ArrayTypeExpression(type: TypeExpression, size: Expression)\n\nBases: TypeExpression\n\nArray type expression: type_expr := type_expr ^ expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty size: Expression\n\nArray size.\n\n!! processed by numpydoc !!\n\n\n\nproperty type: TypeExpression\n\nArray cell type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ArrayTypeExpression.get_full_path",
        "title": "Type declarations > Arrays > get_full_path",
        "section": "Arrays > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ArrayTypeExpression.set_owner",
        "title": "Type declarations > Arrays > set_owner",
        "section": "Arrays > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ArrayTypeExpression.is_defined",
        "title": "Type declarations > Arrays > is_defined",
        "section": "Arrays > is_defined",
        "text": "property is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ArrayTypeExpression.is_protected",
        "title": "Type declarations > Arrays > is_protected",
        "section": "Arrays > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ArrayTypeExpression.model",
        "title": "Type declarations > Arrays > model",
        "section": "Arrays > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ArrayTypeExpression.module",
        "title": "Type declarations > Arrays > module",
        "section": "Arrays > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ArrayTypeExpression.owner",
        "title": "Type declarations > Arrays > owner",
        "section": "Arrays > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ArrayTypeExpression.size",
        "title": "Type declarations > Arrays > size",
        "section": "Arrays > size",
        "text": "property size: Expression\n\nArray size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ArrayTypeExpression.type",
        "title": "Type declarations > Arrays > type",
        "section": "Arrays > type",
        "text": "property type: TypeExpression\n\nArray cell type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#protected-type-expression",
        "title": "Type declarations > Protected type expression",
        "section": "Protected type expression",
        "text": "Bases: TypeExpression, ProtectedItem\nProtected type expression, i.e., saved as string if\nsyntactically incorrect.\nFull path of Swan construct.\nCheck if protected data has the specified markup.\nString markup.\nTrue when instance markup is same as parameter.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nProtected data between markups.\nProtected data.\nTrue if type expression is a predefined type.\nTell if item is syntactically protected and provided as a string.\nProtection markup.\nMarkup string.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nProtected type expression\nTypeExpression\nProtectedItem\npython:str\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\npython:str\npython:str\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr",
        "title": "Type declarations > Protected type expression > ProtectedTypeExpr",
        "section": "Protected type expression > ProtectedTypeExpr",
        "text": "class ansys.scadeone.core.swan.ProtectedTypeExpr(data: str)\n\nBases: TypeExpression, ProtectedItem\n\nProtected type expression, i.e., saved as string if\nsyntactically incorrect.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nhas_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!\n\n\n\nproperty markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr.get_full_path",
        "title": "Type declarations > Protected type expression > get_full_path",
        "section": "Protected type expression > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr.has_markup",
        "title": "Type declarations > Protected type expression > has_markup",
        "section": "Protected type expression > has_markup",
        "text": "has_markup(markup: str) -> bool\n\nCheck if protected data has the specified markup.\n\nParameters\n\nmarkup\n\npython:str\n\nString markup.\n\nReturns\n\nresult: bool\n\nTrue when instance markup is same as parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr.set_owner",
        "title": "Type declarations > Protected type expression > set_owner",
        "section": "Protected type expression > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr.data",
        "title": "Type declarations > Protected type expression > data",
        "section": "Protected type expression > data",
        "text": "property data: str\n\nProtected data between markups.\n\nReturns\n\npython:str\n\nProtected data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr.is_defined",
        "title": "Type declarations > Protected type expression > is_defined",
        "section": "Protected type expression > is_defined",
        "text": "property is_defined: bool\n\nTrue if type expression is a predefined type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr.is_protected",
        "title": "Type declarations > Protected type expression > is_protected",
        "section": "Protected type expression > is_protected",
        "text": "property is_protected\n\nTell if item is syntactically protected and provided as a string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr.markup",
        "title": "Type declarations > Protected type expression > markup",
        "section": "Protected type expression > markup",
        "text": "property markup: str\n\nProtection markup.\n\nReturns\n\npython:str\n\nMarkup string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr.model",
        "title": "Type declarations > Protected type expression > model",
        "section": "Protected type expression > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr.module",
        "title": "Type declarations > Protected type expression > module",
        "section": "Protected type expression > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/declarations/type",
        "href": "api/language/declarations/type.html#ansys.scadeone.core.swan.ProtectedTypeExpr.owner",
        "title": "Type declarations > Protected type expression > owner",
        "section": "Protected type expression > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "This section presents some examples using PyScadeOne:\nExamples"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#equations",
        "title": "Equations",
        "section": "Equations",
        "text": "Equations are grouped in a let section.\nBases: ScopeSection\nImplements:\nlet {{equation ;}} section.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nList of equation in let.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when section is given from {text%…%text} markup.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nEquations have a left-hand side (LHS), the flows that are defined by the equation\nand the equation expression.\nBases: SwanItem\nBase class for equations.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nEquation left-hand side part:\nlhs ::= ( ) | lhs_item {{ , lhs_item }} [[ , .. ]]\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nTrue when lhs list is partial (syntax: final ‘..’ not in the list.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn left-hand side list.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: SwanItem\nDefines an item on the left-hand side of an equation, an ID, or underscore ‘_’.\nIdentifier or None for underscore value.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturns id value or None.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nTrue when LHSItem is ‘_’.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Equation\nFlows definition using an expression:\nequation ::= lhs [luid] = expr\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nEquation expression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nLeft-hand side of the equation.\nEquation LUID.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nEquations\nScopeSection\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nSwanItem\nIdentifier\noptional\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nEquation\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LetSection",
        "title": "Equations > Equations > LetSection",
        "section": "Equations > LetSection",
        "text": "class ansys.scadeone.core.swan.LetSection(equations: List[Equation])\n\nBases: ScopeSection\n\nImplements:\n\nlet {{equation ;}} section.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty equations: List[Equation]\n\nList of equation in let.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LetSection.get_full_path",
        "title": "Equations > Equations > get_full_path",
        "section": "Equations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LetSection.set_owner",
        "title": "Equations > Equations > set_owner",
        "section": "Equations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LetSection.equations",
        "title": "Equations > Equations > equations",
        "section": "Equations > equations",
        "text": "property equations: List[Equation]\n\nList of equation in let.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LetSection.is_protected",
        "title": "Equations > Equations > is_protected",
        "section": "Equations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LetSection.is_text",
        "title": "Equations > Equations > is_text",
        "section": "Equations > is_text",
        "text": "property is_text: bool\n\nTrue when section is given from {text%…%text} markup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LetSection.model",
        "title": "Equations > Equations > model",
        "section": "Equations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LetSection.module",
        "title": "Equations > Equations > module",
        "section": "Equations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LetSection.owner",
        "title": "Equations > Equations > owner",
        "section": "Equations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.Equation",
        "title": "Equations > Equations > Equation",
        "section": "Equations > Equation",
        "text": "class ansys.scadeone.core.swan.Equation\n\nBases: SwanItem\n\nBase class for equations.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.Equation.get_full_path",
        "title": "Equations > Equations > get_full_path",
        "section": "Equations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.Equation.set_owner",
        "title": "Equations > Equations > set_owner",
        "section": "Equations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.Equation.is_protected",
        "title": "Equations > Equations > is_protected",
        "section": "Equations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.Equation.model",
        "title": "Equations > Equations > model",
        "section": "Equations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.Equation.module",
        "title": "Equations > Equations > module",
        "section": "Equations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.Equation.owner",
        "title": "Equations > Equations > owner",
        "section": "Equations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.EquationLHS",
        "title": "Equations > Equations > EquationLHS",
        "section": "Equations > EquationLHS",
        "text": "class ansys.scadeone.core.swan.EquationLHS(lhs_items: List[LHSItem], is_partial_lhs: bool | None = False)\n\nBases: SwanItem\n\nEquation left-hand side part:\n\nlhs ::= ( ) | lhs_item {{ , lhs_item }} [[ , .. ]]\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_partial_lhs: bool\n\nTrue when lhs list is partial (syntax: final ‘..’ not in the list.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty lhs_items: List[LHSItem]\n\nReturn left-hand side list.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.EquationLHS.get_full_path",
        "title": "Equations > Equations > get_full_path",
        "section": "Equations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.EquationLHS.set_owner",
        "title": "Equations > Equations > set_owner",
        "section": "Equations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.EquationLHS.is_partial_lhs",
        "title": "Equations > Equations > is_partial_lhs",
        "section": "Equations > is_partial_lhs",
        "text": "property is_partial_lhs: bool\n\nTrue when lhs list is partial (syntax: final ‘..’ not in the list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.EquationLHS.is_protected",
        "title": "Equations > Equations > is_protected",
        "section": "Equations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.EquationLHS.lhs_items",
        "title": "Equations > Equations > lhs_items",
        "section": "Equations > lhs_items",
        "text": "property lhs_items: List[LHSItem]\n\nReturn left-hand side list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.EquationLHS.model",
        "title": "Equations > Equations > model",
        "section": "Equations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.EquationLHS.module",
        "title": "Equations > Equations > module",
        "section": "Equations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.EquationLHS.owner",
        "title": "Equations > Equations > owner",
        "section": "Equations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LHSItem",
        "title": "Equations > Equations > LHSItem",
        "section": "Equations > LHSItem",
        "text": "class ansys.scadeone.core.swan.LHSItem(id: Identifier | str | None = None)\n\nBases: SwanItem\n\nDefines an item on the left-hand side of an equation, an ID, or underscore ‘_’.\n\nParameters\n\nid\n\nIdentifier (optional)\n\nIdentifier or None for underscore value.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty id: Identifier | None\n\nReturns id value or None.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty is_underscore: bool\n\nTrue when LHSItem is ‘_’.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LHSItem.get_full_path",
        "title": "Equations > Equations > get_full_path",
        "section": "Equations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LHSItem.set_owner",
        "title": "Equations > Equations > set_owner",
        "section": "Equations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LHSItem.id",
        "title": "Equations > Equations > id",
        "section": "Equations > id",
        "text": "property id: Identifier | None\n\nReturns id value or None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LHSItem.is_protected",
        "title": "Equations > Equations > is_protected",
        "section": "Equations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LHSItem.is_underscore",
        "title": "Equations > Equations > is_underscore",
        "section": "Equations > is_underscore",
        "text": "property is_underscore: bool\n\nTrue when LHSItem is ‘_’.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LHSItem.model",
        "title": "Equations > Equations > model",
        "section": "Equations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LHSItem.module",
        "title": "Equations > Equations > module",
        "section": "Equations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.LHSItem.owner",
        "title": "Equations > Equations > owner",
        "section": "Equations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.ExprEquation",
        "title": "Equations > Equations > ExprEquation",
        "section": "Equations > ExprEquation",
        "text": "class ansys.scadeone.core.swan.ExprEquation(lhs: EquationLHS, expr: Expression, luid: Luid | None = None)\n\nBases: Equation\n\nFlows definition using an expression:\n\nequation ::= lhs [luid] = expr\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nEquation expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty lhs: EquationLHS\n\nLeft-hand side of the equation.\n\n!! processed by numpydoc !!\n\n\n\nproperty luid: Luid | None\n\nEquation LUID.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.ExprEquation.get_full_path",
        "title": "Equations > Equations > get_full_path",
        "section": "Equations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.ExprEquation.set_owner",
        "title": "Equations > Equations > set_owner",
        "section": "Equations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.ExprEquation.expr",
        "title": "Equations > Equations > expr",
        "section": "Equations > expr",
        "text": "property expr: Expression\n\nEquation expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.ExprEquation.is_protected",
        "title": "Equations > Equations > is_protected",
        "section": "Equations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.ExprEquation.lhs",
        "title": "Equations > Equations > lhs",
        "section": "Equations > lhs",
        "text": "property lhs: EquationLHS\n\nLeft-hand side of the equation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.ExprEquation.luid",
        "title": "Equations > Equations > luid",
        "section": "Equations > luid",
        "text": "property luid: Luid | None\n\nEquation LUID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.ExprEquation.model",
        "title": "Equations > Equations > model",
        "section": "Equations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.ExprEquation.module",
        "title": "Equations > Equations > module",
        "section": "Equations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/operator/equation",
        "href": "api/language/operator/equation.html#ansys.scadeone.core.swan.ExprEquation.owner",
        "title": "Equations > Equations > owner",
        "section": "Equations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#array",
        "title": "Array",
        "section": "Array",
        "text": "The following table lists all array operations. Operations are indicated with respect to\nthe syntax given in the Scade One documentation.\nOperation\nClass\n^ (Repetition)\nArrayRepetition\n@ (Concatenation)\nSee ref_bin_expr and ref_n_ary_expr\n[_] (Array constructor)\nArrayConstructor\n.[i] (Projection)\nArrayProjection\n.[_] default _ (Projection with default)\nProjectionWithDefault\nflatten\nSee Other Array Operations\nreverse\nSee Other Array Operations\n_[i..j] (Slice)\nSlice\ntranspose\nSee Other Array Operations\n_ with[_] (Functional update)\nSee update\npack\nSee Other Array Operations\nArray\nArray operations\nArrayRepetition\nArrayConstructor\nArrayProjection\nProjectionWithDefault\nSlice"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#array-operations",
        "title": "Array > Array operations",
        "section": "Array operations",
        "text": "Bases: Expression\nArray expression: expr ^ expr.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nExpression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nArray size.\nBases: Expression\nArray construction expression: [ group ].\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nGroup items as a Group.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Expression\nStatic projection: expr [index], where index is a static expression.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nExpression.\nIndex expression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nBases: Expression\nSlice expression: expr [ expr .. expr].\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nEnd of slice expression.\nExpression.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nStart of slice expression.\nBases: Expression\nDynamic projection: (expr . {{ label_or_index }}+ default expr).\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nDefault value.\nExpression.\nList of indices.\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nArray operations\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nExpression\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayRepetition",
        "title": "Array > Array operations > ArrayRepetition",
        "section": "Array operations > ArrayRepetition",
        "text": "class ansys.scadeone.core.swan.ArrayRepetition(expr: Expression, size: Expression)\n\nBases: Expression\n\nArray expression: expr ^ expr.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty size: Expression\n\nArray size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayRepetition.get_full_path",
        "title": "Array > Array operations > get_full_path",
        "section": "Array operations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayRepetition.set_owner",
        "title": "Array > Array operations > set_owner",
        "section": "Array operations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayRepetition.expr",
        "title": "Array > Array operations > expr",
        "section": "Array operations > expr",
        "text": "property expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayRepetition.is_protected",
        "title": "Array > Array operations > is_protected",
        "section": "Array operations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayRepetition.model",
        "title": "Array > Array operations > model",
        "section": "Array operations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayRepetition.module",
        "title": "Array > Array operations > module",
        "section": "Array operations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayRepetition.owner",
        "title": "Array > Array operations > owner",
        "section": "Array operations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayRepetition.size",
        "title": "Array > Array operations > size",
        "section": "Array operations > size",
        "text": "property size: Expression\n\nArray size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayConstructor",
        "title": "Array > Array operations > ArrayConstructor",
        "section": "Array operations > ArrayConstructor",
        "text": "class ansys.scadeone.core.swan.ArrayConstructor(group: Group)\n\nBases: Expression\n\nArray construction expression: [ group ].\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty group: Group\n\nGroup items as a Group.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayConstructor.get_full_path",
        "title": "Array > Array operations > get_full_path",
        "section": "Array operations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayConstructor.set_owner",
        "title": "Array > Array operations > set_owner",
        "section": "Array operations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayConstructor.group",
        "title": "Array > Array operations > group",
        "section": "Array operations > group",
        "text": "property group: Group\n\nGroup items as a Group.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayConstructor.is_protected",
        "title": "Array > Array operations > is_protected",
        "section": "Array operations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayConstructor.model",
        "title": "Array > Array operations > model",
        "section": "Array operations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayConstructor.module",
        "title": "Array > Array operations > module",
        "section": "Array operations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayConstructor.owner",
        "title": "Array > Array operations > owner",
        "section": "Array operations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayProjection",
        "title": "Array > Array operations > ArrayProjection",
        "section": "Array operations > ArrayProjection",
        "text": "class ansys.scadeone.core.swan.ArrayProjection(expr: Expression, index: Expression)\n\nBases: Expression\n\nStatic projection: expr [index], where index is a static expression.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!\n\n\n\nproperty index: Expression\n\nIndex expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayProjection.get_full_path",
        "title": "Array > Array operations > get_full_path",
        "section": "Array operations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayProjection.set_owner",
        "title": "Array > Array operations > set_owner",
        "section": "Array operations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayProjection.expr",
        "title": "Array > Array operations > expr",
        "section": "Array operations > expr",
        "text": "property expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayProjection.index",
        "title": "Array > Array operations > index",
        "section": "Array operations > index",
        "text": "property index: Expression\n\nIndex expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayProjection.is_protected",
        "title": "Array > Array operations > is_protected",
        "section": "Array operations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayProjection.model",
        "title": "Array > Array operations > model",
        "section": "Array operations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayProjection.module",
        "title": "Array > Array operations > module",
        "section": "Array operations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ArrayProjection.owner",
        "title": "Array > Array operations > owner",
        "section": "Array operations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Slice",
        "title": "Array > Array operations > Slice",
        "section": "Array operations > Slice",
        "text": "class ansys.scadeone.core.swan.Slice(expr: Expression, start: Expression, end: Expression)\n\nBases: Expression\n\nSlice expression: expr [ expr .. expr].\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty end: Expression\n\nEnd of slice expression.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty start: Expression\n\nStart of slice expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Slice.get_full_path",
        "title": "Array > Array operations > get_full_path",
        "section": "Array operations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Slice.set_owner",
        "title": "Array > Array operations > set_owner",
        "section": "Array operations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Slice.end",
        "title": "Array > Array operations > end",
        "section": "Array operations > end",
        "text": "property end: Expression\n\nEnd of slice expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Slice.expr",
        "title": "Array > Array operations > expr",
        "section": "Array operations > expr",
        "text": "property expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Slice.is_protected",
        "title": "Array > Array operations > is_protected",
        "section": "Array operations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Slice.model",
        "title": "Array > Array operations > model",
        "section": "Array operations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Slice.module",
        "title": "Array > Array operations > module",
        "section": "Array operations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Slice.owner",
        "title": "Array > Array operations > owner",
        "section": "Array operations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Slice.start",
        "title": "Array > Array operations > start",
        "section": "Array operations > start",
        "text": "property start: Expression\n\nStart of slice expression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ProjectionWithDefault",
        "title": "Array > Array operations > ProjectionWithDefault",
        "section": "Array operations > ProjectionWithDefault",
        "text": "class ansys.scadeone.core.swan.ProjectionWithDefault(expr: Expression, indices: List[LabelOrIndex], default: Expression)\n\nBases: Expression\n\nDynamic projection: (expr . {{ label_or_index }}+ default expr).\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nproperty default: Expression\n\nDefault value.\n\n!! processed by numpydoc !!\n\n\n\nproperty expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!\n\n\n\nproperty indices: List[LabelOrIndex]\n\nList of indices.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ProjectionWithDefault.get_full_path",
        "title": "Array > Array operations > get_full_path",
        "section": "Array operations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ProjectionWithDefault.set_owner",
        "title": "Array > Array operations > set_owner",
        "section": "Array operations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ProjectionWithDefault.default",
        "title": "Array > Array operations > default",
        "section": "Array operations > default",
        "text": "property default: Expression\n\nDefault value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ProjectionWithDefault.expr",
        "title": "Array > Array operations > expr",
        "section": "Array operations > expr",
        "text": "property expr: Expression\n\nExpression.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ProjectionWithDefault.indices",
        "title": "Array > Array operations > indices",
        "section": "Array operations > indices",
        "text": "property indices: List[LabelOrIndex]\n\nList of indices.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ProjectionWithDefault.is_protected",
        "title": "Array > Array operations > is_protected",
        "section": "Array operations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ProjectionWithDefault.model",
        "title": "Array > Array operations > model",
        "section": "Array operations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ProjectionWithDefault.module",
        "title": "Array > Array operations > module",
        "section": "Array operations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.ProjectionWithDefault.owner",
        "title": "Array > Array operations > owner",
        "section": "Array operations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#other-array-operations",
        "title": "Array > Other array operations",
        "section": "Other array operations",
        "text": "Arrays support the flatten, reverse, pack, and transpose operations.\nOperations are implemented by the PrefixPrimitive with\nan enumeration to select the proper operation.\ntranspose is associated with the Transpose\n(derives from PrefixPrimitive) to handle the\noperation parameters.\nBases: OperatorBase\nCall to primitive operator: operator ::= prefix_primitive [[sizes]]\nwith prefix_primitive:\nflatten,\npack,\nreverse,\noperators.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturns op_str [<<sizes>>].\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nPrimitive kind.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nSize parameters of call.\nBases: Enum\nPrefix primitive kind: reverse, transpose, pack, and flatten.\nflatten array operation.\npack array operation.\nreverse array operation.\ntranspose array operation.\nBases: PrefixPrimitive\nTranspose operator.\nParameters are a list of integer, but could be a\nsingle string if the indices are syntactically incorrect.\nFull path of Swan construct.\nHelper to set owner as the owner of each item in the Iterable items.\nOwner of the items.\nItems to set owner.\nReturns op_str [<<sizes>>].\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\nPrimitive kind.\nReturn model containing the Swan item.\nModule containing the item.\nModuleBase: module container, see ModuleBody\nand ModuleInterface\nOwner of current Swan construct.\nTranspose indices a list of str.\nSize parameters of call.\nOther array operations\nPrefixPrimitive\nTranspose\nPrefixPrimitive\nOperatorBase\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface\nEnum\nPrefixPrimitive\nSwanItem\nUnion\nSwanItem\nIterable\nSwanItem\nModuleBody\nModuleInterface"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitive",
        "title": "Array > Other array operations > PrefixPrimitive",
        "section": "Other array operations > PrefixPrimitive",
        "text": "class ansys.scadeone.core.swan.PrefixPrimitive(kind: PrefixPrimitiveKind, sizes: List[Expression])\n\nBases: OperatorBase\n\nCall to primitive operator: operator ::= prefix_primitive [[sizes]]\nwith prefix_primitive:\nflatten,\npack,\nreverse,\noperators.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str(op_str: str) -> str\n\nReturns op_str [<<sizes>>].\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty kind: PrefixPrimitiveKind\n\nPrimitive kind.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty sizes: List[Expression]\n\nSize parameters of call.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitive.get_full_path",
        "title": "Array > Other array operations > get_full_path",
        "section": "Other array operations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitive.set_owner",
        "title": "Array > Other array operations > set_owner",
        "section": "Other array operations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitive.to_str",
        "title": "Array > Other array operations > to_str",
        "section": "Other array operations > to_str",
        "text": "to_str(op_str: str) -> str\n\nReturns op_str [<<sizes>>].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitive.is_protected",
        "title": "Array > Other array operations > is_protected",
        "section": "Other array operations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitive.kind",
        "title": "Array > Other array operations > kind",
        "section": "Other array operations > kind",
        "text": "property kind: PrefixPrimitiveKind\n\nPrimitive kind.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitive.model",
        "title": "Array > Other array operations > model",
        "section": "Other array operations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitive.module",
        "title": "Array > Other array operations > module",
        "section": "Other array operations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitive.owner",
        "title": "Array > Other array operations > owner",
        "section": "Other array operations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitive.sizes",
        "title": "Array > Other array operations > sizes",
        "section": "Other array operations > sizes",
        "text": "property sizes: List[Expression]\n\nSize parameters of call.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitiveKind",
        "title": "Array > Other array operations > PrefixPrimitiveKind",
        "section": "Other array operations > PrefixPrimitiveKind",
        "text": "class ansys.scadeone.core.swan.PrefixPrimitiveKind(value)\n\nBases: Enum\n\nPrefix primitive kind: reverse, transpose, pack, and flatten.\n\n!! processed by numpydoc !!\n\n\n\nFlatten = 1\n\nflatten array operation.\n\n!! processed by numpydoc !!\n\n\n\nPack = 2\n\npack array operation.\n\n!! processed by numpydoc !!\n\n\n\nReverse = 3\n\nreverse array operation.\n\n!! processed by numpydoc !!\n\n\n\nTranspose = 4\n\ntranspose array operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitiveKind.Flatten",
        "title": "Array > Other array operations > Flatten",
        "section": "Other array operations > Flatten",
        "text": "Flatten = 1\n\nflatten array operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitiveKind.Pack",
        "title": "Array > Other array operations > Pack",
        "section": "Other array operations > Pack",
        "text": "Pack = 2\n\npack array operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitiveKind.Reverse",
        "title": "Array > Other array operations > Reverse",
        "section": "Other array operations > Reverse",
        "text": "Reverse = 3\n\nreverse array operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.PrefixPrimitiveKind.Transpose",
        "title": "Array > Other array operations > Transpose",
        "section": "Other array operations > Transpose",
        "text": "Transpose = 4\n\ntranspose array operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose",
        "title": "Array > Other array operations > Transpose",
        "section": "Other array operations > Transpose",
        "text": "class ansys.scadeone.core.swan.Transpose(params: List[int] | str, sizes: List[Expression])\n\nBases: PrefixPrimitive\n\nTranspose operator.\n\nParameters are a list of integer, but could be a\nsingle string if the indices are syntactically incorrect.\n\n!! processed by numpydoc !!\n\n\n\nget_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nstatic set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!\n\n\n\nto_str(op_str: str) -> str\n\nReturns op_str [<<sizes>>].\n\n!! processed by numpydoc !!\n\n\n\nproperty is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!\n\n\n\nproperty kind: PrefixPrimitiveKind\n\nPrimitive kind.\n\n!! processed by numpydoc !!\n\n\n\nproperty model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!\n\n\n\nproperty module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!\n\n\n\nproperty owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!\n\n\n\nproperty params: List[str]\n\nTranspose indices a list of str.\n\n!! processed by numpydoc !!\n\n\n\nproperty sizes: List[Expression]\n\nSize parameters of call.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose.get_full_path",
        "title": "Array > Other array operations > get_full_path",
        "section": "Other array operations > get_full_path",
        "text": "get_full_path() -> str\n\nFull path of Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose.set_owner",
        "title": "Array > Other array operations > set_owner",
        "section": "Other array operations > set_owner",
        "text": "static set_owner(owner: Self, children: Self | Iterable[Self])\n\nHelper to set owner as the owner of each item in the Iterable items.\n\nParameters\n\nowner\n\nSwanItem\n\nOwner of the items.\n\nchildren\n\nUnion[SwanItem, Iterable[SwanItem]]\n\nItems to set owner.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose.to_str",
        "title": "Array > Other array operations > to_str",
        "section": "Other array operations > to_str",
        "text": "to_str(op_str: str) -> str\n\nReturns op_str [<<sizes>>].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose.is_protected",
        "title": "Array > Other array operations > is_protected",
        "section": "Other array operations > is_protected",
        "text": "property is_protected: bool\n\nTell if a construct item is syntactically protected with some markup\nand is stored as a string (without the markup).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose.kind",
        "title": "Array > Other array operations > kind",
        "section": "Other array operations > kind",
        "text": "property kind: PrefixPrimitiveKind\n\nPrimitive kind.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose.model",
        "title": "Array > Other array operations > model",
        "section": "Other array operations > model",
        "text": "property model: Model\n\nReturn model containing the Swan item.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose.module",
        "title": "Array > Other array operations > module",
        "section": "Other array operations > module",
        "text": "property module: ModuleBase\n\nModule containing the item.\n\nReturns:\n\nModuleBase: module container, see ModuleBody\nand ModuleInterface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose.owner",
        "title": "Array > Other array operations > owner",
        "section": "Other array operations > owner",
        "text": "property owner: Self\n\nOwner of current Swan construct.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose.params",
        "title": "Array > Other array operations > params",
        "section": "Other array operations > params",
        "text": "property params: List[str]\n\nTranspose indices a list of str.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/language/expressions/array",
        "href": "api/language/expressions/array.html#ansys.scadeone.core.swan.Transpose.sizes",
        "title": "Array > Other array operations > sizes",
        "section": "Other array operations > sizes",
        "text": "property sizes: List[Expression]\n\nSize parameters of call.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "User guide"
    }
]